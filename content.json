{"pages":[],"posts":[{"title":"CloudFlare Workers 反代任意网站和挂载单页代码","text":"介绍 CloudFlare Workers是一个支持jsproxy的无服务器函数服务，提供全球CDN支持，免费用户有每天10万请求额度； CloudFlare官网：https://dash.cloudflare.com 记录下一些简单的使用方法，以后再陆续更新； Workers 单页挂载代码 addEventListener('fetch', event =&gt; { event.respondWith(handleRequest(event.request)) }) // HTML代码let html = &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;div&amp;gt;Hello world!&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;; /** Respond to the request @param {Request} request /async function handleRequest(request) {return new Response(html, { headers: {'Content-Type': 'text/html; charset=UTF-8' }, status: 200})}Workers 反代任意网站// Website you intended to retrieve for users. const upstream = 'sunpma.com' // Custom pathname for the upstream website.const upstream_path = ‘/‘ // Website you intended to retrieve for users using mobile devices.const upstream_mobile = ‘sunpma.com’ // Countries and regions where you wish to suspend your service.const blocked_region = [‘KP’, ‘SY’, ‘PK’, ‘CU’] // IP addresses which you wish to block from using your service.const blocked_ip_address = [‘0.0.0.0’, ‘127.0.0.1’] // Whether to use HTTPS protocol for upstream address.const https = true // Whether to disable cache.const disable_cache = false // Replace texts.const replace_dict = { ‘$upstream’: ‘$custom_domain’, ‘//sunpma.com’: ‘’} addEventListener(‘fetch’, event =&gt; { event.respondWith(fetchAndApply(event.request));}) async function fetchAndApply(request) { const region = request.headers.get(‘cf-ipcountry’).toUpperCase(); const ip_address = request.headers.get(‘cf-connecting-ip’); const user_agent = request.headers.get(‘user-agent’); let response = null; let url = new URL(request.url); let url_hostname = url.hostname; if (https == true) { url.protocol = 'https:'; } else { url.protocol = 'http:'; } if (await device_status(user_agent)) { var upstream_domain = upstream; } else { var upstream_domain = upstream_mobile; } url.host = upstream_domain; if (url.pathname == '/') { url.pathname = upstream_path; } else { url.pathname = upstream_path + url.pathname; } if (blocked_region.includes(region)) { response = new Response('Access denied: WorkersProxy is not available in your region yet.', { status: 403 }); } else if (blocked_ip_address.includes(ip_address)) { response = new Response('Access denied: Your IP address is blocked by WorkersProxy.', { status: 403 }); } else { let method = request.method; let request_headers = request.headers; let new_request_headers = new Headers(request_headers); new_request_headers.set('Host', upstream_domain); new_request_headers.set('Referer', url.protocol + '//' + url_hostname); let original_response = await fetch(url.href, { method: method, headers: new_request_headers }) connection_upgrade = new_request_headers.get(&quot;Upgrade&quot;); if (connection_upgrade &amp;amp;&amp;amp; connection_upgrade.toLowerCase() == &quot;websocket&quot;) { return original_response; } let original_response_clone = original_response.clone(); let original_text = null; let response_headers = original_response.headers; let new_response_headers = new Headers(response_headers); let status = original_response.status; if (disable_cache) { new_response_headers.set('Cache-Control', 'no-store'); } new_response_headers.set('access-control-allow-origin', '*'); new_response_headers.set('access-control-allow-credentials', true); new_response_headers.delete('content-security-policy'); new_response_headers.delete('content-security-policy-report-only'); new_response_headers.delete('clear-site-data'); if (new_response_headers.get(&quot;x-pjax-url&quot;)) { new_response_headers.set(&quot;x-pjax-url&quot;, response_headers.get(&quot;x-pjax-url&quot;).replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname)); } const content_type = new_response_headers.get('content-type'); if (content_type != null &amp;amp;&amp;amp; content_type.includes('text/html') &amp;amp;&amp;amp; content_type.includes('UTF-8')) { original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname); } else { original_text = original_response_clone.body } response = new Response(original_text, { status, headers: new_response_headers }) } return response; } async function replace_response_text(response, upstream_domain, host_name) { let text = await response.text() var i, j; for (i in replace_dict) { j = replace_dict[i] if (i == '$upstream') { i = upstream_domain } else if (i == '$custom_domain') { i = host_name } if (j == '$upstream') { j = upstream_domain } else if (j == '$custom_domain') { j = host_name } let re = new RegExp(i, 'g') text = text.replace(re, j); } return text; } async function device_status(user_agent_info) { var agents = [“Android”, “iPhone”, “SymbianOS”, “Windows Phone”, “iPad”, “iPod”]; var flag = true; for (var v = 0; v &lt; agents.length; v++) { if (user_agent_info.indexOf(agents[v]) &gt; 0) { flag = false; break; } } return flag;}替换掉其中的sunpma.com为你需要反代的网址即可；","link":"/2021/10/31/CloudFlare-Workers/"},{"title":"使用 Cloudflare Pages 托管静态网站","text":"Cloudflare Pages 是一个静态网站托管服务，功能和 Github Pages 差不多，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。Cloudflare 是全球最大的几个 CDN 服务商之一，速度应该会比 Github Pages 好一些，而且 Cloudflare Pages 一个账户可以创建多个网站。 最近我准备把 MWordStar 的帮助文档迁移到 Cloudflare Pages ，这样我的服务器就可以少管理一个网站，服务器出问题也不会影响主题帮助文档的访问。这里就简单写一下 Cloudflare Pages 的使用。 关联 Github 存储库直接访问 https://pages.cloudflare.com/ ，没有账号的可以按照提示注册，有账号的可以直接登录。 Cloudflare Pages 的官网首页没有中文，但部署和设置页面是有中文的。登录后点击 创建项目 ，如下：点击 连接 Github 账户 ：这里会弹出 Github 的授权页面，选择 Install &amp; Authorize 允许 Cloudflare 访问 Github 账户，如下：然后会显示 Github 存储库，也包括非公开的存储库，选择要部署的存储库，点击 开始设置 ：设置构建命令和存放构建的页面的目录：Cloudflare 克隆存储库后会自动执行 npm install 之类的命令下载所需的依赖，然后执行构建命令，然后把构建完成的文件放到网站目录。 点击 保存并部署 后 Cloudflare Pages 就会开始构建和部署，如下：同时下方也会输出日志：部署完成后点击 继续处理项目 就可以看到部署的网站了，如下：默认的域名是 项目名称.pages.dev 。 设置域名点击 自定义域 ：输入要绑定的域名：如果你用的是 Cloudflare 的 DNS 的话，Cloudflare可以一键设置 CNAME。如果不是的话就需要手动设置 CNAME，登录域名管理后台，添加一条 CNAME 指向默认的 pages.dev 域名。 我使用的是 Cloudflare 的 DNS，可以自动设置 CNAME：设置完成后需要一段时间才会生效。 以上就是 Cloudflare Pages 的设置过程。免费的 Cloudflare Pages 账户每月最多只能构建 500 次，对于个人博客或小网站来说已经足够。 目前 Cloudflare Pages 只能通过 Github 来部署，不能直接上传 HTML。","link":"/2021/10/31/Cloudflare-Pages/"},{"title":"Linux 搭建 Minecraft 基岩版服务器","text":"Minecraft Bedrock Edition 也就是我的世界基岩版，这是 Minecraft 的另一个版本。Minecraft 基岩版可以运行在 Win10、Android、iOS、XBox。基岩版不能使用 Java 版的服务器，Java 版也不能使用基岩版的服务器，不过 Win10、Android、iOS、XBox 的基岩版都可以使用同一个服务器，也就是说基岩版的服务器可以让 Win10 和手机一起联机。 目前基岩版的服务器还是测试版，因为不是用 Java 编写的，所以目前只能在 Windows 和 Ubuntu 上搭建。 我使用的是阿里云的轻量应用服务器，配置是 1 核 2 G，使用的系统是 Ubuntu 18.04。 下载可以进入 https://www.minecraft.net/en-us/download/server/bedrock/ 下载服务器，目前只有 Windows 和 Ubuntu 两个版本。下载之前需要选中 I agree to the Minecraft End User License Agreement and Privacy Policy。你可以下载到本地电脑，然后通过 SFTP 上传到服务器，也可以右击 DOWNLOAD 复制链接地址，直接通过 wget 下载到服务器。 一般情况下官网默认就是最新版本的服务端，我下载的服务端版本是 1.14.32.1，客户端版本是 14.30，在游戏主界面的右下方可以查看版本。如果客户端版本比服务端版本低的话可以更新到最新版本，Win 10 可以在应用商店更新。 下载的压缩包中还会包含一个 bedrock_server_how_to.html，这就是服务器的帮助文档，建议可以下载一份服务端到本地电脑，方便查看帮助文档。 运行下载的服务端可能是一个 zip 格式的压缩包，先解压： unzip bedrock-server-1.14.32.1.zip 上面的命令是把文件解压到当前目录，其中的 bedrock-server-1.14.32.1.zip 就是压缩包的名称。 如果解压的时候出现： Command ‘unzip’ not found 可以输入： apt install -y zip 安装 zip。 基岩版的服务端还需要依赖 libcurl4-openssl-dev，安装 libcurl4-openssl-dev： apt install -y libcurl4-openssl-dev 安装完成后输入： LD_LIBRARY_PATH=. ./bedrock_server 启动服务器。 启动后会输出状态信息，如下： NO LOG FILE! - setting up server logging... [2020-04-02 20:50:22 INFO] Starting Server [2020-04-02 20:50:22 INFO] Version 1.14.32.1 [2020-04-02 20:50:22 INFO] Session ID 08940d5f-f2da-4da8-9130-c7e59f580559 [2020-04-02 20:50:22 INFO] Level Name: Bedrock level [2020-04-02 20:50:22 INFO] Game mode: 1 Creative [2020-04-02 20:50:22 INFO] Difficulty: 0 PEACEFUL [2020-04-02 20:50:22 INFO] opening worlds/Bedrock level/db [2020-04-02 20:50:25 INFO] IPv4 supported, port: 4999 [2020-04-02 20:50:25 INFO] IPv6 not supported [2020-04-02 20:50:25 INFO] IPv4 supported, port: 19132 [2020-04-02 20:50:25 INFO] IPv6 not supported [2020-04-02 20:50:27 INFO] Server started. 服务器默认的端口是 19132，协议是 UDP ，不是 TCP，开放端口的时候需要注意一下。 客户端连接 打开 Minecraft 基岩版，选择 游戏，选择 服务器，点击 添加，按照提示输入服务器 IP 和端口号。 如下：如果没有修改过配置文件的话，默认的端口号是 19132。 进入服务器之前需要登录 Xbox Live，只有账户中有 Minecraft 才能联机。 配置服务端解压后会包含一个名为 server.properties 的配置文件，服务器相关的配置就在这个配置文件中。 可以用 VI 之类的编辑器打开配置文件编辑，关于 VI 编辑器的使用可以看 Linux VI 编辑器简单使用教程 。 配置文件中的 # 开头的行是注释，可以不用管，主要就是修改 = 后面的内容。 下面是一些配置项说明： gamemode：默认的游戏模式，survival 生存，creative 创造，adventure 冒险。 difficulty：默认难度，peaceful 和平，easy 简单，normal 普通，hard 困难。 max-players：玩家数量限制，默认为 10。 server-port：服务器端口，默认为 19132。 server-portv6：IPv6 端口，默认为 19133。 online-mode：正版验证，如果你的服务器可以正常连接到 Xbox Live 的话，可以设置为 true，否则可以设置为 false，即便不开启正版验证，客户端也需要登录 Xbox Live 才能联机。 white-list：白名单，只有在白名单中的玩家才能进入服务器，默认为 false。 allow-cheats：允许作弊，默认为 false。 player-idle-timeout：自动踢出挂机玩家，默认为 30 分钟。 default-player-permission-level：默认玩家等级，visitor 游客，member 普通玩家，operator 管理员。 更详细的配置说明可以查看帮助文档。 白名单配置服务端解压后会包含一个 whitelist.json 文件，这就是储存白名单的文件，格式如下： [ { \"name\": \"name1\", \"ignoresPlayerLimit\": \"true\" }, { \"name\": \"name2\" } ] 其中的 name 是玩家的 Xbox 用户名，ignoresPlayerLimit 是忽略服务器人数限制，ignoresPlayerLimit 是可省略的。 只有 server.properties 配置文件中的 white-list 为 true，whitelist.json 中的白名单才会生效。 如果在服务器正在运行的时候修改了白名单的话，需要在服务器命令行中输入： whitelist.jsonwhitelist reload 重新加载白名单才会生效。 设置了白名单后就只有 whitelist.json 中的玩家才能进入服务器。 后台运行如果直接使用 LD_LIBRARY_PATH=. ./bedrock_server 启动服务器的话，退出 SSH 终端后，服务端也会停止运行。 这里可以使用 nohub 命令来启动服务端： nohub LD_LIBRARY_PATH=. ./bedrock_server &amp; 以上就是搭建 Minecraft 基岩版服务器的过程，更详细的服务器配置和命令可以查看帮助文档。","link":"/2020/01/06/Linux-Minecraft-BE/"},{"title":"Linux其他命令","text":"收集了一些常用的终端命令，便于需要时使用。本文主要包括： 查找文件 软链接 打包和压缩 软件安装 查找文件find 命令功能非常强大，通常用来在 特定的目录下 搜索 符合条件的文件序号 命令 作用01 find [路径] -name “*.py” 查找指定路径下扩展名是 .py 的文件，包括子目录如果省略路径，表示在当前文件夹下查找之前学习的通配符，在使用 find 命令时同时可用有关 find 的高级使用，在就业班会讲 软链接序号 命令 作用01 ln -s 被链接的源文件 链接文件 建立文件的软链接，用通俗的方式讲类似于 Windows 下的快捷方式注意：没有 -s 选项建立的是一个 硬链接文件两个文件占用相同大小的硬盘空间，工作中几乎不会建立文件的硬链接源文件要使用绝对路径，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用 硬链接简介在使用 ln 创建链接时，如果没有 -s 选项，会创建一个 硬链接，而不是软链接 文件软硬链接的示意图在 Linux 中，文件名 和 文件的数据 是分开存储的 提示： 在 Linux 中，只有文件的 硬链接数 == 0 才会被删除使用 ls -l 可以查看一个文件的硬链接的数量在日常工作中，几乎不会建立文件的硬链接，知道即可 打包压缩打包压缩 是日常工作中备份文件的一种方式 在不同操作系统中，常用的打包压缩方式是不同的 Windows 常用 rarMac 常用 zipLinux 常用 tar.gz 打包 ／ 解包tar 是 Linux 中最常用的 备份工具，此命令可以 把一系列文件 打包到 一个大文件中，也可以把一个 打包的大文件恢复成一系列文件tar 的命令格式如下： 打包文件tar -cvf 打包文件.tar 被打包的文件／路径… 解包文件tar -xvf 打包文件.tartar 选项说明选项 含义c 生成档案文件，创建打包文件x 解开档案文件v 列出归档解档的详细过程，显示进度f 指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后注意：f 选项必须放在最后，其他选项顺序可以随意 压缩／解压缩gziptar 与 gzip 命令结合可以使用实现文件 打包和压缩 tar 只负责打包文件，但不压缩用 gzip 压缩 tar 打包后的文件，其扩展名一般用 xxx.tar.gz在 Linux 中，最常见的压缩文件格式就是 xxx.tar.gz 在 tar 命令中有一个选项 -z 可以调用 gzip，从而可以方便的实现压缩和解压缩的功能命令格式如下： 压缩文件tar -zcvf 打包文件.tar.gz 被压缩的文件／路径… 解压缩文件tar -zxvf 打包文件.tar.gz 解压缩到指定路径tar -zxvf 打包文件.tar.gz -C 目标路径选项 含义-C 解压缩到指定目录，注意：要解压缩的目录必须存在bzip2(two)tar 与 bzip2 命令结合可以使用实现文件 打包和压缩（用法和 gzip 一样） tar 只负责打包文件，但不压缩，用 bzip2 压缩 tar 打包后的文件，其扩展名一般用 xxx.tar.bz2在 tar 命令中有一个选项 -j 可以调用 bzip2，从而可以方便的实现压缩和解压缩的功能 命令格式如下： 压缩文件tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径… 解压缩文件tar -jxvf 打包文件.tar.bz2 软件安装通过 apt 安装／卸载软件apt 是 Advanced Packaging Tool，是 Linux 下的一款安装包管理工具可以在终端中方便的 安装／卸载／更新软件包 1. 安装软件$ sudo apt install 软件包 2. 卸载软件$ sudo apt remove 软件名 3. 更新已安装的包$ sudo apt upgrade配置软件源如果希望在 ubuntu 中安装软件，更加快速，可以通过设置镜像源，选择一个访问网速更快的服务器，来提供软件下载／安装服务提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了所谓镜像源，就是所有服务器的内容是相同的（镜像），但是根据所在位置不同，国内服务器通常速度会更快一些！","link":"/2020/11/12/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/"},{"title":"MTG 一款Telegram专用代理工具","text":"前言Telegram的几种内置代理，SOCKS5就不用说了，明文传输一用就被封MTProxy原来也还好，可惜现在被识别了，博主自己使用的情况，不管是官方版还是go语言版，基本没有坚持挺过24小时，就被阻断端口，虽然可以换端口，虽然有65535个端口可以更换，但还是非常麻烦。 介绍MTG是基于 MTProxy的一个分支，基于代理的重放攻击的预防，在理论上是不会被干掉的MTG代理遵循 ShadowSocks的方式，并且 MTG非常的轻量，无论安装还是卸载都非常简单。一键安装bash &lt;(wget -qO- https://git.io/mtg.sh)安装过程root@ubuntu:~# systemctl stop mtg &amp;&amp; systemctl disable mtg Failed to stop mtg.service: Unit mtg.service not loaded. root@ubuntu:~# rm -f /usr/local/bin/mtg /lib/systemd/system/mtg.service /etc/mtg.conf root@ubuntu:~# bash &lt;(wget -qO- https://git.io/mtg.sh) Verifying archive integrity... 100% All good. Uncompressing Bullshit-free MTPROTO proxy Bin package [build 2019-12-26] 100% ================================================== &gt;Random port generated, input another if wish to change, press Enter to continue 65535 # 这里输入你要设定的端口，记得后台放行端口 Input a domain for FakeTLS mode, &quot;bing.com&quot; will be used if left empty # 这里输入TLS使用的域名，默认使用bing.com，建议直接回车使用默认域名 # 设置完这两项就OK，然后等待安装完成，在最后会给出你的TG代理连接 ================================================== &gt; Using: PORT: 65535, FakeTLS DOMAIN : bing.com ================================================== &gt; Downloading mtg binary ... 2020-01-22 13:13:15 URL:https://github-production-release-asset-2e65be.s3.amazonaws.com/135544649/cca8c080-0af8-11ea-9a56-32a4f2f0d345?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200122%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200122T051312Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=17d481bc81f881400c01e5d27b6de83f2eda890ef89aff01b0f7861d9b418aff&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Dmtg-linux-amd64&amp;response-content-type=application%2Foctet-stream [10481664/10481664] -&gt; &quot;/usr/local/bin/mtg&quot; [1] FINISHED --2020-01-22 13:13:15-- Total wall clock time: 4.9s Downloaded: 1 files, 10.0M in 1.9s (5.34 MB/s) ================================================== v1.0.1 (go version go1.13.4 linux/amd64) [Tue, 19 Nov 2019 15:15:49 +0000] Created symlink from /etc/systemd/system/multi-user.target.wants/mtg.service to /lib/systemd/system/mtg.service. ================================================== &gt;Installation Done. Waiting for service to load ... &gt; Generated Secret: eed8229777e783af51b95da521ca008fb662696e672e636f6d &gt; Mtg listening at port: 9024 &gt; ... &gt; Setup mtproxy in telegram with following URL: Jan 22 13:13:16 ubuntu mtg[5764]: &quot;tme_url&quot;: &quot;https://t.me/proxy?port=65535&amp;secret=eed8229777e783af51b95da521ca008fb662696e672e636f6d&amp;server=XX.XX.XX.XX&quot;, Jan 22 13:13:16 ubuntu mtg[5764]: &quot;tme_url&quot;: &quot;https://t.me/proxy?port=65535&amp;secret=eed8229777e783af51b95da521ca008fb662696e672e636f6d&amp;server=%3Cnil%3E&quot;, &gt; Bye. 安装完成后会给出两条链接，其中第一条链接中有IP地址的就是你的MTG专用代理卸载# 卸载MTGsystemctl stop mtg &amp;&amp; systemctl disable mtg 删除安装目录rm -f /usr/local/bin/mtg /lib/systemd/system/mtg.service /etc/mtg.conf","link":"/2020/10/31/MTG/"},{"title":"Linux 搭建 Minecraft Java 服务器","text":"我的世界 (Minecraft) 可以单人游戏，也可以在局域网联机，也可以自己搭建服务器，官方也提供了服务端下载。因为 Java 版的 Minecraft 服务端也是用 Java 编写的，所以可以在 Windows、Linux、Mac 上搭建服务器。 虽然网易代理了 Minecraft，但是需要网易官方的客户端才能使用网易的服务器，相比自己搭建来说限制也比较多。自己搭建服务器可以直接使用官方的 Minecraft Java 版来联机，而且可自定义的方面也比较多。 关于服务器我这里使用的是阿里云的轻量应用服务器，配置是 1 核 2G 5M，这个配置对于十个人以下的服务器也基本够用。 关于玩家人数和服务器配置要求可以稍微参考一下 http://canihostaminecraftserver.com/ 的计算结果。 我使用的 Linux 版本是 CentOS 7，CentOS 和 Ubuntu 除了在安装环境和设置端口有点不一样外其它设置都差不多。 安装 JavaCentOS/Fedora 安装 Java： yum install -y java Ubuntu/Debian 安装 Java： apt install -y java 下载服务器可以到 https://mcversions.net/ 下载，服务器版本需要和客户端版本一致。可以直接复制下载地址用 wget 下载，也可以下载到本地电脑再上传到服务器，如果服务器在国内，直接使用服务器下载速度可能会比较慢。 下载的服务端文件可能是一个 server.jar 的 jar 文件，第一次启动后会在存放 server.jar 的目录生成很多个文件，可以在第一次启动前就单独创建一个目录来存放 server.jar 。 下载完成后需要启动一次服务器来生成相关配置文件，可以输入： java -Xms512M -Xmx1024M -jar server.jar -nogui 其中的 -Xms512M 是设置初始分配内存为 512M，-Xmx1024M 是设置最大占用内存为 1024M。 第一次启动时可能会输出如下的内容： [11:20:13] [main/ERROR]: Failed to load properties from file: server.properties [11:20:13] [main/WARN]: Failed to load eula.txt [11:20:13] [main/INFO]: You need to agree to the EULA in order to run the server. Go to eula.txt for more info. 此时在服务端的存放目录会生成一个 eula.txt 的文本文件，打开 eula.txt 把 eula=false 改为 eula=true 然后保存退出。 现在再启动服务器就可以启动成功了，不过在启动服务器之前可以先进行一些必要的配置。 配置说明Minecraft Server 的配置文件是 server.properties ，配置文件会在第一次启动服务器后生成。 下面是一些配置项的简单说明： online-mode：连接到 Minecraft 服务器验证玩家账户信息，如果玩家的 Minecraft 不是正版将无法进入服务器。如果你只允许正版玩家加入可以设置为 true，否则可以设置为 false。 gamemode：设置默认的游戏模式。survival 生存模式，creative 创造模式，adventure 冒险模式。spectator 旁观模式。 difficulty：设置游戏难度。peaceful 和平，easy 简单，normal 普通，hard 困难。 level-type：设置生成地图的类型。default 带有丘陵、河谷、海洋等的标准的世界，flat 超平坦世界，largebiomes 如同预设（default）世界，但所有生物群系都更大，amplified 如同预设世界，但世界生成高度提高。 pvp：玩家之间是否可以互相残杀。true 玩家可以互相残杀，false 玩家之间不会造成伤害。这里的伤害不包括岩浆或陷阱之类的间接伤害。 allow-nether：是否允许进入下界。true 可以进入下界，false 下界传送门不会生效。 enable-command-block：是否启用命令方块。true 启用，false 不启用。 level-seed：生成世界的种子，默认为空白。 player-idle-timeout：踢出长时间挂机的玩家，以分钟为单位，默认为 0 不限制。 spawn-animals：是否可以生成动物。true 可以生成动物，false 不可以生成动物。 spawn-monsters：是否可以生成攻击型生物和怪物。true 可以生成，false 不可以生成。 spawn-npcs：是否可以生成村民。true 可以生成，false 不可以生成。 query.port：监听服务器的端口号，默认为 25565。 server-port：服务器端口，默认为 25565。 这里只包含一部分的配置说明，如需查看更多配置说明可以访问 https://minecraft-zh.gamepedia.com/index.php?title=Server.properties&amp;variant=zh 。 在启动服务器前别忘了打开端口，关于 CentOS 开放端口可以看 CentOS 开放、关闭和查看端口 如果是阿里云的服务器的话，还需要在服务器后台的防火墙开放端口。 客户端连接进入 Minecraft，选择 多人游戏，点击 添加服务器，在服务器地址输入框输入服务器的 IP + 端口号，比如我的服务器 IP 是 39.112.55.66，端口是 25565，格式就是 39.112.55.66:25565，如下：服务器后台运行如果直接使用： java -Xms512M -Xmx1024M -jar server.jar -nogui 启动服务器的话，在断开远程连接后服务器也会停止运行。 如果要在断开远程连接后保持服务器运行可以使用： nohup java -Xms512M -Xmx1024M -jar server.jar -nogui &amp; 启动服务器。 安装 MOD如果你需要安装 MOD 的话，可以不需要手动下载服务端，FORGE 安装的时候会自动下载对应版本的服务端。 进入 http://files.minecraftforge.net/ 下载和你的 Minecraft 版本对应的 FORGE，选择完版本后点击 Installer 下载。 下载完成后是一个 jar 文件，可以上传到 Linux 服务器安装，也可以在自己的电脑上安装，安装完成后把生成的文件上传到服务器。下面就在本地电脑上安装，然后把安装生成的文件上传到服务器。 运行下载的 FORGE 安装程序，选择 Install Server，安装位置可以选择一个比较容易找到的文件夹，如下： 安装的时候需要下载文件，在国内速度可能会比较慢，安装完成后会生成一个 libraries 文件夹、一个 forge.jar、一个 minecraft_server.jar 和一个 JSON 文件，把安装生成的文件和目录全部上传到服务器。 上传完成后运行 forge.jar： java -Xms512M -Xmx1024M -jar forge-1.14.4-28.2.0.jar -nogui FORGE 的版本号可能会不一样。 第一次运行可能会出现如下的提示： [10:58:28] [main/ERROR] [minecraft/PropertyManager]: Failed to load properties from file: server.properties [10:58:28] [main/WARN] [minecraft/ServerEula]: Failed to load eula.txt [10:58:28] [main/INFO] [minecraft/MinecraftServer]: You need to agree to the EULA in order to run the server. Go to eula.txt for more info. 打开 eula.txt 把 eula=false 改为 eula=true 然后保存退出。 第一次运行后会生成一些文件和目录，其中的 server.properties 就是配置文件，mods 目录就是存放 MOD 的目录，下载的 jar 格式的 MOD 可以直接放到 mods 目录。 有的 MOD 除了服务端安装外客户端也需要安装，否则可能无法进入服务器。安装了 FORGE 后，启动服务器就需要通过 forge.jar 启动。 以上就是在 Linux 搭建服务器的过程，这个服务器只能给 Java 版的 Minecraft 使用。","link":"/2020/01/06/Linux-Minecraft-Java/"},{"title":"MarkDown","text":"首先提两个开始使用MarkDown时候自己的问题 单个回车，视为空格，连续回车，才是分段。（简书做过处理，单个回车也会分段，一样的写法GitHub就会挤在一块） GitHub中“# + 空格 + 标题”调整标题，简书中“# + 标题”就可以调整标题，GitHub显示为“#标题” 分割线三个或者三个以上的 - 或者 * 都可以。 效果行内代码使用``便是行内代码，需要和普通段落之间存在空行。` 这个符号是反引号，这个符号在Esc键下面，切换到英文下即可。 这是 iOS 代码效果这是 iOS 代码 代码块使用```表示代码块。 12self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];self.window.backgroundColor = [UIColor whiteColor]; 效果self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];self.window.backgroundColor = [UIColor whiteColor];标题使用 # 表示标题，一级标题使用一个 # ，二级标题使用两个 ## ，以此类推，共有六个等级。使用 ====== 表示高级标题，使用 —— 表示次阶标题。※ # 和标题之间要加空格 ※※ = 和 - 表示标题时，大于一个都可以表示 ※ 一级标题二级标题三级标题四级标题五级标题六级标题这是高阶标题（效果和一级标题一样）这是次阶标题（效果和二级标题一样）效果一级标题二级标题三级标题四级标题五级标题六级标题高级标题 = 一级标题次阶标题 = 二级标题段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行：使用两个或以上空格 + 回车。 列表列表的显示只需要在文字前加上 - 、 + 或 * 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号和文字之前加上一个字符的空格。 有序列表 第一行 第二行 第三行效果第一行第二行第三行无序列表 第一行 第二行 第三行效果第一行第二行第三行嵌套列表两个列表之间不能相邻，否则会解释为嵌套的列表。 第一行 第二行 第三行 第四行 第五行 第六行 第七行效果第一行第二行第三行第四行第五行第六行第七行※ 标记后面最少有一个空格或制表符。若不在引用区块中，必须和前方段落之间存在空行，后面最好还是空一行，否则会解释为嵌套的列表。有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如有序列表。无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例嵌套列表。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。 ※ 粗体使用 ** 或 __ 表示粗体※ ** 或 __ 与加粗的字体之间不能有空格 ※ 粗体 粗体效果粗体 非粗体 粗体 斜体使用 * 或 _ 表示斜体※ * 或 _ 与倾斜的字体之间不能有空格 ※ 斜体 斜体效果斜体 非斜体 斜体 斜体加粗使用 *** 或 ___ 表示斜体加粗※ *** 或 ___ 与倾斜的字体之间不能有空格 ※ 斜体加粗 斜体加粗效果斜体加粗 非斜体加粗 斜体加粗 删除线使用 ~~ 表示删除线※ ~~ 与倾斜的字体之间不能有空格 ※ 删除线效果删除线 非删除线 特殊符号处理Markdown使用反斜杠 \\ 插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理： \\ 反斜线` 反引号 星号_ 底线{} 花括号[] 方括号() 括弧井字号 加号 减号. 英文句点! 惊叹号※ 在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱 ※ 引用如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入 &gt; 这种尖括号(大于号)即可。 这是一级引用 这是二级引用 这是三级引用 这是一级引用（例1） 这是一级引用 这是二级引用 这是三级引用这是一级引用（例2）效果这是一级引用 这是二级引用 这是三级引用 这是一级引用（例1） 这是一级引用 这是二级引用 这是三级引用这是一级引用 （例2） ※ 从上面两例可看出，如果 &gt; 、&gt;&gt; 和 &gt;&gt;&gt; 等嵌套使用的话，从 &gt;&gt;&gt; 退到 &gt; 时，必须之间要加上一个空行作为过渡，否则默认为下一行和上一行是同一级别的引用。如上例所示。引用完之后，必须再空一行，重新一个新的开始，否则，以后的文字都将在引用的范围内，不要问我为什么，实践出真知。 ※ 链接1[饼干博客](https://www.bngan.com) 效果饼干博客 插入图片直接拖拽到编辑页面就自动添加。 效果IU表格用 | 表示表格纵向边界，表头和表内容用 - 隔开，并可用 : 进行对齐设置，两边都有 : 则表示居中，若不加 : 则默认左对齐。—-: 为右对齐:—- 为左对齐:—: 为居中对齐—– 为默认左对齐※ - 这样的分隔符至少要有1个！目前测试是这样的！ ※ 1234567891011121314151617| 姓名 | 年龄 | 性别 | 班级 || ---: | :----: | :------- | ---- || 张三 | 15 | 男 | 第二中学三年级五班 || 李四 | 17 | 男 | || 王五 | 15 | 女 | || 品牌 | 性能 | 价钱 || ------------- |:-------------:| -----:|| 张三牌 | 优 |\\$1600 || 李四牌 | 优 | \\$1200 || 王五 牌 | 优 便宜 | $1000 |apple | banana | cherry----|------|----buy | buy | buyits | its | itseat | eat | eat 效果 姓名 年龄 性别 班级 张三 15 男 第二中学三年级五班 李四 17 男 王五 15 女 品牌 性能 价钱 张三牌 优 $1600 李四牌 优 $1200 王五 牌 优 便宜 $1000 apple banana cherry buy buy buy its its its eat eat eat 注脚1这是一个注e脚测试[^footer1] 效果这是一个注脚测试[1]","link":"/2021/11/12/MarkDown/"},{"title":"V2RAY一键部署脚本","text":"此安装脚本除了可以安装V2以外，亦可以安装SS，MTP，Socks5，简单好用； 一键安装命令： Debian/Ubuntu apt-get update apt-get install curl -y bash &lt;(curl -s -L https://git.io/v2ray.sh) Centos yum update yum install curl -y bash &lt;(curl -s -L https://git.io/v2ray.sh) 根据提示选择需要的选项安装即可； 管理面板命令： v2ray 安装过程 1. 安装 卸载 请选择 [1-2]:1 请选择 V2Ray 传输协议 [1-32] TCP TCP_HTTP WebSocket WebSocket + TLS HTTP/2 mKCP mKCP_utp mKCP_srtp mKCP_wechat-video mKCP_dtls mKCP_wireguard QUIC QUIC_utp QUIC_srtp QUIC_wechat-video QUIC_dtls QUIC_wireguard TCP_dynamicPort TCP_HTTP_dynamicPort WebSocket_dynamicPort mKCP_dynamicPort mKCP_utp_dynamicPort mKCP_srtp_dynamicPort mKCP_wechat-video_dynamicPort ….准备安装了咯..看看有毛有配置正确了… ———- 安装信息 ————- V2Ray 传输协议 = TCP V2Ray 端口 = 64057 是否配置 Shadowsocks = 未配置 ———- END ————- 按 Enter 回车键 继续….或按 Ctrl + C 取消.安装结果 ---------- V2Ray 配置信息 ------------- 地址 (Address) = xx.xx.xx.xx 端口 (Port) = 64057 用户ID (User ID / UUID) = 35b4eee6-d90b-4e9f-bab9-c1266f2ad8c0 额外ID (Alter Id) = 233 传输协议 (Network) = tcp 伪装类型 (header type) = none ---------- END ------------- 提示: 输入 v2ray url 可生成 vmess URL 链接 / 输入 v2ray qr 可生成二维码链接 管理脚本 ## V2Ray 版本: v4.21.3 / V2Ray 状态: 正在运行 ## 1. 查看 V2Ray 配置 2. 修改 V2Ray 配置 3. 下载 V2Ray 配置 / 生成配置信息链接 / 生成二维码链接 4. 查看 Shadowsocks 配置 / 生成二维码链接 5. 修改 Shadowsocks 配置 6. 查看 MTProto 配置 / 修改 MTProto 配置 7. 查看 Socks5 配置 / 修改 Socks5 配置 8. 启动 / 停止 / 重启 / 查看日志 9. 更新 V2Ray / 更新 V2Ray 管理脚本 10. 卸载 V2Ray 11. 其他 温馨提示...如果你不想执行选项...按 Ctrl + C 即可退出 请选择菜单 [1-11]:","link":"/2021/10/31/V2RAY/"},{"title":"Linux远程管理常用命令","text":"收集了一些常用的终端命令，便于需要时使用。本文主要包括： 关机/重启 查看或配置网卡信息 远程登录和复制文件 关机/重启序号 命令 对应英文 作用01 shutdown 选项 时间 shutdown 关机／重新启动shutdownshutdown 命令可以 安全 关闭 或者 重新启动系统选项 含义 r 重新启动提示： 不指定选项和参数，默认表示 1 分钟之后 关闭电脑远程维护服务器时，最好不要关闭系统，而应该重新启动系统常用命令示例 重新启动操作系统，其中 now 表示现在$ shutdown -r now 立刻关机，其中 now 表示现在$ shutdown now 系统在今天的 20:25 会关机$ shutdown 20:25 系统再过十分钟后自动关机$ shutdown +10 取消之前指定的关机计划$ shutdown -c 查看或配置网卡信息序号 命令 对应英文 作用01 ifconfig configure a network interface 查看/配置计算机当前的网卡配置信息02 ping ip地址 ping 检测到目标 ip地址 的连接是否正常网卡 和 IP 地址网卡网卡是一个专门负责网络通讯的硬件设备IP 地址是设置在网卡上的地址信息我们可以把 电脑 比作 电话，网卡 相当于 SIM 卡，IP 地址 相当于 电话号码 IP 地址每台联网的电脑上都有 IP 地址，是保证电脑之间正常通讯的重要设置注意：每台电脑的 IP 地址不能相同，否则会出现 IP 地址冲突，并且没有办法正常通讯 ifconfigifconfig 可以查看／配置计算机当前的网卡配置信息 查看网卡配置信息$ ifconfig 查看网卡对应的 IP 地址$ ifconfig | grep inet提示：一台计算机中有可能会有一个 物理网卡 和 多个虚拟网卡，在 Linux 中物理网卡的名字通常以 ensXX 表示 127.0.0.1 被称为 本地回环/环回地址，一般用来测试本机网卡是否正常ping 检测到目标主机是否连接正常$ ping IP地址 检测本地网卡工作正常$ ping 127.0.0.1ping 一般用于检测当前计算机到目标计算机之间的网络 是否通畅，数值越大，速度越慢ping 的工作原理与潜水艇的声纳相似，ping 这个命令就是取自 声纳的声音* 网络管理员之间也常将 ping 用作动词 —— ping 一下计算机X，看他是否开着原理：网络上的机器都有 唯一确定的 IP 地址，我们给目标 IP 地址发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在 提示：在 Linux 中，想要终止一个终端程序的执行，绝大多数都可以使用 CTRL + C 远程登录和复制文件序号 命令 对应英文 作用01 ssh 用户名@ip secure shell 关机／重新启动02 scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径 secure copy 远程复制文件ssh 基础在 Linux 中 SSH 是 非常常用 的工具，通过 SSH 客户端 我们可以连接到运行了 SSH 服务器 的远程机器上 001_SSH示意图SSH 客户端是一种使用 Secure Shell（SSH） 协议连接到远程计算机的软件程序SSH 是目前较可靠，专为远程登录会话和其他网络服务 提供安全性的协议利用 SSH 协议 可以有效防止远程管理过程中的信息泄露通过 SSH 协议 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗SSH 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度域名 和 端口号域名由一串 用点分隔 的名字组成，例如：www.itcast.cn是 IP 地址 的别名，方便用户记忆端口号IP 地址：通过 IP 地址 找到网络上的 计算机 端口号：通过 端口号 可以找到 计算机上运行的应用程序 SSH 服务器 的默认端口号是 22，如果是默认端口号，在连接的时候，可以省略 常见服务端口号列表： 序号 服务 端口号01 SSH 服务器 2202 Web 服务器 8003 HTTPS 44304 FTP 服务器 21SSH 客户端的简单使用ssh [-p port] user@remoteuser 是在远程机器上的用户名，如果不指定的话默认为当前用户remote 是远程机器的地址，可以是 IP／域名，或者是 后面会提到的别名port 是 SSH Server 监听的端口，如果不指定，就为默认值 22提示： 使用 exit 退出当前用户的登录注意： ssh 这个终端命令只能在 Linux 或者 UNIX 系统下使用 如果在 Windows 系统中，可以安装 PuTTY 或者 XShell 客户端软件即可 提示： 在工作中，SSH 服务器的端口号很有可能不是 22，如果遇到这种情况就需要使用 -p 选项，指定正确的端口号，否则无法正常连接到服务器 Windows 下 SSH 客户端的安装PuttyXShell建议从官方网站下载正式的安装程序 scpscp 就是 secure copy，是一个在 Linux 下用来进行 远程拷贝文件 的命令它的地址格式与 ssh 基本相同，需要注意的是，在指定端口时用的是大写的 -P 而不是小写的002_SCP示意图 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py注意：: 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径scp -P port 01.py user@remote:Desktop/01.py 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.pyscp -P port user@remote:Desktop/01.py 01.py 加上 -r 选项可以传送文件夹把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktopscp -r demo user@remote:Desktop 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹scp -r user@remote:Desktop demo选项 含义-r 若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名-P 若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口注意： scp 这个终端命令只能在 Linux 或者 UNIX 系统下使用如果在 Windows 系统中，可以安装 PuTTY，使用 pscp 命令行工具或者安装 FileZilla 使用 FTP 进行文件传输FileZilla官方网站：https://www.filezilla.cn/download/clientFileZilla 在传输文件时，使用的是 FTP 服务 而不是 SSH 服务，因此端口号应该设置为 21SSH 高级免密码登录配置别名提示：有关 SSH 配置信息都保存在用户家目录下的 .ssh 目录下 免密码登录步骤配置公钥 执行 ssh-keygen 即可生成 SSH 钥匙，一路回车即可上传公钥到服务器 执行 ssh-copy-id -p port user@remote，可以让远程服务器记住我们的公钥示意图003_SSH 免密码示意图非对称加密算法 使用 公钥 加密的数据，需要使用 私钥 解密使用 私钥 加密的数据，需要使用 公钥 解密配置别名每次都输入 ssh -p port user@remote，时间久了会觉得很麻烦，特别是当 user, remote 和 port 都得输入，而且还不好记忆 而 配置别名 可以让我们进一步偷懒，譬如用：ssh mac 来替代上面这么一长串，那么就在 ~/.ssh/config 里面追加以下内容： Host MacHostName ip地址User usernamePort 22保存之后，即可用 ssh mac 实现远程登录了，scp 同样可以使用","link":"/2020/11/12/linux/"},{"title":"Linux用户权限相关命令","text":"收集了一些常用的终端命令，便于需要时使用。本文主要包括： 用户 和 权限 的基本概念用户管理 终端命令组管理 终端命令修改权限 终端命令用户 和 权限 的基本概念 基本概念用户 是 Linux 系统工作中重要的一环，用户管理包括 用户 与 组 管理在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都必须拥有一个账号，并且对于不同的系统资源拥有不同的使用权限在 Linux 中，可以指定 每一个用户 针对 不同的文件或者目录 的 不同权限对 文件／目录 的权限包括：序号 权限 英文 缩写 数字代号01 读 read r 402 写 write w 203 执行 excute x 1 组为了方便用户管理，提出了 组 的概念，如下图所示 在实际应用中，可以预先针对 组 设置好权限，然后 将不同的用户添加到对应的组中，从而不用依次为每一个用户设置权限 ls -l 扩展ls -l 可以查看文件夹下文件的详细信息，从左到右依次是： 权限，第 1 个字符如果是 d 表示目录硬链接数，通俗地讲，就是有多少种方式，可以访问到当前目录／文件拥有者，家目录下 文件／目录 的拥有者通常都是当前用户组，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲大小时间名称chmod 简单使用（重要）chmod 可以修改 用户／组 对 文件／目录 的权限命令格式如下：chmod +/-rwx 文件名|目录名提示：以上方式会一次性修改 拥有者 / 组 权限 超级用户Linux 系统中的 root 账号通常 用于系统的维护和管理，对操作系统的所有资源 具有所有访问权限在大多数版本的 Linux 中，都不推荐 直接使用 root 账号登录系统在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户” sudosu 是 substitute user 的缩写，表示 使用另一个用户的身份sudo 命令用来以其他身份来执行命令，预设的身份为 root用户使用 sudo 时，必须先输入密码，之后有 5 分钟的有效期限，超过期限则必须重新输入密码若其未经授权的用户企图使用 sudo，则会发出警告邮件给管理员 组管理 终端命令提示：创建组 / 删除组 的终端命令都需要通过 sudo 执行 序号 命令 作用01 groupadd 组名 添加组02 groupdel 组名 删除组03 cat /etc/group 确认组信息04 chgrp -R 组名 文件/目录名 递归修改文件/目录的所属组提示： 组信息保存在 /etc/group 文件中/etc 目录是专门用来保存 系统配置信息 的目录在实际应用中，可以预先针对 组 设置好权限，然后 将不同的用户添加到对应的组中，从而不用依次为每一个用户设置权限 用户管理 终端命令提示：创建用户 / 删除用户 / 修改其他用户密码 的终端命令都需要通过 sudo 执行 3.1 创建用户／设置密码／删除用户序号 命令 作用 说明01 useradd -m -g 组 新建用户名 添加新用户 -m 自动建立用户家目录-g 指定用户所在的组，否则会建立一个和同名的组02 passwd 用户名 设置用户密码 如果是普通用户，直接用 passwd 可以修改自己的账户密码03 userdel -r 用户名 删除用户 -r 选项会自动删除用户家目录04 cat /etc/passwd grep 用户名 确认用户信息 新建用户后，用户信息会保存在 /etc/passwd 文件中提示： 创建用户时，如果忘记添加 -m 选项指定新用户的家目录 —— 最简单的方法就是删除用户，重新创建创建用户时，默认会创建一个和用户名同名的组名用户信息保存在 /etc/passwd 文件中 查看用户信息序号 命令 作用01 id [用户名] 查看用户 UID 和 GID 信息02 who 查看当前所有登录的用户列表03 whoami 查看当前登录用户的账户名passwd 文件/etc/passwd 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是 用户名密码（x，表示加密的密码）UID（用户标识）GID（组标识）用户全名或本地帐号家目录登录使用的 Shell，就是登录之后，使用的终端命令，ubuntu 默认是 dashusermodusermod 可以用来设置 用户 的 主组 ／ 附加组 和 登录 Shell，命令格式如下：主组：通常在新建用户时指定，在 etc/passwd 的第 4 列 GID 对应的组附加组：在 etc/group 中最后一列表示该组的用户列表，用于指定 用户的附加权限提示：设置了用户的附加组之后，需要重新登录才能生效！ 修改用户的主组（passwd 中的 GID）usermod -g 组 用户名 修改用户的附加组usermod -G 组 用户名 修改用户登录 Shellusermod -s /bin/bash 用户名注意：默认使用 useradd 添加的用户是没有权限使用 sudo 以 root 身份执行命令的，可以使用以下命令，将用户添加到 sudo 附加组中 usermod -G sudo 用户名 which（重要）提示 /etc/passwd 是用于保存用户信息的文件/usr/bin/passwd 是用于修改用户密码的程序which 命令可以查看执行命令所在位置，例如：which ls 输出/bin/lswhich useradd 输出/usr/sbin/useraddbin 和 sbin在 Linux 中，绝大多数可执行文件都是保存在 /bin、/sbin、/usr/bin、/usr/sbin/bin（binary）是二进制执行文件目录，主要用于具体应用/sbin（system binary）是系统管理员专用的二进制代码存放目录，主要用于系统管理/usr/bin（user commands for applications）后期安装的一些软件/usr/sbin（super user commands for applications）超级用户的一些管理程序提示： cd 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 which 无法找到 cd 命令的位置 切换用户序号 命令 作用 说明01 su - 用户名 切换用户，并且切换目录 - 可以切换到用户家目录，否则保持位置不变02 exit 退出当前登录账户su 不接用户名，可以切换到 root，但是不推荐使用，因为不安全exit 示意图如下： 修改文件权限序号 命令 作用01 chown 修改拥有者02 chgrp 修改组03 chmod 修改权限命令格式如下： 修改文件|目录的拥有者chown 用户名 文件名|目录名 递归修改文件|目录的组chgrp -R 组名 文件名|目录名 递归修改文件权限chmod -R 755 文件名|目录名chmod 在设置权限时，可以简单地使用三个数字分别对应 拥有者 ／ 组 和 其他 用户的权限 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他chmod +/-rwx 文件名|目录名常见数字组合有（u表示用户／g表示组／o表示其他）： 777 ===&gt; u=rwx,g=rwx,o=rwx* 755 ===&gt; u=rwx,g=rx,o=rx644 ===&gt; u=rw,g=r,o=r","link":"/2020/11/12/linuxuser/"},{"title":"mailu搭建域名邮箱","text":"Mailu是一个简单而功能齐全的邮件服务器，它使用Docker映像启动。它是免费软件,愿意接受建议和外部贡献。该项目旨在为人们提供便捷的设置，易于维护且功能齐全的邮件服务器. 主要的功能 基本的邮件服务器 IMAP IMAP+,SMTP和 进阶电子邮件功能 别名，域别名，自定义路由 Web访问 多个Webmail管理界面 用户功能 别名，自动回复，自动转发，获取帐户 管理员功能 全局管理员，公告，每域配额 安全 强制启用TLS，Letsencrypt！，DKIM，防病毒扫描程序 反垃圾邮件 自主学习 灰名单 DMARC 和 SPF 全部组件安装的资源占用 安装之前的准备 25端口首先,你要确保你的服务器开启了25端口 检测方法: telnet smtp.aol.com 25正确回响 Trying 67.195.228.102…Connected to smtp.aol.g03.yahoodns.net.Escape character is ‘^]’.220 smtp.mail.yahoo.com ESMTP ready修改主机名编辑/etc/hosts 添加 YourServerIP 长主机名 短主机名之后执行 echo “主机名” &gt; /etc/hostnamehostname -F /etc/hostname设置DNS将根域名设置任意一个A记录 将mail.YourDomain(例如mail.moec.top)设置A记录到你的服务器IP 为根域名(moec.top)设置MX记录,指向mail.moec.top 设置SPF:将根域名(moec.top)设置TXT记录为 v=spf1 mx ~all 设置DMARC:将_dmarc.YourDomain(_dmarc.moec.top)设置TXT解析 值为v=DMARC1; p=none; pct=100; rua=mailto:admin@YourDomain 安装 1.安装Docker和Docker ComposeDocker安装: wget -qO- https://get.docker.com/ | bashDocker Compose安装: curl -L “https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)” -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose2. Mailu配置获取首先来到https://setup.mailu.io/ Step 1在第一步中选择Compose, simply using Docker Compose manager Step 2在Main mail domain and server display name(主要邮箱域名和服务器显示名称)中应该填写您的根域名 在Linked Website URL中填写邮件服务器主机名 一定要勾选Enable the admin UI (and path to the admin UI) 不然不会安装Web控制页面 Step 3 选择一些功能Step 3主要是设置一些功能 网页邮箱 杀毒 WebDAV 邮件代收 Enable Web email client (and path to the Web email client)启用Web电子邮件客户端（以及Web电子邮件客户端的路径） 可以选择Roundcube和Rainloop,我建议选择Rainloop,这个根据你的喜好 Step 4 -将Mailu暴露给世界在IP listen address中填写您服务器的IP地址 Subnet of the docker network. This should not conflict with any networks to which your system is connected. (Internal and external!)是Docker的内网,一般不用管 建议启用Enable unbound resolver (香菇大佬说的 Public hostnames为服务器的长主机名 (mail.moec.top) Database preferences数据库选择支持Sqlite,MySQL和PostgreSQL. PostgreSQL支持自动部署,而MySQL需要手动部署 按需选择~ 3.运行为Mailu创建文件夹 mkdir /mailucd /mailu 然后下载配置文件 直接docker-compose -p mailu up -d运行 4.Enjoy新建管理员账号docker-compose -p mailu exec admin flask mailu admin 用户名 域名 密码Ex: docker-compose -p mailu exec admin flask mailu admin laoxong moec.top d6ZHZKyq9ivLJ6之后访问Domain/admin进入管理界面 DKIM先点击Mail domains之后点击鼠标所指的地方来到域名详细 之后点击Generate keys生成DKIM记录 然后和根据提示配置 用户点击鼠标所指的地方来到用户管理 然后点击右上角Add User新建 真正的EnjoyRainloop设置中文,首先点击左下角的设置,然后选择General,点击Language后面的语言,选择中文 效果mail-tester测试得分 ：6.9/10 但是不要着急 我们来康康问题出在了哪 1.Similar message reported on Pyzor (http://pyzor.org) 在Pyzor（http://pyzor.org）上报告了类似的消息 这个原因是邮箱的内容是我随便输的 解决了这个问题直接就+2分 2.Delivered to internal network by a host with no rDNS 由没有rDNS的主机传递到内部网络 这个原因是因为我的Rdns设置的问题","link":"/2019/11/12/mailu/"},{"title":"在多台服务器上部署哪吒探针 vps监控","text":"开源地址：https://github.com/naiba/nezha预览地址：https://server.inkup.cn功能特性计划任务：备份脚本、服务重启，等定期运维任务。报警通知：CPU、内存、硬盘、带宽、流量实时监控。服务监控：HTTP、SSL证书、ping、TCP 端口等。自定义代码：改LOGO、改色调、加统计代码等。详情见文档部署教程一· 设置域名解析可以直接用 ip+端口 方式访问，为了安全及后期维护迁移方便，强烈建议设置用域名访问。准备两个域名，用本站域名举例：域名1： a.moththe.com 作为面板访问域名，套 CDN（保护源站IP不泄露）。域名2： b.moththe.com 不套CDN，指向面板服务器 IP，作为客户端与面板连接使用。两个域名都解析到部署面板服务器的IP。二. 创建 GitHub OAuth Apps需要有Github账号，没有的话先注册一个。这一步让Github账号用作面板后台登录验证。创建 OAuth Apps打开 Github Developer settings ，点击 New OAuth App 按钮填写站点名称和 URL 信息请参考图片填写，把 a.moththe.com 更换成自己面板域名，填写好以后点击 Register application 。https://套CDN的域名 https://套CDN的域名/oauth2/callback获取 OAuth Apps 的 Client ID 和 Client secret参照下图创建 client id 和 clients secret 并记下来。三. 部署哪吒探针面板端放行对应端口放行8008、5555两个端口，这是默认的，如果你安装中改为其他端口，防火墙放行相应的端口。一键安装脚本键入后按提示安装面板端，依次输入上面步骤获取的 Client ID ， Client secret 等相关信息。curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh sudo ./nezha.sh四. 设置域名访问设置反向代理在宝塔面板中新建站点，我这里是套CDN的域名，然后设置反代。反代配置文件location / { proxy_pass http://127.0.0.1:8008; proxy_set_header Host $host; } location /ws { proxy_pass http://127.0.0.1:8008; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;Upgrade&quot;; proxy_set_header Host $host; }配置 SSL 证书直接在宝塔面板中一键获取 Let's Encrypt 免费证书。如果域名托管在 Cloudflare，也可以使用CF生成的免费长期证书，填在面板中使用。然后开启强制 HTTPS 即可。现在就可以直接通过域名访问哪吒探针了，现在我们来配置被监控的服务器。五. 部署哪吒探针客户端（被监控）在哪吒面板中生成客户端连接密钥打开哪吒面板，点击登录后台，通过GitHub账号验证后进入管理后台，添加服务器，创建好以后记下生成的密钥一键安装客户端键入后按提示 安装监控Agent ，依次输入 域名2(我这里是不套CDN的域名），上一步骤中生成的连接密钥等相关信息。curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh sudo ./nezha.sh有多台被监控机器时，按照此步骤在控制面板添加服务器。其他功能可自行在哪吒面板后台摸索。常见问题1· 打开显示断开实时链接可以关闭CDN再试试。2· Centos8 中部署客户端或者面板端，一直显示离线请关闭SElinux，打开配置文件 vi /etc/selinux/config ，将 SELINUX=enforcing 改为 SELINUX=disabled ，重启机器 reboot ，然后键入安装脚本选择 重启Agent 。3· 修改服务器信息后变成离线在安装客户端(被监控)的服务器上执行 systemctl restart nezha-agent 重启程序。4· 启动nezha-agent还是一直显示离线检查配置有没有写对 cat /etc/systemd/system/nezha-agent.service | grep ExecStart 。5· 如何进行数据迁移、备份恢复？数据储存在 /opt/nezha 文件夹中，迁移数据时打包这个文件夹，到新环境解压。然后执行一键脚本安装即可。6· 首页服务器随机闪烁掉线？执行 ntpdate 0.pool.ntp.org 同步一下面板部署所在的服务器的时间。","link":"/2021/01/08/nezha/"},{"title":"编译一个openwrt固件","text":"0.创建一个GitHub账号。 首先打开https://github.com/ ，按照下图进行输入： 输入验证码，然后点击蓝色的按钮【Next：Select a Plan】 然后点击【Choose Free】 然后按照下图随便选一些选项： 然后随便填点文字，点击【Complete setup】 然后网页会提示：Please verify your email address（请检查你的邮件地址） 打开邮箱，查收GitHub发来的邮件。 点击【Verify email address】 输入邮箱和密码，点击【Sign in】 1.进行默认配置的编译 账号创建完成，需要同步Lean的源代码。 在网页上方的搜索框里面输入coolsnowwolf/lede 点击第一个结果 然后点击【Fork】按钮 出现如下的提示，意思是等待片刻： 然后点击【Action】选项卡 网页会提示“Workflows在fork的仓库中无法运行”，接下来点击绿色的按钮 【I understand my workflows, go ahead and run them】 然后点击进入Code选项卡： 点击.github/workflows 点击openwrt-ci.yml 点击编辑按钮进入编辑页面 第一次编辑此文档，即可触发GitHub Action的自动编译。 将左侧编辑栏的push、branches和- master前面的#删除，千万不要删掉空格。 然后点击右侧的【Start commit】，再点击【Commit changes】 此时点击Action选项卡，即可看到已经自动开始编译。 黄色为正在编译，绿色为编译完成，红色为编译失败。 点击openwrt-ci，即可看到编译过程。 编译完成之后这里会显示成下图这样，按下图指示即可下载编译好的固件。 2.使用自定义配置进行编译 首先我们打开Code选项卡，找到.github/workflows/openwrt-ci-yml这个文件，点击编辑： 注意事项： ①需要DIY哪个功能，就将cat、CONFIG、EOF前面的#号和空格删掉。 ②去掉#号之后，cat、CONFIG、以及EOF要和上面的#号对齐 ③编辑之后，需要点击【Start commit】和【Commit changes】提交修改。 ④新人尽量每次修改只改5行以内代码，并在提交代码时写好修改记录。 ⑤可以添加代码库中有，但是openwrt-ci.yml中没有的插件，如 CONFIG_PACKAGE_luci-app-uhttpd=y ⑥如果一个luci-app需要多个依赖，只需要填写该luci-app即可， 其余依赖包会在编译时自动勾选。 ⑦如果需要修改固件大小，可以添加如下代码： # 设置固件大小: cat &gt;&gt; .config &lt;&lt;EOF CONFIG_TARGET_KERNEL_PARTSIZE=30 CONFIG_TARGET_ROOTFS_PARTSIZE=400 EOF 其中：30代表固件中内核分区大小，400代表固件中ROOTFS分区大小 ⑧修改完代码之后，需要检查每组代码是否以cat &gt;&gt; .config &lt;&lt;EOF开头，并以EOF结尾。","link":"/2020/10/23/openwrt/"},{"title":"Linux 服务器使用 Rclone 挂载 OneDrive","text":"之前写过挂载 Google Drive 的过程，因为我的 Google Drive 空间不大，而 OneDrive 有 5T 的空间，所以准备把 OneDrive 挂载上去使用。OneDrive 的挂载方法和 Google Drive 大部分是差不多的，但 OneDrive 的授权要麻烦一些。这里简单记录一下我配置的过程。 下载安装使用脚本下载安装 Rclone：curl https://rclone.org/install.sh | sudo bash 初始化配置安装完成后输入：rclone config 可以看到：2021/04/14 07:14:46 NOTICE: Config file &quot;/root/.config/rclone/rclone.conf&quot; not found - using defaultsNo remotes found - make a new onen) New remotes) Set configuration passwordq) Quit config输入 n 新建配置。name 可以随便输入，然后会出现挂载的服务类型，如下：Type of storage to configure.Enter a string value. Press Enter for the default (\"\").Choose a number from below, or type in your own value 1 / 1Fichier \"fichier\" 2 / Alias for an existing remote \"alias\" 3 / Amazon Drive \"amazon cloud drive\" 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS \"s3\" 5 / Backblaze B2 \"b2\" 6 / Box \"box\" 7 / Cache a remote \"cache\" 8 / Citrix Sharefile \"sharefile\" 9 / Compress a remote \"compress\"10 / Dropbox \"dropbox\"11 / Encrypt/Decrypt a remote \"crypt\"12 / Enterprise File Fabric \"filefabric\"13 / FTP Connection \"ftp\"14 / Google Cloud Storage (this is not Google Drive) \"google cloud storage\"15 / Google Drive \"drive\"16 / Google Photos \"google photos\"17 / Hadoop distributed file system \"hdfs\"18 / Hubic \"hubic\"19 / In memory object storage system. \"memory\"20 / Jottacloud \"jottacloud\"21 / Koofr \"koofr\"22 / Local Disk \"local\"23 / Mail.ru Cloud \"mailru\"24 / Mega \"mega\"25 / Microsoft Azure Blob Storage \"azureblob\"26 / Microsoft OneDrive \"onedrive\"27 / OpenDrive \"opendrive\"28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \"swift\"29 / Pcloud \"pcloud\"30 / Put.io \"putio\"31 / QingCloud Object Storage \"qingstor\"32 / SSH/SFTP Connection \"sftp\"33 / Sugarsync \"sugarsync\"34 / Tardigrade Decentralized Cloud Storage \"tardigrade\"35 / Transparently chunk/split large files \"chunker\"36 / Union merges the contents of several upstream fs \"union\"37 / Webdav \"webdav\"38 / Yandex Disk \"yandex\"39 / Zoho \"zoho\"40 / http Connection \"http\"41 / premiumize.me \"premiumizeme\"42 / seafile \"seafile\"直接输入序号，比如我挂载的是 OneDrive 就可以输入 26 ，client_id 可以直接回车默认，client_secret 也可以直接回车默认，然后会出现 OneDrive 区域选择，如下：Choose national cloud region for OneDrive.Enter a string value. Press Enter for the default (\"global\").Choose a number from below, or type in your own value 1 / Microsoft Cloud Global \"global\" 2 / Microsoft Cloud for US Government \"us\" 3 / Microsoft Cloud Germany \"de\" 4 / Azure and Office 365 operated by 21Vianet in China \"cn\"可以直接输入 1 选择全球，然后是选择是否进行高级配置，如下：dit advanced config? (y/n)y) Yesn) No (default)可以输入 n ，接着是自动配置选择，如下：Remote configUse auto config?Say Y if not sureSay N if you are working on a remote or headless machiney) Yes (default)n) No可以输入 n ，这里需要获取授权码：For this to work, you will need rclone available on a machine that hasa web browser available.For more help and alternate methods see: https://rclone.org/remote_setup/Execute the following on the machine with the web browser (same rcloneversion recommended):rclone authorize &quot;onedrive&quot; Then paste the result below:授权码需要在本地电脑上获取，访问 https://rclone.org/downloads/ 根据你的电脑系统版本下载对应的 Rclone。下载完成后解压，进入存放 Rclone 的目录，以 Win10 为例，打开 Powershell ，我的 Rclone 放在 E:下载rclone-v1.55.0-windows-amd64 ，我可以输入：cd E:\\下载\\rclone-v1.55.0-windows-amd64 在存放 Rclone 的目录可以看到 rclone.exe 的可执行程序，输入：./rclone authorize &quot;onedrive&quot; 浏览器应该会自动打开，如果浏览器没有打开可以根据提示复制地址访问。如果浏览器登录了 OneDrive 的话会直接显示授权确认信息，如果没有登录的话会弹出登录页面，登录 OneDrive 后也会显示授权确认信息，如下：选择 接受 后在本地命令行会显示一串 JSON 格式的授权信息，复制授权信息包括首尾的 {} ，到 Linux 终端粘贴。然后是选择 OneDrive 的类型，如下：Choose a number from below, or type in an existing value1 / OneDrive Personal or Business \"onedrive\" 2 / Root Sharepoint site \"sharepoint\" 3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite) \"url\" 4 / Search for a Sharepoint site \"search\" 5 / Type in driveID (advanced) \"driveid\" 6 / Type in SiteID (advanced) \"siteid\" 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr) \"path\"可以输入 1 ，然后会显示找到的 OneDrive 账户，如下：Found 1 drives, please select the one you want to use:0: OneDrive (business) id=b!b_xnJJqyBMSVPjgvhvbP8XmJ_M_dMjhzrbhnaWknnbKqNBm8MTqM3kvEtW67PFound drive 'root' of type 'business', URL: https://xxx-my.sharepoint.com/personal/changbin_xxx_onmicrosoft_com/DocumentsIs that okay?y) Yes (default)n) No确认无误后输入 y ，接着会显示你选择的配置信息，确认无误后输入 y 保存配置。挂载输入：rclone mount configName:OneDriveLocation dir --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 其中的 configName 就是配置名称，OneDriveLocation 就是要挂载的 OneDrive 目录，dir 就是要挂载到的本地目录。例如我要把一个名为 OneDrive 的配置挂载到本地的 /OneDrive 目录，我可以这样写：rclone mount OneDrive:/ /OneDrive --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 我这里挂载的是整个 OneDrive 网盘，所以我写的是 OneDrive 的根目录 / 。挂载完成后不会显示任何内容，可以再开一个终端，输入 df -h 查看磁盘空间，如下：Filesystem Size Used Avail Use% Mounted ondevtmpfs 1.5G 0 1.5G 0% /devtmpfs 1.5G 0 1.5G 0% /dev/shmtmpfs 1.5G 153M 1.4G 11% /runtmpfs 1.5G 0 1.5G 0% /sys/fs/cgroup/dev/vda1 57G 26G 29G 48% /tmpfs 301M 0 301M 0% /run/user/0OneDrive 5.0T 1.1T 4.0T 21% /OneDrive挂载完成后进入挂载的目录就可以看到 OneDrive 的文件了，上传文件可以直接拷贝到挂载目录，下载也是直接拷贝到本地目录。挂载出错如果在挂载的时候出现了类似下面的提示：2021/03/04 18:58:16 Fatal error: failed to mount FUSE fs: fusermount: exec: &quot;fusermount&quot;: executable file not found in $PATH 需要安装 fuse。CentOS/Fedora 安装 fuse：yum install -y fuseUbuntu/Debian 安装 fuse：apt install -y fuse","link":"/2021/01/01/onedrive/"},{"title":"青龙2.10+XDD-Plus+nvjdc短信验证登录对接xdd-plus","text":"一、准备工作1.一台电脑（手机也可以，自行找ssh链接工具） 2.购买服务器，并开放服务器端口，这里以阿里云服务器为例。其它服务器自行百度，这里就不过多叙述。 3.连接服务器 二、开始搭建1.安装docke并设置开机启动 12345sudo yum check-updatecurl -sSL https://get.daocloud.io/docker | shsudo systemctl start dockersudo systemctl status dockersudo systemctl enable docker 2.拉取青龙面板1234567891011docker run -dit \\ --name ql \\ --hostname ql \\ --restart always \\ -p 5700:5700 \\ -v $PWD/ql/config:/ql/config \\ -v $PWD/ql/log:/ql/log \\ -v $PWD/ql/db:/ql/db \\ -v $PWD/ql/scripts:/ql/scripts \\ -v $PWD/ql/jbot:/ql/jbot \\ whyour/qinglong:latest 端口号可自己方法： -p 5700:5700 端口号为5700 -p xxxx:5700 端口号为xxxx 注：改的端口号一定要在安全组中放行该端口，不然访问不到 3.登录青龙面板在浏览器中输入 服务器ip:端口号 端口号为上一步你自己设置的端口号 例如：123.123.123.123:5700 进入青龙面板的登陆页面，开始安装 4.拉取定时任务脚本仓库这里推荐两个仓库： faker2仓库： 1ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql&quot; smiek2221仓库： 1ql repo https://ghproxy.com/github.com/smiek2221/scripts.git &quot;jd_|gua_&quot; &quot;&quot; &quot;ZooFaker_Necklace.js|JDJRValidator_Pure.js|sign_graphics_validate.js&quot; 青龙面板相关依赖及部分脚本依赖不能偷懒，稍微等一等有点慢 1234567891011docker exec -it QL bash -c &quot;npm install -g typescript&quot;docker exec -it QL bash -c &quot;npm install axios date-fns&quot;docker exec -it QL bash -c &quot;npm install crypto -g&quot;docker exec -it QL bash -c &quot;npm install jsdom&quot;docker exec -it QL bash -c &quot;npm install png-js&quot;docker exec -it QL bash -c &quot;npm install -g npm&quot;docker exec -it QL bash -c &quot;pnpm i png-js&quot;docker exec -it QL bash -c &quot;pip3 install requests&quot;docker exec -it QL bash -c &quot;apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source&quot;docker exec -it QL bash -c &quot;apk add python3 zlib-dev gcc jpeg-dev python3-dev musl-dev freetype-dev&quot;docker exec -it QL bash -c &quot;cd /ql/scripts/ &amp;&amp; apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; npm i &amp;&amp; npm i -S ts-node typescript @types/node date-fns axios png-js canvas --build-from-source&quot; 5.应用设置配置为下一步的xdd-plus对接青龙做出准备 6.搭建xdd-plus所需环境 6.1安装gcc 12yum -y install gccyum -y install gcc-c++ 6.2下载go安装包 ，这里我们安装到usr/local目录 1cd /usr/local &amp;&amp; wget https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz -O go1.16.7.linux-amd64.tar.gz 6.3解压go安装包 tar -xvzf go1.16.7.linux-amd64.tar.gz 6.4手动设置环境变量路径/etc/profile 12345export GO111MODULE=onexport GOPROXY=https://goproxy.cnexport GOROOT=/usr/local/goexport GOPATH=/usr/local/go/pathexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin 复制上方代码添加到profile文件末尾 6.5执行source 1source /etc/profile 6.6检测一下看看有没有安装成功 1go env 6.7安装git 12345wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -ivh epel-release-latest-7.noarch.rpm yum install -y git 7.安装xdd-plus 7.1拉取xdd-plus的库 1cd ~ &amp;&amp; git clone https://ghproxy.com/https://github.com/764763903a/xdd-plus.git 7.2编译xdd 12cd xdd-plusgo build 7.3给与xdd最高权限 1chmod 777 xdd 7.4运行xdd（要确保你在xdd-plus目录下） 1./xdd 等程序跑个半分钟Ctrl+c退出 7.5WinSCP中手动修改root/xdd-plus/conf/config.yaml文件 1234567891011121314151617181920212223242526272829303132333435363738mode: parallel #模式 balance(均衡模式)、parallel(平行模式)containers: - address: http://123.123.123.123:5700 #这里是你青龙面板的地址 username: 青龙面板的账号 #登陆青龙面板的账号 password: 青龙面板的密码 #登录青龙面板的密码 cid: Client ID #刚刚在青龙面板获取到的Client ID secret: Client Secret #刚刚在青龙面板获取到的Client Secret weigth: 1 #权重 balance模式下权重越高分得的ck越多，默认1 mode: parallel #模式 balance(均衡模式)、parallel(平行模式) limit: 9999 #限制容器ck数目AtTime: 8 #填写1-12之间的数 填错自负默认为10 10点容易出现高峰超时。IsHelp: true #填写true或者false falseIsOldV4: #填写true或者false false是否新版或者旧版V4Wskey: true # 填空默认禁用wskey转换 需要的填trueIsAddFriend: #填写true或者false falseLim: #填写1-N 代表限制次数Tyt: #填写1-N 代表推一推需要的互助值，默认为8Later: #延时防止黑IP自己设置 默认60 不怕黑的改为1即可 单位是秒ApiToken: #nvjdc短信接入token参数，自己设置theme: /root/xdd-plus/theme/admin.html #自定义主题，支持本地、网络路径 static: ./static #静态文件 便于自定义二维码页面时，引入css、js等文件master: #xdd-plus后台密码，并从井号开始把这一段文字全部删除database: /root/xdd-plus/.xdd.db qywx_key: #企业微信推送keydaily_push: #定时任务resident: #均衡模式下所有容器共同的账号pin，有多个用'&amp;'拼接。不建议填写。user_agent:telegram_bot_token:telegram_user_id:TGURL: #填写TG代理地址参考https://www.kejiwanjia.com/server/5221.html#3workerqquid: 管理员QQ #接收通知的qq号，管理员QQ号码qqgid: QQ群号 #监听的群qbot_public_mode: true #qq机器人群聊模式，默认私聊模式default_priority: #新用户默认优先级no_ghproxy: true #更新资源是否不使用代理daily_asset_push_cron: 0 21 * * * #日常资产推送时间 可以不填repos: - git: https://github.com/shufflewzc/faker2.git 修改完之后Ctrl+s保存文件退出，回到命令行在次运行上一步7.4 出现二维码，扫码绑定你的机器人qq，等一会后向你的机器人发消息测试。 7.6然后Ctrl+c，为防止机器人被杀死我们后台挂机 1./xdd -d 我们的xdd-plus配置到此结束 8.nvjdc短信验证登录对接xdd-plus 8.1先cd回根目录 1cd 8.2首先安装unzip 1yum install wget unzip -y 8.3然后创建一个目录放配置以及chromium 1mkdir nolanjdc &amp;&amp; cd nolanjdc 8.4拉取nvjdc对接xdd-plus专用的配置文件 1wget https://cdn.jsdelivr.net/gh/yanyuwangluo/tuku@main/Config.json 8.5创建chromium文件夹并进入 1mkdir -p .local-chromium/Linux-884014 &amp;&amp; cd .local-chromium/Linux-884014 8.6下载chromium并删除chromium压缩包 1wget https://mirrors.huaweicloud.com/chromium-browser-snapshots/Linux_x64/884014/chrome-linux.zip &amp;&amp; unzip chrome-linux.zip &amp;&amp; rm -f chrome-linux.zip 8.7回到刚刚创建的目录 1cd ~/nolanjdc 8.8拉取nvjdc项目镜像 1docker pull nolanhzy/nvjdc:1.0 8.9启动项目容器（5703就是你nvjdc的端口号） 1docker run --name nolanjdc -p 5703:80 -d -v &quot;$(pwd)&quot;/Config.json:/app/Config/Config.json:ro \\-v &quot;$(pwd)&quot;/.local-chromium:/app/.local-chromium \\-it --privileged=true nolanhzy/nvjdc:1.0 8.10查看日志 1docker logs -f nolanjdc 出现表示NETJDC started成功，然后Ctrl+c退出日志即可 8.11修改nvjdc对接xdd-plus的配置文件 配置文件路径/root/nolanjdc/Config.json 编辑好后保存重启容器（修改配置文件后需要重启） 1docker restart nolanjdc 到这一步已经可以全部正常使用了 后面做一些补充 （可忽略）公告处可以公告处可通过html+css编写后转义替换添加更多功能，可进交流群。 删除容器和镜像（后面的0.8是版本号跟随自己需求更改） 1docker rm -f nolanjdc &amp;&amp; docker rmi -f nolanhzy/nvjdc:1.0 更新：更新前删除容器和镜像，然后继续执行8.7到8.10就好 卸载nvjdc 1docker rm -f nolanjdc &amp;&amp; docker rmi -f nolanhzy/nvjdc:1.0 &amp;&amp; rm -rf /root/nolanjdc","link":"/2021/11/15/qinglong/"},{"title":"Docker部署为知笔记（国内gitbook）","text":"软件特色 一键收集微信、网页、微博 保存碎片信息 批量导入文档 文字、清单、手写 图片、拍照、语音、附件 一次记录永久保存 轻量级图文编辑工具 内置Markdown功能 写出漂亮的文档 资料永久保存在云端 修改后的笔记会保存历史版本 无需担心资料丢失 群组、多级文件夹、标签 让资料井井有条 关键词全文搜索 快捷方式定位文件夹和笔记 快速找到所需资料 前言官网:WizNote 官方安装教程:WizNote 安装安装Docker curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh启动为知笔记服务端执行 cd ~mkdir wizdata然后执行 docker run –name wiz –restart=always -it -d -v ~/wizdata:/wiz/storage -v /etc/localtime:/etc/localtime -p 80:80 -p 9269:9269/udp wiznote/wizserver将其中的-p 80:80的一个80改为你想要的端口,例如-p 8080:80 或者改为-p 10003:80,这样下面的配置文件就不用改了 当然,如果你不想配置HTTPS而且本地没有其他HTTP服务器你可以直接梭哈 配置HTTPS由于现在一直在用Apache,就只po出一个Apache的配置文件了 &lt;VirtualHost *:80&gt; ServerAdmin admin@moec.top DocumentRoot “/www/wwwroot/域名” ServerName 域名 #errorDocument 404 /404.html ErrorLog “/www/wwwlogs/wiz.5777.tk-error_log” CustomLog “/www/wwwlogs/wiz.5777.tk-access_log” combined ProxyPass http://localhost:10003/ ProxyPassReverse http://localhost:10003/ #DENY FILES &lt;Files ~ (\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md)$&gt; Order allow,deny Deny from all &lt;/Files&gt; ServerAdmin admin@moec.top DocumentRoot \"/www/wwwroot/域名/\" ServerName 域名 #errorDocument 404 /404.html ErrorLog \"/www/wwwlogs/域名-error_log\" CustomLog \"/www/wwwlogs/域名-access_log\" combined &lt;Location /&gt; ProxyPass http://localhost:10003/ ProxyPassReverse http://localhost:10003/ &lt;/Location&gt; #SSL SSLEngine On SSLCertificateFile /www/server/panel/vhost/cert/---/fullchain.pem SSLCertificateKeyFile /www/server/panel/vhost/cert/---/privkey.pem SSLCipherSuite EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5 SSLProtocol All -SSLv2 -SSLv3 -TLSv1 SSLHonorCipherOrder On #DENY FILES &lt;Files ~ (\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md)$&gt; Order allow,deny Deny from all &lt;/Files&gt; 按照你的配置配置后,重载你的Apache即可 安装完成访问你配置的域名即可 默认账号:密码 admin@wiz.cn:123456 然后点击头像,访问管理后台 访问用户管理即可更改管理员 桌面客户端桌面客户端 WizNote Lite (支持Markdown实时渲染) 客户端截图: 体验: 有一些BUG,不过能用.webp如外链图片无法加载 更新docker stop wizdocker rm wizdocker pull wiznote/wizserver:latest备份备份非常的简单,只需要备份~/wizdata这个文件夹即可 *@master-node:~/wizdata# lltotal 36drwxr-xr-x 2 root root 4096 Jun 6 08:30 configdrwxr-xr-x 3 root root 4096 Jun 6 08:28 data_rootdrwxrwxrwx 12 mysql mysql 4096 Jun 6 08:18 dbdrwxrwxrwx 2 root root 4096 Jun 6 08:23 indexdrwxrwxrwx 3 root root 4096 Jun 6 08:18 logsdrwxr-xr-x 3 root root 4096 Jun 6 08:29 override_filesdrwxr-xr-x 2 root root 4096 Jun 6 08:46 wiz-abstractdrwxr-xr-x 2 root root 4096 Jun 6 08:23 wiz-gather-devdrwxr-xr-x 3 root root 4096 Jun 6 08:46 wizserver-temp里面包含了所有的数据","link":"/2021/04/12/wiznote/"},{"title":"卸载腾讯云、阿里云后台监控服务","text":"前言相信腾讯云，阿里云大家都很熟悉了，那么腾讯云、阿里云后台监控是怎么回事呢？对云腾讯云、阿里云等大厂而言自带的系统一般都带有后台监控等，虽然我们这些遵纪守法的好公民来讲其实也没啥的，但是总归是不太舒服的。所以本文将介绍如何卸载其监控等。（ps:上了腾讯云轻量香港的车，来水一水。） 懒人专用一键脚本 wget https://yun.tyiblog.top/linux/all/jk_uninstall.sh chmod +x jk_uninstall.sh #卸载阿里云 ./jk_uninstall.sh ai #卸载腾讯云 ./jk_uninstall.sh tx Shell复制 **腾讯云监控卸载**SSH运行以下代码：/usr/local/qcloud/stargate/admin/uninstall.sh /usr/local/qcloud/YunJing/uninst.sh /usr/local/qcloud/monitor/barad/admin/uninstall.sh以下代码不建议运行：rm -rf /usr/local/qcloud/ rm -rf /usr/local/sa/ rm -rf /usr/local/agenttoolsSSH运行以下代码无输出则卸载成功。（最好重启后运行查看）ps -A | grep agent阿里云监控卸载卸载脚本：wget http://update.aegis.aliyun.com/download/uninstall.sh chmod +x uninstall.sh ./uninstall.sh wget http://update.aegis.aliyun.com/download/quartz_uninstall.sh chmod +x quartz_uninstall.sh ./quartz_uninstall.sh卸载残留：pkill aliyun-service rm -rf /etc/init.d/agentwatch /usr/sbin/aliyun-service rm -rf /usr/local/aegis*屏蔽云盾:iptables -I INPUT -s 140.205.201.0/28 -j DROP iptables -I INPUT -s 140.205.201.16/29 -j DROP iptables -I INPUT -s 140.205.201.32/28 -j DROP iptables -I INPUT -s 140.205.225.192/29 -j DROP iptables -I INPUT -s 140.205.225.200/30 -j DROP iptables -I INPUT -s 140.205.225.184/29 -j DROP iptables -I INPUT -s 140.205.225.183/32 -j DROP iptables -I INPUT -s 140.205.225.206/32 -j DROP iptables -I INPUT -s 140.205.225.205/32 -j DROP iptables -I INPUT -s 140.205.225.195/32 -j DROP iptables -I INPUT -s 140.205.225.204/32 -j DROP如果需要重新启用云盾，只要在iptables中释放屏蔽的IP段即可，安骑士的启用使用以下代码：wget http://update.aegis.aliyun.com/download/install.sh chmod +x install.sh sh install.sh","link":"/2018/07/22/%E5%8D%B8%E8%BD%BD%E8%85%BE%E8%AE%AF%E4%BA%91%E3%80%81%E9%98%BF%E9%87%8C%E4%BA%91%E5%90%8E%E5%8F%B0%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1/"},{"title":"B2+CF+ShareX,实现无成本图床和便捷上传","text":"准备 1.一个cloudflare账号 https://dash.cloudflare.com/ 2.一个B2账号 https://www.backblaze.com/b2/cloud-storage.html 3.windows软件ShareX 步骤 1.注册B2账号,点击进入B2 Cloud Storage,点击Buckets创建一个BUcket,设为public,并上传一个图片,记录下下图要用的域名 2.点击App keys,添加一个新的key,bucket就选你刚创建的那个,记录下你的密钥,之后要在ShareX中用 3.打开cf,cname一下上图要记的域名,小云朵点亮 4.加一条页面缓存规则. 5.创建一个workers,粘贴下列代码,记得b2domain和bucket的值改成自己的 'use strict'; const b2Domain = 'img.domain.com'; // configure this as per instructions above const b2Bucket = 'bucket-name'; // configure this as per instructions above const b2UrlPath = `/file/${b2Bucket}/`; addEventListener('fetch', event =&gt; { return event.respondWith(fileReq(event)); }); // define the file extensions we wish to add basic access control headers to const corsFileTypes = ['png', 'jpg', 'gif', 'jpeg', 'webp']; // backblaze returns some additional headers that are useful for debugging, but unnecessary in production. We can remove these to save some size const removeHeaders = [ 'x-bz-content-sha1', 'x-bz-file-id', 'x-bz-file-name', 'x-bz-info-src_last_modified_millis', 'X-Bz-Upload-Timestamp', 'Expires' ]; const expiration = 31536000; // override browser cache for images - 1 year // define a function we can re-use to fix headers const fixHeaders = function(url, status, headers){ let newHdrs = new Headers(headers); // add basic cors headers for images if(corsFileTypes.includes(url.pathname.split('.').pop())){ newHdrs.set('Access-Control-Allow-Origin', '*'); } // override browser cache for files when 200 if(status === 200){ newHdrs.set('Cache-Control', \"public, max-age=\" + expiration); }else{ // only cache other things for 5 minutes newHdrs.set('Cache-Control', 'public, max-age=300'); } // set ETag for efficient caching where possible const ETag = newHdrs.get('x-bz-content-sha1') || newHdrs.get('x-bz-info-src_last_modified_millis') || newHdrs.get('x-bz-file-id'); if(ETag){ newHdrs.set('ETag', ETag); } // remove unnecessary headers removeHeaders.forEach(header =&gt; { newHdrs.delete(header); }); return newHdrs; }; async function fileReq(event){ const cache = caches.default; // Cloudflare edge caching const url = new URL(event.request.url); if(url.host === b2Domain &amp;&amp; !url.pathname.startsWith(b2UrlPath)){ url.pathname = b2UrlPath + url.pathname; } let response = await cache.match(url); // try to find match for this request in the edge cache if(response){ // use cache found on Cloudflare edge. Set X-Worker-Cache header for helpful debug let newHdrs = fixHeaders(url, response.status, response.headers); newHdrs.set('X-Worker-Cache', \"true\"); return new Response(response.body, { status: response.status, statusText: response.statusText, headers: newHdrs }); } // no cache, fetch image, apply Cloudflare lossless compression response = await fetch(url, {cf: {polish: \"lossless\"}}); let newHdrs = fixHeaders(url, response.status, response.headers); if(response.status === 200){ response = new Response(response.body, { status: response.status, statusText: response.statusText, headers: newHdrs }); }else{ response = new Response('File not found!', { status: 404 }) } event.waitUntil(cache.put(url, response.clone())); return response; } 6.workers里添加路由,使访问你的域名时,先走workers 访问一下你的图片文件 比如说一开始是https://f000.backblazeb2.com/file/backblaze1489498/wallhaven-md2x8m.jpg 现在用https://dlcu.cf/wallhaven-md2x8m.jpg就可以访问了 7.配置ShareX. 这个感觉没啥好说的,主页面–目标–上传目标设置–backblaze b2,填上就行了 结束 这个的好处就是方便了上传,自己在电脑前,截一下图直接上传,或者复制一下直接上传 还有就是可以用自己的域名,再说的话就是数据自己也能找回.","link":"/2021/02/02/shareX/"}],"tags":[{"name":"cloudflare","slug":"cloudflare","link":"/tags/cloudflare/"},{"name":"Minecraft","slug":"Minecraft","link":"/tags/Minecraft/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"telegram","slug":"telegram","link":"/tags/telegram/"},{"name":"docker","slug":"docker","link":"/tags/docker/"}],"categories":[]}