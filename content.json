{"pages":[],"posts":[{"title":"CloudFlare Workers 反代任意网站和挂载单页代码","text":"介绍 CloudFlare Workers是一个支持jsproxy的无服务器函数服务，提供全球CDN支持，免费用户有每天10万请求额度； CloudFlare官网：https://dash.cloudflare.com 记录下一些简单的使用方法，以后再陆续更新； Workers 单页挂载代码 addEventListener('fetch', event =&gt; { event.respondWith(handleRequest(event.request)) }) // HTML代码let html = &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;div&amp;gt;Hello world!&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;; /** Respond to the request @param {Request} request /async function handleRequest(request) {return new Response(html, { headers: {'Content-Type': 'text/html; charset=UTF-8' }, status: 200})}Workers 反代任意网站// Website you intended to retrieve for users. const upstream = 'sunpma.com' // Custom pathname for the upstream website.const upstream_path = ‘/‘ // Website you intended to retrieve for users using mobile devices.const upstream_mobile = ‘sunpma.com’ // Countries and regions where you wish to suspend your service.const blocked_region = [‘KP’, ‘SY’, ‘PK’, ‘CU’] // IP addresses which you wish to block from using your service.const blocked_ip_address = [‘0.0.0.0’, ‘127.0.0.1’] // Whether to use HTTPS protocol for upstream address.const https = true // Whether to disable cache.const disable_cache = false // Replace texts.const replace_dict = { ‘$upstream’: ‘$custom_domain’, ‘//sunpma.com’: ‘’} addEventListener(‘fetch’, event =&gt; { event.respondWith(fetchAndApply(event.request));}) async function fetchAndApply(request) { const region = request.headers.get(‘cf-ipcountry’).toUpperCase(); const ip_address = request.headers.get(‘cf-connecting-ip’); const user_agent = request.headers.get(‘user-agent’); let response = null; let url = new URL(request.url); let url_hostname = url.hostname; if (https == true) { url.protocol = 'https:'; } else { url.protocol = 'http:'; } if (await device_status(user_agent)) { var upstream_domain = upstream; } else { var upstream_domain = upstream_mobile; } url.host = upstream_domain; if (url.pathname == '/') { url.pathname = upstream_path; } else { url.pathname = upstream_path + url.pathname; } if (blocked_region.includes(region)) { response = new Response('Access denied: WorkersProxy is not available in your region yet.', { status: 403 }); } else if (blocked_ip_address.includes(ip_address)) { response = new Response('Access denied: Your IP address is blocked by WorkersProxy.', { status: 403 }); } else { let method = request.method; let request_headers = request.headers; let new_request_headers = new Headers(request_headers); new_request_headers.set('Host', upstream_domain); new_request_headers.set('Referer', url.protocol + '//' + url_hostname); let original_response = await fetch(url.href, { method: method, headers: new_request_headers }) connection_upgrade = new_request_headers.get(&quot;Upgrade&quot;); if (connection_upgrade &amp;amp;&amp;amp; connection_upgrade.toLowerCase() == &quot;websocket&quot;) { return original_response; } let original_response_clone = original_response.clone(); let original_text = null; let response_headers = original_response.headers; let new_response_headers = new Headers(response_headers); let status = original_response.status; if (disable_cache) { new_response_headers.set('Cache-Control', 'no-store'); } new_response_headers.set('access-control-allow-origin', '*'); new_response_headers.set('access-control-allow-credentials', true); new_response_headers.delete('content-security-policy'); new_response_headers.delete('content-security-policy-report-only'); new_response_headers.delete('clear-site-data'); if (new_response_headers.get(&quot;x-pjax-url&quot;)) { new_response_headers.set(&quot;x-pjax-url&quot;, response_headers.get(&quot;x-pjax-url&quot;).replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname)); } const content_type = new_response_headers.get('content-type'); if (content_type != null &amp;amp;&amp;amp; content_type.includes('text/html') &amp;amp;&amp;amp; content_type.includes('UTF-8')) { original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname); } else { original_text = original_response_clone.body } response = new Response(original_text, { status, headers: new_response_headers }) } return response; } async function replace_response_text(response, upstream_domain, host_name) { let text = await response.text() var i, j; for (i in replace_dict) { j = replace_dict[i] if (i == '$upstream') { i = upstream_domain } else if (i == '$custom_domain') { i = host_name } if (j == '$upstream') { j = upstream_domain } else if (j == '$custom_domain') { j = host_name } let re = new RegExp(i, 'g') text = text.replace(re, j); } return text; } async function device_status(user_agent_info) { var agents = [“Android”, “iPhone”, “SymbianOS”, “Windows Phone”, “iPad”, “iPod”]; var flag = true; for (var v = 0; v &lt; agents.length; v++) { if (user_agent_info.indexOf(agents[v]) &gt; 0) { flag = false; break; } } return flag;}替换掉其中的sunpma.com为你需要反代的网址即可；","link":"/2021/10/31/CloudFlare-Workers-%E5%8F%8D%E4%BB%A3%E4%BB%BB%E6%84%8F%E7%BD%91%E7%AB%99%E5%92%8C%E6%8C%82%E8%BD%BD%E5%8D%95%E9%A1%B5%E4%BB%A3%E7%A0%81/"},{"title":"V2RAY一键部署脚本","text":"此安装脚本除了可以安装V2以外，亦可以安装SS，MTP，Socks5，简单好用； 一键安装命令： Debian/Ubuntu apt-get update apt-get install curl -y bash &lt;(curl -s -L https://git.io/v2ray.sh) Centos yum update yum install curl -y bash &lt;(curl -s -L https://git.io/v2ray.sh) 根据提示选择需要的选项安装即可； 管理面板命令： v2ray 安装过程 1. 安装 卸载 请选择 [1-2]:1 请选择 V2Ray 传输协议 [1-32] TCP TCP_HTTP WebSocket WebSocket + TLS HTTP/2 mKCP mKCP_utp mKCP_srtp mKCP_wechat-video mKCP_dtls mKCP_wireguard QUIC QUIC_utp QUIC_srtp QUIC_wechat-video QUIC_dtls QUIC_wireguard TCP_dynamicPort TCP_HTTP_dynamicPort WebSocket_dynamicPort mKCP_dynamicPort mKCP_utp_dynamicPort mKCP_srtp_dynamicPort mKCP_wechat-video_dynamicPort ….准备安装了咯..看看有毛有配置正确了… ———- 安装信息 ————- V2Ray 传输协议 = TCP V2Ray 端口 = 64057 是否配置 Shadowsocks = 未配置 ———- END ————- 按 Enter 回车键 继续….或按 Ctrl + C 取消.安装结果 ---------- V2Ray 配置信息 ------------- 地址 (Address) = xx.xx.xx.xx 端口 (Port) = 64057 用户ID (User ID / UUID) = 35b4eee6-d90b-4e9f-bab9-c1266f2ad8c0 额外ID (Alter Id) = 233 传输协议 (Network) = tcp 伪装类型 (header type) = none ---------- END ------------- 提示: 输入 v2ray url 可生成 vmess URL 链接 / 输入 v2ray qr 可生成二维码链接 管理脚本 ## V2Ray 版本: v4.21.3 / V2Ray 状态: 正在运行 ## 1. 查看 V2Ray 配置 2. 修改 V2Ray 配置 3. 下载 V2Ray 配置 / 生成配置信息链接 / 生成二维码链接 4. 查看 Shadowsocks 配置 / 生成二维码链接 5. 修改 Shadowsocks 配置 6. 查看 MTProto 配置 / 修改 MTProto 配置 7. 查看 Socks5 配置 / 修改 Socks5 配置 8. 启动 / 停止 / 重启 / 查看日志 9. 更新 V2Ray / 更新 V2Ray 管理脚本 10. 卸载 V2Ray 11. 其他 温馨提示...如果你不想执行选项...按 Ctrl + C 即可退出 请选择菜单 [1-11]:","link":"/2021/10/31/V2RAY%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"}],"tags":[],"categories":[]}