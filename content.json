{"pages":[],"posts":[{"title":"卸载腾讯云、阿里云后台监控服务","text":"前言相信腾讯云，阿里云大家都很熟悉了，那么腾讯云、阿里云后台监控是怎么回事呢？对云腾讯云、阿里云等大厂而言自带的系统一般都带有后台监控等，虽然我们这些遵纪守法的好公民来讲其实也没啥的，但是总归是不太舒服的。所以本文将介绍如何卸载其监控等。（ps:上了腾讯云轻量香港的车，来水一水。） 懒人专用一键脚本 wget https://yun.tyiblog.top/linux/all/jk_uninstall.sh chmod +x jk_uninstall.sh #卸载阿里云 ./jk_uninstall.sh ai #卸载腾讯云 ./jk_uninstall.sh tx Shell复制 **腾讯云监控卸载**SSH运行以下代码：/usr/local/qcloud/stargate/admin/uninstall.sh /usr/local/qcloud/YunJing/uninst.sh /usr/local/qcloud/monitor/barad/admin/uninstall.sh以下代码不建议运行：rm -rf /usr/local/qcloud/ rm -rf /usr/local/sa/ rm -rf /usr/local/agenttoolsSSH运行以下代码无输出则卸载成功。（最好重启后运行查看）ps -A | grep agent阿里云监控卸载卸载脚本：wget http://update.aegis.aliyun.com/download/uninstall.sh chmod +x uninstall.sh ./uninstall.sh wget http://update.aegis.aliyun.com/download/quartz_uninstall.sh chmod +x quartz_uninstall.sh ./quartz_uninstall.sh卸载残留：pkill aliyun-service rm -rf /etc/init.d/agentwatch /usr/sbin/aliyun-service rm -rf /usr/local/aegis*屏蔽云盾:iptables -I INPUT -s 140.205.201.0/28 -j DROP iptables -I INPUT -s 140.205.201.16/29 -j DROP iptables -I INPUT -s 140.205.201.32/28 -j DROP iptables -I INPUT -s 140.205.225.192/29 -j DROP iptables -I INPUT -s 140.205.225.200/30 -j DROP iptables -I INPUT -s 140.205.225.184/29 -j DROP iptables -I INPUT -s 140.205.225.183/32 -j DROP iptables -I INPUT -s 140.205.225.206/32 -j DROP iptables -I INPUT -s 140.205.225.205/32 -j DROP iptables -I INPUT -s 140.205.225.195/32 -j DROP iptables -I INPUT -s 140.205.225.204/32 -j DROP如果需要重新启用云盾，只要在iptables中释放屏蔽的IP段即可，安骑士的启用使用以下代码：wget http://update.aegis.aliyun.com/download/install.sh chmod +x install.sh sh install.sh","link":"/2018/07/22/%E5%8D%B8%E8%BD%BD%E8%85%BE%E8%AE%AF%E4%BA%91%E3%80%81%E9%98%BF%E9%87%8C%E4%BA%91%E5%90%8E%E5%8F%B0%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1/"},{"title":"CloudFlare Workers 反代任意网站和挂载单页代码","text":"介绍 CloudFlare Workers是一个支持jsproxy的无服务器函数服务，提供全球CDN支持，免费用户有每天10万请求额度； CloudFlare官网：https://dash.cloudflare.com 记录下一些简单的使用方法，以后再陆续更新； Workers 单页挂载代码 addEventListener('fetch', event =&gt; { event.respondWith(handleRequest(event.request)) }) // HTML代码let html = &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;div&amp;gt;Hello world!&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;; /** Respond to the request @param {Request} request /async function handleRequest(request) {return new Response(html, { headers: {'Content-Type': 'text/html; charset=UTF-8' }, status: 200})}Workers 反代任意网站// Website you intended to retrieve for users. const upstream = 'sunpma.com' // Custom pathname for the upstream website.const upstream_path = ‘/‘ // Website you intended to retrieve for users using mobile devices.const upstream_mobile = ‘sunpma.com’ // Countries and regions where you wish to suspend your service.const blocked_region = [‘KP’, ‘SY’, ‘PK’, ‘CU’] // IP addresses which you wish to block from using your service.const blocked_ip_address = [‘0.0.0.0’, ‘127.0.0.1’] // Whether to use HTTPS protocol for upstream address.const https = true // Whether to disable cache.const disable_cache = false // Replace texts.const replace_dict = { ‘$upstream’: ‘$custom_domain’, ‘//sunpma.com’: ‘’} addEventListener(‘fetch’, event =&gt; { event.respondWith(fetchAndApply(event.request));}) async function fetchAndApply(request) { const region = request.headers.get(‘cf-ipcountry’).toUpperCase(); const ip_address = request.headers.get(‘cf-connecting-ip’); const user_agent = request.headers.get(‘user-agent’); let response = null; let url = new URL(request.url); let url_hostname = url.hostname; if (https == true) { url.protocol = 'https:'; } else { url.protocol = 'http:'; } if (await device_status(user_agent)) { var upstream_domain = upstream; } else { var upstream_domain = upstream_mobile; } url.host = upstream_domain; if (url.pathname == '/') { url.pathname = upstream_path; } else { url.pathname = upstream_path + url.pathname; } if (blocked_region.includes(region)) { response = new Response('Access denied: WorkersProxy is not available in your region yet.', { status: 403 }); } else if (blocked_ip_address.includes(ip_address)) { response = new Response('Access denied: Your IP address is blocked by WorkersProxy.', { status: 403 }); } else { let method = request.method; let request_headers = request.headers; let new_request_headers = new Headers(request_headers); new_request_headers.set('Host', upstream_domain); new_request_headers.set('Referer', url.protocol + '//' + url_hostname); let original_response = await fetch(url.href, { method: method, headers: new_request_headers }) connection_upgrade = new_request_headers.get(&quot;Upgrade&quot;); if (connection_upgrade &amp;amp;&amp;amp; connection_upgrade.toLowerCase() == &quot;websocket&quot;) { return original_response; } let original_response_clone = original_response.clone(); let original_text = null; let response_headers = original_response.headers; let new_response_headers = new Headers(response_headers); let status = original_response.status; if (disable_cache) { new_response_headers.set('Cache-Control', 'no-store'); } new_response_headers.set('access-control-allow-origin', '*'); new_response_headers.set('access-control-allow-credentials', true); new_response_headers.delete('content-security-policy'); new_response_headers.delete('content-security-policy-report-only'); new_response_headers.delete('clear-site-data'); if (new_response_headers.get(&quot;x-pjax-url&quot;)) { new_response_headers.set(&quot;x-pjax-url&quot;, response_headers.get(&quot;x-pjax-url&quot;).replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname)); } const content_type = new_response_headers.get('content-type'); if (content_type != null &amp;amp;&amp;amp; content_type.includes('text/html') &amp;amp;&amp;amp; content_type.includes('UTF-8')) { original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname); } else { original_text = original_response_clone.body } response = new Response(original_text, { status, headers: new_response_headers }) } return response; } async function replace_response_text(response, upstream_domain, host_name) { let text = await response.text() var i, j; for (i in replace_dict) { j = replace_dict[i] if (i == '$upstream') { i = upstream_domain } else if (i == '$custom_domain') { i = host_name } if (j == '$upstream') { j = upstream_domain } else if (j == '$custom_domain') { j = host_name } let re = new RegExp(i, 'g') text = text.replace(re, j); } return text; } async function device_status(user_agent_info) { var agents = [“Android”, “iPhone”, “SymbianOS”, “Windows Phone”, “iPad”, “iPod”]; var flag = true; for (var v = 0; v &lt; agents.length; v++) { if (user_agent_info.indexOf(agents[v]) &gt; 0) { flag = false; break; } } return flag;}替换掉其中的sunpma.com为你需要反代的网址即可；","link":"/2021/10/31/CloudFlare-Workers/"},{"title":"使用 Cloudflare Pages 托管静态网站","text":"Cloudflare Pages 是一个静态网站托管服务，功能和 Github Pages 差不多，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。Cloudflare 是全球最大的几个 CDN 服务商之一，速度应该会比 Github Pages 好一些，而且 Cloudflare Pages 一个账户可以创建多个网站。 最近我准备把 MWordStar 的帮助文档迁移到 Cloudflare Pages ，这样我的服务器就可以少管理一个网站，服务器出问题也不会影响主题帮助文档的访问。这里就简单写一下 Cloudflare Pages 的使用。 关联 Github 存储库直接访问 https://pages.cloudflare.com/ ，没有账号的可以按照提示注册，有账号的可以直接登录。 Cloudflare Pages 的官网首页没有中文，但部署和设置页面是有中文的。登录后点击 创建项目 ，如下：点击 连接 Github 账户 ：这里会弹出 Github 的授权页面，选择 Install &amp; Authorize 允许 Cloudflare 访问 Github 账户，如下：然后会显示 Github 存储库，也包括非公开的存储库，选择要部署的存储库，点击 开始设置 ：设置构建命令和存放构建的页面的目录：Cloudflare 克隆存储库后会自动执行 npm install 之类的命令下载所需的依赖，然后执行构建命令，然后把构建完成的文件放到网站目录。 点击 保存并部署 后 Cloudflare Pages 就会开始构建和部署，如下：同时下方也会输出日志：部署完成后点击 继续处理项目 就可以看到部署的网站了，如下：默认的域名是 项目名称.pages.dev 。 设置域名点击 自定义域 ：输入要绑定的域名：如果你用的是 Cloudflare 的 DNS 的话，Cloudflare可以一键设置 CNAME。如果不是的话就需要手动设置 CNAME，登录域名管理后台，添加一条 CNAME 指向默认的 pages.dev 域名。 我使用的是 Cloudflare 的 DNS，可以自动设置 CNAME：设置完成后需要一段时间才会生效。 以上就是 Cloudflare Pages 的设置过程。免费的 Cloudflare Pages 账户每月最多只能构建 500 次，对于个人博客或小网站来说已经足够。 目前 Cloudflare Pages 只能通过 Github 来部署，不能直接上传 HTML。","link":"/2021/10/31/Cloudflare-Pages/"},{"title":"Linux 搭建 Minecraft 基岩版服务器","text":"Minecraft Bedrock Edition 也就是我的世界基岩版，这是 Minecraft 的另一个版本。Minecraft 基岩版可以运行在 Win10、Android、iOS、XBox。基岩版不能使用 Java 版的服务器，Java 版也不能使用基岩版的服务器，不过 Win10、Android、iOS、XBox 的基岩版都可以使用同一个服务器，也就是说基岩版的服务器可以让 Win10 和手机一起联机。 目前基岩版的服务器还是测试版，因为不是用 Java 编写的，所以目前只能在 Windows 和 Ubuntu 上搭建。 我使用的是阿里云的轻量应用服务器，配置是 1 核 2 G，使用的系统是 Ubuntu 18.04。 下载可以进入 https://www.minecraft.net/en-us/download/server/bedrock/ 下载服务器，目前只有 Windows 和 Ubuntu 两个版本。下载之前需要选中 I agree to the Minecraft End User License Agreement and Privacy Policy。你可以下载到本地电脑，然后通过 SFTP 上传到服务器，也可以右击 DOWNLOAD 复制链接地址，直接通过 wget 下载到服务器。 一般情况下官网默认就是最新版本的服务端，我下载的服务端版本是 1.14.32.1，客户端版本是 14.30，在游戏主界面的右下方可以查看版本。如果客户端版本比服务端版本低的话可以更新到最新版本，Win 10 可以在应用商店更新。 下载的压缩包中还会包含一个 bedrock_server_how_to.html，这就是服务器的帮助文档，建议可以下载一份服务端到本地电脑，方便查看帮助文档。 运行下载的服务端可能是一个 zip 格式的压缩包，先解压： unzip bedrock-server-1.14.32.1.zip 上面的命令是把文件解压到当前目录，其中的 bedrock-server-1.14.32.1.zip 就是压缩包的名称。 如果解压的时候出现： Command ‘unzip’ not found 可以输入： apt install -y zip 安装 zip。 基岩版的服务端还需要依赖 libcurl4-openssl-dev，安装 libcurl4-openssl-dev： apt install -y libcurl4-openssl-dev 安装完成后输入： LD_LIBRARY_PATH=. ./bedrock_server 启动服务器。 启动后会输出状态信息，如下： NO LOG FILE! - setting up server logging... [2020-04-02 20:50:22 INFO] Starting Server [2020-04-02 20:50:22 INFO] Version 1.14.32.1 [2020-04-02 20:50:22 INFO] Session ID 08940d5f-f2da-4da8-9130-c7e59f580559 [2020-04-02 20:50:22 INFO] Level Name: Bedrock level [2020-04-02 20:50:22 INFO] Game mode: 1 Creative [2020-04-02 20:50:22 INFO] Difficulty: 0 PEACEFUL [2020-04-02 20:50:22 INFO] opening worlds/Bedrock level/db [2020-04-02 20:50:25 INFO] IPv4 supported, port: 4999 [2020-04-02 20:50:25 INFO] IPv6 not supported [2020-04-02 20:50:25 INFO] IPv4 supported, port: 19132 [2020-04-02 20:50:25 INFO] IPv6 not supported [2020-04-02 20:50:27 INFO] Server started. 服务器默认的端口是 19132，协议是 UDP ，不是 TCP，开放端口的时候需要注意一下。 客户端连接 打开 Minecraft 基岩版，选择 游戏，选择 服务器，点击 添加，按照提示输入服务器 IP 和端口号。 如下：如果没有修改过配置文件的话，默认的端口号是 19132。 进入服务器之前需要登录 Xbox Live，只有账户中有 Minecraft 才能联机。 配置服务端解压后会包含一个名为 server.properties 的配置文件，服务器相关的配置就在这个配置文件中。 可以用 VI 之类的编辑器打开配置文件编辑，关于 VI 编辑器的使用可以看 Linux VI 编辑器简单使用教程 。 配置文件中的 # 开头的行是注释，可以不用管，主要就是修改 = 后面的内容。 下面是一些配置项说明： gamemode：默认的游戏模式，survival 生存，creative 创造，adventure 冒险。 difficulty：默认难度，peaceful 和平，easy 简单，normal 普通，hard 困难。 max-players：玩家数量限制，默认为 10。 server-port：服务器端口，默认为 19132。 server-portv6：IPv6 端口，默认为 19133。 online-mode：正版验证，如果你的服务器可以正常连接到 Xbox Live 的话，可以设置为 true，否则可以设置为 false，即便不开启正版验证，客户端也需要登录 Xbox Live 才能联机。 white-list：白名单，只有在白名单中的玩家才能进入服务器，默认为 false。 allow-cheats：允许作弊，默认为 false。 player-idle-timeout：自动踢出挂机玩家，默认为 30 分钟。 default-player-permission-level：默认玩家等级，visitor 游客，member 普通玩家，operator 管理员。 更详细的配置说明可以查看帮助文档。 白名单配置服务端解压后会包含一个 whitelist.json 文件，这就是储存白名单的文件，格式如下： [ { \"name\": \"name1\", \"ignoresPlayerLimit\": \"true\" }, { \"name\": \"name2\" } ] 其中的 name 是玩家的 Xbox 用户名，ignoresPlayerLimit 是忽略服务器人数限制，ignoresPlayerLimit 是可省略的。 只有 server.properties 配置文件中的 white-list 为 true，whitelist.json 中的白名单才会生效。 如果在服务器正在运行的时候修改了白名单的话，需要在服务器命令行中输入： whitelist.jsonwhitelist reload 重新加载白名单才会生效。 设置了白名单后就只有 whitelist.json 中的玩家才能进入服务器。 后台运行如果直接使用 LD_LIBRARY_PATH=. ./bedrock_server 启动服务器的话，退出 SSH 终端后，服务端也会停止运行。 这里可以使用 nohub 命令来启动服务端： nohub LD_LIBRARY_PATH=. ./bedrock_server &amp; 以上就是搭建 Minecraft 基岩版服务器的过程，更详细的服务器配置和命令可以查看帮助文档。","link":"/2020/01/06/Linux-Minecraft-BE/"},{"title":"Linux 搭建 Minecraft Java 服务器","text":"我的世界 (Minecraft) 可以单人游戏，也可以在局域网联机，也可以自己搭建服务器，官方也提供了服务端下载。因为 Java 版的 Minecraft 服务端也是用 Java 编写的，所以可以在 Windows、Linux、Mac 上搭建服务器。 虽然网易代理了 Minecraft，但是需要网易官方的客户端才能使用网易的服务器，相比自己搭建来说限制也比较多。自己搭建服务器可以直接使用官方的 Minecraft Java 版来联机，而且可自定义的方面也比较多。 关于服务器我这里使用的是阿里云的轻量应用服务器，配置是 1 核 2G 5M，这个配置对于十个人以下的服务器也基本够用。 关于玩家人数和服务器配置要求可以稍微参考一下 http://canihostaminecraftserver.com/ 的计算结果。 我使用的 Linux 版本是 CentOS 7，CentOS 和 Ubuntu 除了在安装环境和设置端口有点不一样外其它设置都差不多。 安装 JavaCentOS/Fedora 安装 Java： yum install -y java Ubuntu/Debian 安装 Java： apt install -y java 下载服务器可以到 https://mcversions.net/ 下载，服务器版本需要和客户端版本一致。可以直接复制下载地址用 wget 下载，也可以下载到本地电脑再上传到服务器，如果服务器在国内，直接使用服务器下载速度可能会比较慢。 下载的服务端文件可能是一个 server.jar 的 jar 文件，第一次启动后会在存放 server.jar 的目录生成很多个文件，可以在第一次启动前就单独创建一个目录来存放 server.jar 。 下载完成后需要启动一次服务器来生成相关配置文件，可以输入： java -Xms512M -Xmx1024M -jar server.jar -nogui 其中的 -Xms512M 是设置初始分配内存为 512M，-Xmx1024M 是设置最大占用内存为 1024M。 第一次启动时可能会输出如下的内容： [11:20:13] [main/ERROR]: Failed to load properties from file: server.properties [11:20:13] [main/WARN]: Failed to load eula.txt [11:20:13] [main/INFO]: You need to agree to the EULA in order to run the server. Go to eula.txt for more info. 此时在服务端的存放目录会生成一个 eula.txt 的文本文件，打开 eula.txt 把 eula=false 改为 eula=true 然后保存退出。 现在再启动服务器就可以启动成功了，不过在启动服务器之前可以先进行一些必要的配置。 配置说明Minecraft Server 的配置文件是 server.properties ，配置文件会在第一次启动服务器后生成。 下面是一些配置项的简单说明： online-mode：连接到 Minecraft 服务器验证玩家账户信息，如果玩家的 Minecraft 不是正版将无法进入服务器。如果你只允许正版玩家加入可以设置为 true，否则可以设置为 false。 gamemode：设置默认的游戏模式。survival 生存模式，creative 创造模式，adventure 冒险模式。spectator 旁观模式。 difficulty：设置游戏难度。peaceful 和平，easy 简单，normal 普通，hard 困难。 level-type：设置生成地图的类型。default 带有丘陵、河谷、海洋等的标准的世界，flat 超平坦世界，largebiomes 如同预设（default）世界，但所有生物群系都更大，amplified 如同预设世界，但世界生成高度提高。 pvp：玩家之间是否可以互相残杀。true 玩家可以互相残杀，false 玩家之间不会造成伤害。这里的伤害不包括岩浆或陷阱之类的间接伤害。 allow-nether：是否允许进入下界。true 可以进入下界，false 下界传送门不会生效。 enable-command-block：是否启用命令方块。true 启用，false 不启用。 level-seed：生成世界的种子，默认为空白。 player-idle-timeout：踢出长时间挂机的玩家，以分钟为单位，默认为 0 不限制。 spawn-animals：是否可以生成动物。true 可以生成动物，false 不可以生成动物。 spawn-monsters：是否可以生成攻击型生物和怪物。true 可以生成，false 不可以生成。 spawn-npcs：是否可以生成村民。true 可以生成，false 不可以生成。 query.port：监听服务器的端口号，默认为 25565。 server-port：服务器端口，默认为 25565。 这里只包含一部分的配置说明，如需查看更多配置说明可以访问 https://minecraft-zh.gamepedia.com/index.php?title=Server.properties&amp;variant=zh 。 在启动服务器前别忘了打开端口，关于 CentOS 开放端口可以看 CentOS 开放、关闭和查看端口 如果是阿里云的服务器的话，还需要在服务器后台的防火墙开放端口。 客户端连接进入 Minecraft，选择 多人游戏，点击 添加服务器，在服务器地址输入框输入服务器的 IP + 端口号，比如我的服务器 IP 是 39.112.55.66，端口是 25565，格式就是 39.112.55.66:25565，如下：服务器后台运行如果直接使用： java -Xms512M -Xmx1024M -jar server.jar -nogui 启动服务器的话，在断开远程连接后服务器也会停止运行。 如果要在断开远程连接后保持服务器运行可以使用： nohup java -Xms512M -Xmx1024M -jar server.jar -nogui &amp; 启动服务器。 安装 MOD如果你需要安装 MOD 的话，可以不需要手动下载服务端，FORGE 安装的时候会自动下载对应版本的服务端。 进入 http://files.minecraftforge.net/ 下载和你的 Minecraft 版本对应的 FORGE，选择完版本后点击 Installer 下载。 下载完成后是一个 jar 文件，可以上传到 Linux 服务器安装，也可以在自己的电脑上安装，安装完成后把生成的文件上传到服务器。下面就在本地电脑上安装，然后把安装生成的文件上传到服务器。 运行下载的 FORGE 安装程序，选择 Install Server，安装位置可以选择一个比较容易找到的文件夹，如下： 安装的时候需要下载文件，在国内速度可能会比较慢，安装完成后会生成一个 libraries 文件夹、一个 forge.jar、一个 minecraft_server.jar 和一个 JSON 文件，把安装生成的文件和目录全部上传到服务器。 上传完成后运行 forge.jar： java -Xms512M -Xmx1024M -jar forge-1.14.4-28.2.0.jar -nogui FORGE 的版本号可能会不一样。 第一次运行可能会出现如下的提示： [10:58:28] [main/ERROR] [minecraft/PropertyManager]: Failed to load properties from file: server.properties [10:58:28] [main/WARN] [minecraft/ServerEula]: Failed to load eula.txt [10:58:28] [main/INFO] [minecraft/MinecraftServer]: You need to agree to the EULA in order to run the server. Go to eula.txt for more info. 打开 eula.txt 把 eula=false 改为 eula=true 然后保存退出。 第一次运行后会生成一些文件和目录，其中的 server.properties 就是配置文件，mods 目录就是存放 MOD 的目录，下载的 jar 格式的 MOD 可以直接放到 mods 目录。 有的 MOD 除了服务端安装外客户端也需要安装，否则可能无法进入服务器。安装了 FORGE 后，启动服务器就需要通过 forge.jar 启动。 以上就是在 Linux 搭建服务器的过程，这个服务器只能给 Java 版的 Minecraft 使用。","link":"/2020/01/06/Linux-Minecraft-Java/"},{"title":"V2RAY一键部署脚本","text":"此安装脚本除了可以安装V2以外，亦可以安装SS，MTP，Socks5，简单好用； 一键安装命令： Debian/Ubuntu apt-get update apt-get install curl -y bash &lt;(curl -s -L https://git.io/v2ray.sh) Centos yum update yum install curl -y bash &lt;(curl -s -L https://git.io/v2ray.sh) 根据提示选择需要的选项安装即可； 管理面板命令： v2ray 安装过程 1. 安装 卸载 请选择 [1-2]:1 请选择 V2Ray 传输协议 [1-32] TCP TCP_HTTP WebSocket WebSocket + TLS HTTP/2 mKCP mKCP_utp mKCP_srtp mKCP_wechat-video mKCP_dtls mKCP_wireguard QUIC QUIC_utp QUIC_srtp QUIC_wechat-video QUIC_dtls QUIC_wireguard TCP_dynamicPort TCP_HTTP_dynamicPort WebSocket_dynamicPort mKCP_dynamicPort mKCP_utp_dynamicPort mKCP_srtp_dynamicPort mKCP_wechat-video_dynamicPort ….准备安装了咯..看看有毛有配置正确了… ———- 安装信息 ————- V2Ray 传输协议 = TCP V2Ray 端口 = 64057 是否配置 Shadowsocks = 未配置 ———- END ————- 按 Enter 回车键 继续….或按 Ctrl + C 取消.安装结果 ---------- V2Ray 配置信息 ------------- 地址 (Address) = xx.xx.xx.xx 端口 (Port) = 64057 用户ID (User ID / UUID) = 35b4eee6-d90b-4e9f-bab9-c1266f2ad8c0 额外ID (Alter Id) = 233 传输协议 (Network) = tcp 伪装类型 (header type) = none ---------- END ------------- 提示: 输入 v2ray url 可生成 vmess URL 链接 / 输入 v2ray qr 可生成二维码链接 管理脚本 ## V2Ray 版本: v4.21.3 / V2Ray 状态: 正在运行 ## 1. 查看 V2Ray 配置 2. 修改 V2Ray 配置 3. 下载 V2Ray 配置 / 生成配置信息链接 / 生成二维码链接 4. 查看 Shadowsocks 配置 / 生成二维码链接 5. 修改 Shadowsocks 配置 6. 查看 MTProto 配置 / 修改 MTProto 配置 7. 查看 Socks5 配置 / 修改 Socks5 配置 8. 启动 / 停止 / 重启 / 查看日志 9. 更新 V2Ray / 更新 V2Ray 管理脚本 10. 卸载 V2Ray 11. 其他 温馨提示...如果你不想执行选项...按 Ctrl + C 即可退出 请选择菜单 [1-11]:","link":"/2021/10/31/V2RAY/"},{"title":"MTG 一款Telegram专用代理工具","text":"前言Telegram的几种内置代理，SOCKS5就不用说了，明文传输一用就被封MTProxy原来也还好，可惜现在被识别了，博主自己使用的情况，不管是官方版还是go语言版，基本没有坚持挺过24小时，就被阻断端口，虽然可以换端口，虽然有65535个端口可以更换，但还是非常麻烦。 介绍MTG是基于 MTProxy的一个分支，基于代理的重放攻击的预防，在理论上是不会被干掉的MTG代理遵循 ShadowSocks的方式，并且 MTG非常的轻量，无论安装还是卸载都非常简单。一键安装bash &lt;(wget -qO- https://git.io/mtg.sh)安装过程root@ubuntu:~# systemctl stop mtg &amp;&amp; systemctl disable mtg Failed to stop mtg.service: Unit mtg.service not loaded. root@ubuntu:~# rm -f /usr/local/bin/mtg /lib/systemd/system/mtg.service /etc/mtg.conf root@ubuntu:~# bash &lt;(wget -qO- https://git.io/mtg.sh) Verifying archive integrity... 100% All good. Uncompressing Bullshit-free MTPROTO proxy Bin package [build 2019-12-26] 100% ================================================== &gt;Random port generated, input another if wish to change, press Enter to continue 65535 # 这里输入你要设定的端口，记得后台放行端口 Input a domain for FakeTLS mode, &quot;bing.com&quot; will be used if left empty # 这里输入TLS使用的域名，默认使用bing.com，建议直接回车使用默认域名 # 设置完这两项就OK，然后等待安装完成，在最后会给出你的TG代理连接 ================================================== &gt; Using: PORT: 65535, FakeTLS DOMAIN : bing.com ================================================== &gt; Downloading mtg binary ... 2020-01-22 13:13:15 URL:https://github-production-release-asset-2e65be.s3.amazonaws.com/135544649/cca8c080-0af8-11ea-9a56-32a4f2f0d345?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200122%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200122T051312Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=17d481bc81f881400c01e5d27b6de83f2eda890ef89aff01b0f7861d9b418aff&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Dmtg-linux-amd64&amp;response-content-type=application%2Foctet-stream [10481664/10481664] -&gt; &quot;/usr/local/bin/mtg&quot; [1] FINISHED --2020-01-22 13:13:15-- Total wall clock time: 4.9s Downloaded: 1 files, 10.0M in 1.9s (5.34 MB/s) ================================================== v1.0.1 (go version go1.13.4 linux/amd64) [Tue, 19 Nov 2019 15:15:49 +0000] Created symlink from /etc/systemd/system/multi-user.target.wants/mtg.service to /lib/systemd/system/mtg.service. ================================================== &gt;Installation Done. Waiting for service to load ... &gt; Generated Secret: eed8229777e783af51b95da521ca008fb662696e672e636f6d &gt; Mtg listening at port: 9024 &gt; ... &gt; Setup mtproxy in telegram with following URL: Jan 22 13:13:16 ubuntu mtg[5764]: &quot;tme_url&quot;: &quot;https://t.me/proxy?port=65535&amp;secret=eed8229777e783af51b95da521ca008fb662696e672e636f6d&amp;server=XX.XX.XX.XX&quot;, Jan 22 13:13:16 ubuntu mtg[5764]: &quot;tme_url&quot;: &quot;https://t.me/proxy?port=65535&amp;secret=eed8229777e783af51b95da521ca008fb662696e672e636f6d&amp;server=%3Cnil%3E&quot;, &gt; Bye. 安装完成后会给出两条链接，其中第一条链接中有IP地址的就是你的MTG专用代理卸载# 卸载MTGsystemctl stop mtg &amp;&amp; systemctl disable mtg 删除安装目录rm -f /usr/local/bin/mtg /lib/systemd/system/mtg.service /etc/mtg.conf","link":"/2020/10/31/MTG/"},{"title":"编译一个openwrt固件","text":"0.创建一个GitHub账号。 首先打开https://github.com/ ，按照下图进行输入： 输入验证码，然后点击蓝色的按钮【Next：Select a Plan】 然后点击【Choose Free】 然后按照下图随便选一些选项： 然后随便填点文字，点击【Complete setup】 然后网页会提示：Please verify your email address（请检查你的邮件地址） 打开邮箱，查收GitHub发来的邮件。 点击【Verify email address】 输入邮箱和密码，点击【Sign in】 1.进行默认配置的编译 账号创建完成，需要同步Lean的源代码。 在网页上方的搜索框里面输入coolsnowwolf/lede 点击第一个结果 然后点击【Fork】按钮 出现如下的提示，意思是等待片刻： 然后点击【Action】选项卡 网页会提示“Workflows在fork的仓库中无法运行”，接下来点击绿色的按钮 【I understand my workflows, go ahead and run them】 然后点击进入Code选项卡： 点击.github/workflows 点击openwrt-ci.yml 点击编辑按钮进入编辑页面 第一次编辑此文档，即可触发GitHub Action的自动编译。 将左侧编辑栏的push、branches和- master前面的#删除，千万不要删掉空格。 然后点击右侧的【Start commit】，再点击【Commit changes】 此时点击Action选项卡，即可看到已经自动开始编译。 黄色为正在编译，绿色为编译完成，红色为编译失败。 点击openwrt-ci，即可看到编译过程。 编译完成之后这里会显示成下图这样，按下图指示即可下载编译好的固件。 2.使用自定义配置进行编译 首先我们打开Code选项卡，找到.github/workflows/openwrt-ci-yml这个文件，点击编辑： 注意事项： ①需要DIY哪个功能，就将cat、CONFIG、EOF前面的#号和空格删掉。 ②去掉#号之后，cat、CONFIG、以及EOF要和上面的#号对齐 ③编辑之后，需要点击【Start commit】和【Commit changes】提交修改。 ④新人尽量每次修改只改5行以内代码，并在提交代码时写好修改记录。 ⑤可以添加代码库中有，但是openwrt-ci.yml中没有的插件，如 CONFIG_PACKAGE_luci-app-uhttpd=y ⑥如果一个luci-app需要多个依赖，只需要填写该luci-app即可， 其余依赖包会在编译时自动勾选。 ⑦如果需要修改固件大小，可以添加如下代码： # 设置固件大小: cat &gt;&gt; .config &lt;&lt;EOF CONFIG_TARGET_KERNEL_PARTSIZE=30 CONFIG_TARGET_ROOTFS_PARTSIZE=400 EOF 其中：30代表固件中内核分区大小，400代表固件中ROOTFS分区大小 ⑧修改完代码之后，需要检查每组代码是否以cat &gt;&gt; .config &lt;&lt;EOF开头，并以EOF结尾。","link":"/2020/10/23/openwrt/"},{"title":"在多台服务器上部署哪吒探针 vps监控","text":"开源地址：https://github.com/naiba/nezha预览地址：https://server.inkup.cn功能特性计划任务：备份脚本、服务重启，等定期运维任务。报警通知：CPU、内存、硬盘、带宽、流量实时监控。服务监控：HTTP、SSL证书、ping、TCP 端口等。自定义代码：改LOGO、改色调、加统计代码等。详情见文档部署教程一· 设置域名解析可以直接用 ip+端口 方式访问，为了安全及后期维护迁移方便，强烈建议设置用域名访问。准备两个域名，用本站域名举例：域名1： a.moththe.com 作为面板访问域名，套 CDN（保护源站IP不泄露）。域名2： b.moththe.com 不套CDN，指向面板服务器 IP，作为客户端与面板连接使用。两个域名都解析到部署面板服务器的IP。二. 创建 GitHub OAuth Apps需要有Github账号，没有的话先注册一个。这一步让Github账号用作面板后台登录验证。创建 OAuth Apps打开 Github Developer settings ，点击 New OAuth App 按钮填写站点名称和 URL 信息请参考图片填写，把 a.moththe.com 更换成自己面板域名，填写好以后点击 Register application 。https://套CDN的域名 https://套CDN的域名/oauth2/callback获取 OAuth Apps 的 Client ID 和 Client secret参照下图创建 client id 和 clients secret 并记下来。三. 部署哪吒探针面板端放行对应端口放行8008、5555两个端口，这是默认的，如果你安装中改为其他端口，防火墙放行相应的端口。一键安装脚本键入后按提示安装面板端，依次输入上面步骤获取的 Client ID ， Client secret 等相关信息。curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh sudo ./nezha.sh四. 设置域名访问设置反向代理在宝塔面板中新建站点，我这里是套CDN的域名，然后设置反代。反代配置文件location / { proxy_pass http://127.0.0.1:8008; proxy_set_header Host $host; } location /ws { proxy_pass http://127.0.0.1:8008; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;Upgrade&quot;; proxy_set_header Host $host; }配置 SSL 证书直接在宝塔面板中一键获取 Let's Encrypt 免费证书。如果域名托管在 Cloudflare，也可以使用CF生成的免费长期证书，填在面板中使用。然后开启强制 HTTPS 即可。现在就可以直接通过域名访问哪吒探针了，现在我们来配置被监控的服务器。五. 部署哪吒探针客户端（被监控）在哪吒面板中生成客户端连接密钥打开哪吒面板，点击登录后台，通过GitHub账号验证后进入管理后台，添加服务器，创建好以后记下生成的密钥一键安装客户端键入后按提示 安装监控Agent ，依次输入 域名2(我这里是不套CDN的域名），上一步骤中生成的连接密钥等相关信息。curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh sudo ./nezha.sh有多台被监控机器时，按照此步骤在控制面板添加服务器。其他功能可自行在哪吒面板后台摸索。常见问题1· 打开显示断开实时链接可以关闭CDN再试试。2· Centos8 中部署客户端或者面板端，一直显示离线请关闭SElinux，打开配置文件 vi /etc/selinux/config ，将 SELINUX=enforcing 改为 SELINUX=disabled ，重启机器 reboot ，然后键入安装脚本选择 重启Agent 。3· 修改服务器信息后变成离线在安装客户端(被监控)的服务器上执行 systemctl restart nezha-agent 重启程序。4· 启动nezha-agent还是一直显示离线检查配置有没有写对 cat /etc/systemd/system/nezha-agent.service | grep ExecStart 。5· 如何进行数据迁移、备份恢复？数据储存在 /opt/nezha 文件夹中，迁移数据时打包这个文件夹，到新环境解压。然后执行一键脚本安装即可。6· 首页服务器随机闪烁掉线？执行 ntpdate 0.pool.ntp.org 同步一下面板部署所在的服务器的时间。","link":"/2021/01/08/nezha/"},{"title":"Linux 服务器使用 Rclone 挂载 OneDrive","text":"之前写过挂载 Google Drive 的过程，因为我的 Google Drive 空间不大，而 OneDrive 有 5T 的空间，所以准备把 OneDrive 挂载上去使用。OneDrive 的挂载方法和 Google Drive 大部分是差不多的，但 OneDrive 的授权要麻烦一些。这里简单记录一下我配置的过程。 下载安装使用脚本下载安装 Rclone：curl https://rclone.org/install.sh | sudo bash 初始化配置安装完成后输入：rclone config 可以看到：2021/04/14 07:14:46 NOTICE: Config file &quot;/root/.config/rclone/rclone.conf&quot; not found - using defaultsNo remotes found - make a new onen) New remotes) Set configuration passwordq) Quit config输入 n 新建配置。name 可以随便输入，然后会出现挂载的服务类型，如下：Type of storage to configure.Enter a string value. Press Enter for the default (\"\").Choose a number from below, or type in your own value 1 / 1Fichier \"fichier\" 2 / Alias for an existing remote \"alias\" 3 / Amazon Drive \"amazon cloud drive\" 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS \"s3\" 5 / Backblaze B2 \"b2\" 6 / Box \"box\" 7 / Cache a remote \"cache\" 8 / Citrix Sharefile \"sharefile\" 9 / Compress a remote \"compress\"10 / Dropbox \"dropbox\"11 / Encrypt/Decrypt a remote \"crypt\"12 / Enterprise File Fabric \"filefabric\"13 / FTP Connection \"ftp\"14 / Google Cloud Storage (this is not Google Drive) \"google cloud storage\"15 / Google Drive \"drive\"16 / Google Photos \"google photos\"17 / Hadoop distributed file system \"hdfs\"18 / Hubic \"hubic\"19 / In memory object storage system. \"memory\"20 / Jottacloud \"jottacloud\"21 / Koofr \"koofr\"22 / Local Disk \"local\"23 / Mail.ru Cloud \"mailru\"24 / Mega \"mega\"25 / Microsoft Azure Blob Storage \"azureblob\"26 / Microsoft OneDrive \"onedrive\"27 / OpenDrive \"opendrive\"28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \"swift\"29 / Pcloud \"pcloud\"30 / Put.io \"putio\"31 / QingCloud Object Storage \"qingstor\"32 / SSH/SFTP Connection \"sftp\"33 / Sugarsync \"sugarsync\"34 / Tardigrade Decentralized Cloud Storage \"tardigrade\"35 / Transparently chunk/split large files \"chunker\"36 / Union merges the contents of several upstream fs \"union\"37 / Webdav \"webdav\"38 / Yandex Disk \"yandex\"39 / Zoho \"zoho\"40 / http Connection \"http\"41 / premiumize.me \"premiumizeme\"42 / seafile \"seafile\"直接输入序号，比如我挂载的是 OneDrive 就可以输入 26 ，client_id 可以直接回车默认，client_secret 也可以直接回车默认，然后会出现 OneDrive 区域选择，如下：Choose national cloud region for OneDrive.Enter a string value. Press Enter for the default (\"global\").Choose a number from below, or type in your own value 1 / Microsoft Cloud Global \"global\" 2 / Microsoft Cloud for US Government \"us\" 3 / Microsoft Cloud Germany \"de\" 4 / Azure and Office 365 operated by 21Vianet in China \"cn\"可以直接输入 1 选择全球，然后是选择是否进行高级配置，如下：dit advanced config? (y/n)y) Yesn) No (default)可以输入 n ，接着是自动配置选择，如下：Remote configUse auto config?Say Y if not sureSay N if you are working on a remote or headless machiney) Yes (default)n) No可以输入 n ，这里需要获取授权码：For this to work, you will need rclone available on a machine that hasa web browser available.For more help and alternate methods see: https://rclone.org/remote_setup/Execute the following on the machine with the web browser (same rcloneversion recommended):rclone authorize &quot;onedrive&quot; Then paste the result below:授权码需要在本地电脑上获取，访问 https://rclone.org/downloads/ 根据你的电脑系统版本下载对应的 Rclone。下载完成后解压，进入存放 Rclone 的目录，以 Win10 为例，打开 Powershell ，我的 Rclone 放在 E:下载rclone-v1.55.0-windows-amd64 ，我可以输入：cd E:\\下载\\rclone-v1.55.0-windows-amd64 在存放 Rclone 的目录可以看到 rclone.exe 的可执行程序，输入：./rclone authorize &quot;onedrive&quot; 浏览器应该会自动打开，如果浏览器没有打开可以根据提示复制地址访问。如果浏览器登录了 OneDrive 的话会直接显示授权确认信息，如果没有登录的话会弹出登录页面，登录 OneDrive 后也会显示授权确认信息，如下：选择 接受 后在本地命令行会显示一串 JSON 格式的授权信息，复制授权信息包括首尾的 {} ，到 Linux 终端粘贴。然后是选择 OneDrive 的类型，如下：Choose a number from below, or type in an existing value1 / OneDrive Personal or Business \"onedrive\" 2 / Root Sharepoint site \"sharepoint\" 3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite) \"url\" 4 / Search for a Sharepoint site \"search\" 5 / Type in driveID (advanced) \"driveid\" 6 / Type in SiteID (advanced) \"siteid\" 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr) \"path\"可以输入 1 ，然后会显示找到的 OneDrive 账户，如下：Found 1 drives, please select the one you want to use:0: OneDrive (business) id=b!b_xnJJqyBMSVPjgvhvbP8XmJ_M_dMjhzrbhnaWknnbKqNBm8MTqM3kvEtW67PFound drive 'root' of type 'business', URL: https://xxx-my.sharepoint.com/personal/changbin_xxx_onmicrosoft_com/DocumentsIs that okay?y) Yes (default)n) No确认无误后输入 y ，接着会显示你选择的配置信息，确认无误后输入 y 保存配置。挂载输入：rclone mount configName:OneDriveLocation dir --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 其中的 configName 就是配置名称，OneDriveLocation 就是要挂载的 OneDrive 目录，dir 就是要挂载到的本地目录。例如我要把一个名为 OneDrive 的配置挂载到本地的 /OneDrive 目录，我可以这样写：rclone mount OneDrive:/ /OneDrive --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 我这里挂载的是整个 OneDrive 网盘，所以我写的是 OneDrive 的根目录 / 。挂载完成后不会显示任何内容，可以再开一个终端，输入 df -h 查看磁盘空间，如下：Filesystem Size Used Avail Use% Mounted ondevtmpfs 1.5G 0 1.5G 0% /devtmpfs 1.5G 0 1.5G 0% /dev/shmtmpfs 1.5G 153M 1.4G 11% /runtmpfs 1.5G 0 1.5G 0% /sys/fs/cgroup/dev/vda1 57G 26G 29G 48% /tmpfs 301M 0 301M 0% /run/user/0OneDrive 5.0T 1.1T 4.0T 21% /OneDrive挂载完成后进入挂载的目录就可以看到 OneDrive 的文件了，上传文件可以直接拷贝到挂载目录，下载也是直接拷贝到本地目录。挂载出错如果在挂载的时候出现了类似下面的提示：2021/03/04 18:58:16 Fatal error: failed to mount FUSE fs: fusermount: exec: &quot;fusermount&quot;: executable file not found in $PATH 需要安装 fuse。CentOS/Fedora 安装 fuse：yum install -y fuseUbuntu/Debian 安装 fuse：apt install -y fuse","link":"/2021/01/01/onedrive/"}],"tags":[{"name":"cloudflare","slug":"cloudflare","link":"/tags/cloudflare/"},{"name":"Minecraft, Linux","slug":"Minecraft-Linux","link":"/tags/Minecraft-Linux/"},{"name":"Minecraft","slug":"Minecraft","link":"/tags/Minecraft/"},{"name":"telegram","slug":"telegram","link":"/tags/telegram/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"}],"categories":[]}