{"pages":[{"title":"申请须知","text":"原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 申请请提供：站点名称、站点链接、站点描述（选填）、logo或头像（选填）（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下： 网站名称：饼干博客 网站地址：https://g8d.xyz 网站简介：java，技术分享，后端开发，自动化框架，数据接口，算法，leetcode","link":"/friend/index.html"},{"title":"博客更新","text":"CLICK ME 2018年8月22号博客成立 使用hexo博客程序 写下了第一篇博客2018年11月10号更新主题 由默认主题改为···2019年3月博客修改博客程序 由hexo改为typecho 使用···主题2020年1月13日修改主题 由···改为···2020年2月13日修改博客程序 由typecho改为wordpress 使用zbill主题2021年9月修改博客程序 由wordpress改为typecho 同月29日改为wordpress2021年11月修改博客程序 由wordpress改为hexo 修改主题为Icarus 最后一次编辑：2021-11-23","link":"/about/index.html"}],"posts":[{"title":"2021.11.25","text":" 密码在TG群","link":"/2021/11/25/2021-11-18/"},{"title":"CloudFlare Workers 反代任意网站和挂载单页代码","text":"介绍 CloudFlare Workers是一个支持jsproxy的无服务器函数服务，提供全球CDN支持，免费用户有每天10万请求额度； CloudFlare官网：https://dash.cloudflare.com 记录下一些简单的使用方法，以后再陆续更新； Workers 单页挂载代码 addEventListener('fetch', event =&gt; { event.respondWith(handleRequest(event.request)) }) // HTML代码let html = &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;div&amp;gt;Hello world!&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;; /** Respond to the request @param {Request} request /async function handleRequest(request) {return new Response(html, { headers: {'Content-Type': 'text/html; charset=UTF-8' }, status: 200})}Workers 反代任意网站// Website you intended to retrieve for users. const upstream = 'sunpma.com' // Custom pathname for the upstream website.const upstream_path = ‘/‘ // Website you intended to retrieve for users using mobile devices.const upstream_mobile = ‘sunpma.com’ // Countries and regions where you wish to suspend your service.const blocked_region = [‘KP’, ‘SY’, ‘PK’, ‘CU’] // IP addresses which you wish to block from using your service.const blocked_ip_address = [‘0.0.0.0’, ‘127.0.0.1’] // Whether to use HTTPS protocol for upstream address.const https = true // Whether to disable cache.const disable_cache = false // Replace texts.const replace_dict = { ‘$upstream’: ‘$custom_domain’, ‘//sunpma.com’: ‘’} addEventListener(‘fetch’, event =&gt; { event.respondWith(fetchAndApply(event.request));}) async function fetchAndApply(request) { const region = request.headers.get(‘cf-ipcountry’).toUpperCase(); const ip_address = request.headers.get(‘cf-connecting-ip’); const user_agent = request.headers.get(‘user-agent’); let response = null; let url = new URL(request.url); let url_hostname = url.hostname; if (https == true) { url.protocol = 'https:'; } else { url.protocol = 'http:'; } if (await device_status(user_agent)) { var upstream_domain = upstream; } else { var upstream_domain = upstream_mobile; } url.host = upstream_domain; if (url.pathname == '/') { url.pathname = upstream_path; } else { url.pathname = upstream_path + url.pathname; } if (blocked_region.includes(region)) { response = new Response('Access denied: WorkersProxy is not available in your region yet.', { status: 403 }); } else if (blocked_ip_address.includes(ip_address)) { response = new Response('Access denied: Your IP address is blocked by WorkersProxy.', { status: 403 }); } else { let method = request.method; let request_headers = request.headers; let new_request_headers = new Headers(request_headers); new_request_headers.set('Host', upstream_domain); new_request_headers.set('Referer', url.protocol + '//' + url_hostname); let original_response = await fetch(url.href, { method: method, headers: new_request_headers }) connection_upgrade = new_request_headers.get(&quot;Upgrade&quot;); if (connection_upgrade &amp;amp;&amp;amp; connection_upgrade.toLowerCase() == &quot;websocket&quot;) { return original_response; } let original_response_clone = original_response.clone(); let original_text = null; let response_headers = original_response.headers; let new_response_headers = new Headers(response_headers); let status = original_response.status; if (disable_cache) { new_response_headers.set('Cache-Control', 'no-store'); } new_response_headers.set('access-control-allow-origin', '*'); new_response_headers.set('access-control-allow-credentials', true); new_response_headers.delete('content-security-policy'); new_response_headers.delete('content-security-policy-report-only'); new_response_headers.delete('clear-site-data'); if (new_response_headers.get(&quot;x-pjax-url&quot;)) { new_response_headers.set(&quot;x-pjax-url&quot;, response_headers.get(&quot;x-pjax-url&quot;).replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname)); } const content_type = new_response_headers.get('content-type'); if (content_type != null &amp;amp;&amp;amp; content_type.includes('text/html') &amp;amp;&amp;amp; content_type.includes('UTF-8')) { original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname); } else { original_text = original_response_clone.body } response = new Response(original_text, { status, headers: new_response_headers }) } return response; } async function replace_response_text(response, upstream_domain, host_name) { let text = await response.text() var i, j; for (i in replace_dict) { j = replace_dict[i] if (i == '$upstream') { i = upstream_domain } else if (i == '$custom_domain') { i = host_name } if (j == '$upstream') { j = upstream_domain } else if (j == '$custom_domain') { j = host_name } let re = new RegExp(i, 'g') text = text.replace(re, j); } return text; } async function device_status(user_agent_info) { var agents = [“Android”, “iPhone”, “SymbianOS”, “Windows Phone”, “iPad”, “iPod”]; var flag = true; for (var v = 0; v &lt; agents.length; v++) { if (user_agent_info.indexOf(agents[v]) &gt; 0) { flag = false; break; } } return flag;}替换掉其中的sunpma.com为你需要反代的网址即可；","link":"/2021/10/31/CloudFlare-Workers/"},{"title":"CloudFlare 缓存全站","text":"CloudFlare 默认只对静态资源进行缓存。动态资源是默认不缓存的。如果你的内容基本是静态的或者不在意实时更新的话，可以使用 CloudFlare 的页面规则设置缓存所有内容。免费用户可以设置 3 条页面规则，Pro 用户可以使用 30 条规则。 如果要全域都走这条规则的话，就使用 * 表示全部，比如 *.ednovas.xyz/* 就是代表所有的 ednovas.xyz 前缀后缀的域名都要走这个规则 还可以加上一条 Edge Cache TTL，此项为 cloudflare 多久去检查你的服务器并更新 如果有的时候进不去后台，可以设置个 Cache Level 的 bypass 规则，并且设置其为置顶规则","link":"/2021/11/19/CloudFlare-%E7%BC%93%E5%AD%98%E5%85%A8%E7%AB%99/"},{"title":"使用 Cloudflare Pages 托管静态网站","text":"Cloudflare Pages 是一个静态网站托管服务，功能和 Github Pages 差不多，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。Cloudflare 是全球最大的几个 CDN 服务商之一，速度应该会比 Github Pages 好一些，而且 Cloudflare Pages 一个账户可以创建多个网站。 最近我准备把 MWordStar 的帮助文档迁移到 Cloudflare Pages ，这样我的服务器就可以少管理一个网站，服务器出问题也不会影响主题帮助文档的访问。这里就简单写一下 Cloudflare Pages 的使用。 关联 Github 存储库直接访问 https://pages.cloudflare.com/ ，没有账号的可以按照提示注册，有账号的可以直接登录。 Cloudflare Pages 的官网首页没有中文，但部署和设置页面是有中文的。登录后点击 创建项目 ，如下：点击 连接 Github 账户 ：这里会弹出 Github 的授权页面，选择 Install &amp; Authorize 允许 Cloudflare 访问 Github 账户，如下：然后会显示 Github 存储库，也包括非公开的存储库，选择要部署的存储库，点击 开始设置 ：设置构建命令和存放构建的页面的目录：Cloudflare 克隆存储库后会自动执行 npm install 之类的命令下载所需的依赖，然后执行构建命令，然后把构建完成的文件放到网站目录。 点击 保存并部署 后 Cloudflare Pages 就会开始构建和部署，如下：同时下方也会输出日志：部署完成后点击 继续处理项目 就可以看到部署的网站了，如下：默认的域名是 项目名称.pages.dev 。 设置域名点击 自定义域 ：输入要绑定的域名：如果你用的是 Cloudflare 的 DNS 的话，Cloudflare可以一键设置 CNAME。如果不是的话就需要手动设置 CNAME，登录域名管理后台，添加一条 CNAME 指向默认的 pages.dev 域名。 我使用的是 Cloudflare 的 DNS，可以自动设置 CNAME：设置完成后需要一段时间才会生效。 以上就是 Cloudflare Pages 的设置过程。免费的 Cloudflare Pages 账户每月最多只能构建 500 次，对于个人博客或小网站来说已经足够。 目前 Cloudflare Pages 只能通过 Github 来部署，不能直接上传 HTML。","link":"/2021/10/31/Cloudflare-Pages/"},{"title":"Cloudflare Worker 无服务器追查 Git 仓库代码泄露","text":"大部分 Git 平台，如 Github、Gitlab 等，会在打开仓库时自动渲染 README.md，而我们利用这一特性，通过对 README.md 中的图片访问日志加以记录，可以实现追查代码泄露的目的。 如果你还没有 Cloudflare 账号，可以申请一个。登录 Cloudflare 后，进入 Workers 页面，点击 KV。添加一个 Cloudflare KV，起名 ref，用于记录访问记录。创建 Cloudflare Worker，起名 img，用于记录请求信息，并转发图片资源请求。代码如下： 12345678910111213141516171819202122addEventListener('fetch', (event) =&gt; { event.respondWith(handleRequest(event.request));});async function handleRequest(request) { let response; if (request.url.slice(-4).toLowerCase() === '.png') { const ref = request.headers.get('referer'); if (ref) { const time = new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' }); const ip = request.headers.get('CF-Connecting-IP'); const ua = request.headers.get('User-Agent'); const key = `Referer: ${ref}`; const val = `时间: ${time}\\nIP: ${ip}\\nUA: ${ua}`; await REF.put(key, val, { expirationTtl: 60 * 60 * 24 * 365 }); } const redirect = new Request('https://cdn.jsdelivr.net/gh/imaegoo/image/1x1_ffffff00.png'); response = await fetch(redirect); } else { response = new Response('not found', { status: 404 }); } return response;} 将 KV ref 的命名空间绑定到 Worker img。在仓库的 README.md 中插入图片 1![](https://img.imaegoo.workers.dev/image.png) 到 KV ref 中查看效果利用同样的思路和方法，我们还可以追查网站文章未经授权的转载，试试看！","link":"/2021/11/24/Cloudflare-Worker-%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%BD%E6%9F%A5-Git-%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E6%B3%84%E9%9C%B2/"},{"title":"Cloudflare 优选IP 获取最快 IP (IPv4+IPv6)！","text":"国外很多网站都在使用 Cloudflare CDN，但分配给中国访客的 IP 并不友好（高延迟/高丢包/速度慢等）。虽然 Cloudflare 公开了所有IP 段，但想要在这么多 IP 中找到适合自己的，怕是要累死，所以就有了这个软件。 快速使用下载运行 下载编译好的可执行文件 蓝奏云 / Github 并解压。 双击运行 CloudflareST.exe文件（Windows），等待测速完成… 「 点击查看 Linux 下载运行命令示例 」 以下命令仅为示例，版本号和文件名请前往 Releases 查看。 1234567891011121314151617# 如果是第一次使用，则建议创建新文件夹（后续更新请跳过该步骤）mkdir CloudflareST# 进入文件夹（后续更新，只需要从这里重复下面的下载、解压命令即可）cd CloudflareST# 下载 CloudflareST 压缩包（自行根据需求替换 URL 中版本号和文件名）wget -N https://github.com/XIU2/CloudflareSpeedTest/releases/download/v1.5.0/CloudflareST_linux_amd64.tar.gz# 解压（不需要删除旧文件，会直接覆盖，自行根据需求替换 文件名）tar -zxf CloudflareST_linux_amd64.tar.gz# 赋予执行权限chmod +x CloudflareST# 运行./CloudflareST 如果平均延迟非常低（如 0.xx），则说明 CloudflareST 测速时走了代理，请先关闭代理软件后再测速。如果在路由器上运行（如 OpenWrt），请先关闭路由器内的代理，否则测速结果会不准确且无法使用。 在 Android 手机上运行 CloudflareST 测速的简单教程 …建议测速时避开晚上高峰期（20:00~24:00），否则测速结果会与其他时间相差很大… 结果示例测速完毕后，默认会显示最快的 10 个 IP，示例（我联通白天测速结果）： 1234567891011121314151617181920IP 地址 已发送 已接收 丢包率 平均延迟 下载速度 (MB/s)104.27.200.69 4 4 0.00 146.23 28.64172.67.60.78 4 4 0.00 139.82 15.02104.25.140.153 4 4 0.00 146.49 14.90104.27.192.65 4 4 0.00 140.28 14.07172.67.62.214 4 4 0.00 139.29 12.71104.27.207.5 4 4 0.00 145.92 11.95172.67.54.193 4 4 0.00 146.71 11.55104.22.66.8 4 4 0.00 147.42 11.11104.27.197.63 4 4 0.00 131.29 10.26172.67.58.91 4 4 0.00 140.19 9.14...# 如果平均延迟非常低（如 0.xx），则说明 CloudflareST 测速时走了代理，请先关闭代理软件后再测速。# 如果在路由器上运行（如 OpenWrt），请先关闭路由器内的代理，否则测速结果会不准确且无法使用。# 因为默认下载测速地址的文件大小只有 300MB，如果你速度太快的话，测速结果可能会低于实际速度。# 因为每次测速都是在每个 IP 段中随机 IP，所以每次的测速结果都不可能相同，这是正常的！# 软件是先 延迟测速并按从低到高排序后，再从 最低延迟的 IP 开始下载测速的，所以： 测速结果第一行就是既下载速度最快、又平均延迟最低的最快 IP！至于拿来干嘛？取决于你~ 完整结果保存在当前目录下的 result.csv 文件中，用记事本/表格软件打开，格式如下： 12IP 地址, 已发送, 已接收, 丢包率, 平均延迟, 下载速度 (MB/s)104.27.200.69, 4, 4, 0.00, 146.23, 28.64 大家可以按自己需求，对完整结果进一步筛选处理，或者去看一看进阶使用指定过滤条件！ 进阶使用直接运行使用的是默认参数，如果想要测速结果更全面、更符合自己的要求，可以自定义参数。 1234567891011121314151617181920212223242526272829303132333435363738394041C:\\&gt;CloudflareST.exe -hCloudflareSpeedTest vX.X.X测试 Cloudflare CDN 所有 IP 的延迟和速度，获取最快 IP (IPv4+IPv6)！https://github.com/XIU2/CloudflareSpeedTest参数： -n 200 测速线程数量；越多测速越快，性能弱的设备 (如路由器) 请勿太高；(默认 200 最多 1000) -t 4 延迟测速次数；单个 IP 延迟测速次数，为 1 时将过滤丢包的IP，TCP协议；(默认 4) -tp 443 延迟测速端口；延迟测速 TCP 协议的端口；(默认 443) -dn 10 下载测速数量；延迟测速并排序后，从最低延迟起下载测速的数量；(默认 10) -dt 10 下载测速时间；单个 IP 下载测速最长时间，单位：秒；(默认 10) -url https://cf.xiu2.xyz/Github/CloudflareSpeedTest.png 下载测速地址；用来下载测速的 Cloudflare CDN 文件地址，如地址含有空格请加上引号； -tl 200 平均延迟上限；只输出低于指定平均延迟的 IP，可与其他上限/下限搭配；(默认 9999 ms) -tll 40 平均延迟下限；只输出高于指定平均延迟的 IP，可与其他上限/下限搭配、过滤被假蔷的 IP；(默认 0 ms) -sl 5 下载速度下限；只输出高于指定下载速度的 IP，凑够指定数量 [-dn] 才会停止测速；(默认 0.00 MB/s) -p 10 显示结果数量；测速后直接显示指定数量的结果，为 0 时不显示结果直接退出；(默认 10) -f ip.txt IP段数据文件；如路径含有空格请加上引号；支持其他 CDN IP段；(默认 ip.txt) -o result.csv 写入结果文件；如路径含有空格请加上引号；值为空时不写入文件 [-o &quot;&quot;]；(默认 result.csv) -dd 禁用下载测速；禁用后测速结果会按延迟排序 (默认按下载速度排序)；(默认 启用) -ipv6 IPv6测速模式；确保 IP 段数据文件内只包含 IPv6 IP段，软件不支持同时测速 IPv4+IPv6；(默认 IPv4) -allip 测速全部的IP；对 IP 段中的每个 IP (仅支持 IPv4) 进行测速；(默认 每个 IP 段随机测速一个 IP) -v 打印程序版本+检查版本更新 -h 打印帮助说明 使用示例Windows 要指定参数需要在 CMD 中运行，或者把参数添加到快捷方式目标中。 注意：各参数均有默认值，使用默认值的参数是可以省略的（按需选择），参数不分前后顺序。提示：Linux 系统只需要把下面命令中的 CloudflareST.exe 改为 ./CloudflareST 即可。 # IPv4/IPv612345# 测速 IPv4 时，需要指定 IPv4 数据文件（-f 默认值就是 ip.txt，所以该参数可以省略）CloudflareST.exe -f ip.txt# 测速 IPv6 时，需要指定 IPv6 数据文件( ipv6.txt )，需要加上 -ipv6 参数CloudflareST.exe -f ipv6.txt -ipv6 # 文件相对/绝对路径1234567891011# 指定 IPv4 数据文件，不显示结果直接退出，输出结果到文件（-p 值为 0）CloudflareST.exe -f 1.txt -p 0 -dd# 指定 IPv4 数据文件，不输出结果到文件，直接显示结果（-p 值为 10 条，-o 值为空但引号不能少）CloudflareST.exe -f 2.txt -o &quot;&quot; -p 10 -dd# 指定 IPv4 数据文件 及 输出结果到文件（相对路径，即当前目录下，如含空格请加上引号）CloudflareST.exe -f 3.txt -o result.txt -dd# 指定 IPv4 数据文件 及 输出结果到文件（绝对路径，即 C:\\abc\\ 目录下，如含空格请加上引号）CloudflareST.exe -f C:\\abc\\4.txt -o C:\\abc\\result.csv -dd # 自定义下载测速地址123# 地址要求：可以直接下载、文件大小超过 200MB、用的是 Cloudflare CDNCloudflareST.exe -url https://cf.xiu2.xyz/Github/CloudflareSpeedTest.png# 因为默认下载测速地址的文件大小只有 300MB，如果你速度太快的话，测速结果可能会低于实际速度。 # 自定义测速条件 「 点击展开 查看内容 」 指定 [平均延迟下限] 条件（用于过滤被假蔷的 IP，这类 IP 都被 TCP 劫持，因此延迟很低只有几十ms） 123# 平均延迟下限：40 ms （一般除了移动直连香港外，几乎不存在低于 100ms 的，自行测试适合的下限延迟）# 平均延迟下限和其他的上下限参数一样，都可以单独使用、互相搭配使用！CloudflareST.exe -tll 40 仅指定 [平均延迟上限] 条件 123# 平均延迟上限：200 ms，下载速度下限：0 MB/s，数量：10 个（可选）# 即找到平均延迟低于 200 ms 的 IP，然后再按延迟从低到高进行 10 次下载测速CloudflareST.exe -tl 200 -dn 10 如果没有一个 IP 平均延迟低于 200ms，那么不会输出任何内容。 仅指定 [平均延迟上限] 条件，且只延迟测速，不下载测速 123# 平均延迟上限：200 ms，下载速度下限：0 MB/s，数量：不知道多少 个# 即只输出低于 200ms 的 IP，且不再下载测速（因为不再下载测速，所以 -dn 参数就无效了）CloudflareST.exe -tl 200 -dd 仅指定 [下载速度下限] 条件 123# 平均延迟上限：9999 ms，下载速度下限：5 MB/s，数量：10 个（可选）# 即需要找到 10 个平均延迟低于 9999 ms 且下载速度高于 5 MB/s 的 IP 才会停止测速CloudflareST.exe -sl 5 -dn 10 没有指定平均延迟上限时，如果一直凑不够满足条件的 IP 数量，就会一直测速下去。所以建议**同时指定 [下载速度下限] + [平均延迟上限]**，这样测速到指定延迟上限还没凑够数量，就会终止测速。 同时指定 [平均延迟上限] + [下载速度下限] 条件 1234# 平均延迟上限、下载速度下限均支持小数（如 -sl 0.5）# 平均延迟上限：200 ms，下载速度下限：5.6 MB/s，数量：10 个（可选）# 即需要找到 10 个平均延迟低于 200 ms 且下载速度高于 5 .6MB/s 的 IP 才会停止测速CloudflareST.exe -tl 200 -sl 5.6 -dn 10 如果没有一个 IP 平均延迟低于 200ms，那么不会输出任何内容。如果没有一个 IP 下载速度高于 5.6 MB/s，那么就会和不指定 [下载速度下限] 条件一样输出结果。所以建议先不指定条件测速一遍，看看平均延迟和下载速度大概在什么范围，避免指定条件过低/过高！ 因为Cloudflare 公开的 IP 段是回源 IP+任播 IP，而回源 IP是无法使用的，所以下载测速是 0.00。运行时可以加上 -sl 0.01（下载速度下限），过滤掉回源 IP（下载测速低于 0.01MB/s 的结果）。 # 单独对一个或多个 IP 测速 「 点击展开 查看内容 」 如果要单独对一个或多个 IP 进行测速，只需要把这些 IP 按如下格式写入到任意文本文件中，例如：1.txt 1231.1.1.11.1.1.2001.0.0.1/24 单个 IP 的话可以省略 /32 子网掩码了（即 1.1.1.1等同于 1.1.1.1/32）。子网掩码 /24 指的是这个 IP 最后一段，即 1.0.0.1~1.0.0.255。 然后运行 CloudflareST 时加上启动参数 -f 1.txt 即可。 12345678# 先进入 CloudflareST 所在目录，然后运行：# Windows 系统（在 CMD 中运行）CloudflareST.exe -f 1.txt# Linux 系统./CloudflareST -f 1.txt# 对于 1.0.0.1/24 这样的 IP 段只会随机最后一段（1.0.0.1~255），如果要测速该 IP 段中的所有 IP，请加上 -allip 参数。 # Windows 快捷方式如何使用参数 「 点击展开 查看内容 」 123456## 右键快捷方式 - 目标# 如果要不输出结果文件，那么请加上 -o &quot; &quot;，引号里的是空格（没有空格会导致该参数被省略）。D:\\ABC\\CloudflareST\\CloudflareST.exe -n 500 -t 4 -dn 20 -dt 5 -o &quot; &quot;# 如果文件路径包含引号，则需要把启动参数放在引号外面，记得引号和 - 之间有空格。&quot;D:\\Program Files\\CloudflareST\\CloudflareST.exe&quot; -n 500 -t 4 -dn 20 -dt 5 -o &quot; &quot; # 一劳永逸加速所有使用 Cloudflare CDN 的网站（不需要再一个个添加域名到 Hosts 了）我以前说过，开发该软件项目的目的就是为了通过改 Hosts 的方式来加速访问使用 Cloudflare CDN 的网站。 但就如 #8 所说，一个个添加域名到 Hosts 实在太麻烦了，于是我就找到了个一劳永逸的办法！ 可以看这个 还在一个个添加 Hosts？完美本地加速所有使用 Cloudflare CDN 的网站方法来了！ # 自动更新 Hosts考虑到很多人获得最快 Cloudflare CDN IP 后，需要替换 Hosts 文件中的 IP。 可以看这个 Issues 获取 Windows/Linux 自动更新 Hosts 脚本！","link":"/2019/11/21/CloudflareSpeedTest/"},{"title":"Linux 搭建 Minecraft 基岩版服务器","text":"Minecraft Bedrock Edition 也就是我的世界基岩版，这是 Minecraft 的另一个版本。Minecraft 基岩版可以运行在 Win10、Android、iOS、XBox。基岩版不能使用 Java 版的服务器，Java 版也不能使用基岩版的服务器，不过 Win10、Android、iOS、XBox 的基岩版都可以使用同一个服务器，也就是说基岩版的服务器可以让 Win10 和手机一起联机。 目前基岩版的服务器还是测试版，因为不是用 Java 编写的，所以目前只能在 Windows 和 Ubuntu 上搭建。 我使用的是阿里云的轻量应用服务器，配置是 1 核 2 G，使用的系统是 Ubuntu 18.04。 下载可以进入 https://www.minecraft.net/en-us/download/server/bedrock/ 下载服务器，目前只有 Windows 和 Ubuntu 两个版本。下载之前需要选中 I agree to the Minecraft End User License Agreement and Privacy Policy。你可以下载到本地电脑，然后通过 SFTP 上传到服务器，也可以右击 DOWNLOAD 复制链接地址，直接通过 wget 下载到服务器。 一般情况下官网默认就是最新版本的服务端，我下载的服务端版本是 1.14.32.1，客户端版本是 14.30，在游戏主界面的右下方可以查看版本。如果客户端版本比服务端版本低的话可以更新到最新版本，Win 10 可以在应用商店更新。 下载的压缩包中还会包含一个 bedrock_server_how_to.html，这就是服务器的帮助文档，建议可以下载一份服务端到本地电脑，方便查看帮助文档。 运行下载的服务端可能是一个 zip 格式的压缩包，先解压： unzip bedrock-server-1.14.32.1.zip 上面的命令是把文件解压到当前目录，其中的 bedrock-server-1.14.32.1.zip 就是压缩包的名称。 如果解压的时候出现： Command ‘unzip’ not found 可以输入： apt install -y zip 安装 zip。 基岩版的服务端还需要依赖 libcurl4-openssl-dev，安装 libcurl4-openssl-dev： apt install -y libcurl4-openssl-dev 安装完成后输入： LD_LIBRARY_PATH=. ./bedrock_server 启动服务器。 启动后会输出状态信息，如下： NO LOG FILE! - setting up server logging... [2020-04-02 20:50:22 INFO] Starting Server [2020-04-02 20:50:22 INFO] Version 1.14.32.1 [2020-04-02 20:50:22 INFO] Session ID 08940d5f-f2da-4da8-9130-c7e59f580559 [2020-04-02 20:50:22 INFO] Level Name: Bedrock level [2020-04-02 20:50:22 INFO] Game mode: 1 Creative [2020-04-02 20:50:22 INFO] Difficulty: 0 PEACEFUL [2020-04-02 20:50:22 INFO] opening worlds/Bedrock level/db [2020-04-02 20:50:25 INFO] IPv4 supported, port: 4999 [2020-04-02 20:50:25 INFO] IPv6 not supported [2020-04-02 20:50:25 INFO] IPv4 supported, port: 19132 [2020-04-02 20:50:25 INFO] IPv6 not supported [2020-04-02 20:50:27 INFO] Server started. 服务器默认的端口是 19132，协议是 UDP ，不是 TCP，开放端口的时候需要注意一下。 客户端连接 打开 Minecraft 基岩版，选择 游戏，选择 服务器，点击 添加，按照提示输入服务器 IP 和端口号。 如下：如果没有修改过配置文件的话，默认的端口号是 19132。 进入服务器之前需要登录 Xbox Live，只有账户中有 Minecraft 才能联机。 配置服务端解压后会包含一个名为 server.properties 的配置文件，服务器相关的配置就在这个配置文件中。 可以用 VI 之类的编辑器打开配置文件编辑，关于 VI 编辑器的使用可以看 Linux VI 编辑器简单使用教程 。 配置文件中的 # 开头的行是注释，可以不用管，主要就是修改 = 后面的内容。 下面是一些配置项说明： gamemode：默认的游戏模式，survival 生存，creative 创造，adventure 冒险。 difficulty：默认难度，peaceful 和平，easy 简单，normal 普通，hard 困难。 max-players：玩家数量限制，默认为 10。 server-port：服务器端口，默认为 19132。 server-portv6：IPv6 端口，默认为 19133。 online-mode：正版验证，如果你的服务器可以正常连接到 Xbox Live 的话，可以设置为 true，否则可以设置为 false，即便不开启正版验证，客户端也需要登录 Xbox Live 才能联机。 white-list：白名单，只有在白名单中的玩家才能进入服务器，默认为 false。 allow-cheats：允许作弊，默认为 false。 player-idle-timeout：自动踢出挂机玩家，默认为 30 分钟。 default-player-permission-level：默认玩家等级，visitor 游客，member 普通玩家，operator 管理员。 更详细的配置说明可以查看帮助文档。 白名单配置服务端解压后会包含一个 whitelist.json 文件，这就是储存白名单的文件，格式如下： [ { \"name\": \"name1\", \"ignoresPlayerLimit\": \"true\" }, { \"name\": \"name2\" } ] 其中的 name 是玩家的 Xbox 用户名，ignoresPlayerLimit 是忽略服务器人数限制，ignoresPlayerLimit 是可省略的。 只有 server.properties 配置文件中的 white-list 为 true，whitelist.json 中的白名单才会生效。 如果在服务器正在运行的时候修改了白名单的话，需要在服务器命令行中输入： whitelist.jsonwhitelist reload 重新加载白名单才会生效。 设置了白名单后就只有 whitelist.json 中的玩家才能进入服务器。 后台运行如果直接使用 LD_LIBRARY_PATH=. ./bedrock_server 启动服务器的话，退出 SSH 终端后，服务端也会停止运行。 这里可以使用 nohub 命令来启动服务端： nohub LD_LIBRARY_PATH=. ./bedrock_server &amp; 以上就是搭建 Minecraft 基岩版服务器的过程，更详细的服务器配置和命令可以查看帮助文档。","link":"/2020/01/06/Linux-Minecraft-BE/"},{"title":"Linux 搭建 Minecraft Java 服务器","text":"我的世界 (Minecraft) 可以单人游戏，也可以在局域网联机，也可以自己搭建服务器，官方也提供了服务端下载。因为 Java 版的 Minecraft 服务端也是用 Java 编写的，所以可以在 Windows、Linux、Mac 上搭建服务器。 虽然网易代理了 Minecraft，但是需要网易官方的客户端才能使用网易的服务器，相比自己搭建来说限制也比较多。自己搭建服务器可以直接使用官方的 Minecraft Java 版来联机，而且可自定义的方面也比较多。 关于服务器我这里使用的是阿里云的轻量应用服务器，配置是 1 核 2G 5M，这个配置对于十个人以下的服务器也基本够用。 关于玩家人数和服务器配置要求可以稍微参考一下 http://canihostaminecraftserver.com/ 的计算结果。 我使用的 Linux 版本是 CentOS 7，CentOS 和 Ubuntu 除了在安装环境和设置端口有点不一样外其它设置都差不多。 安装 JavaCentOS/Fedora 安装 Java： yum install -y java Ubuntu/Debian 安装 Java： apt install -y java 下载服务器可以到 https://mcversions.net/ 下载，服务器版本需要和客户端版本一致。可以直接复制下载地址用 wget 下载，也可以下载到本地电脑再上传到服务器，如果服务器在国内，直接使用服务器下载速度可能会比较慢。 下载的服务端文件可能是一个 server.jar 的 jar 文件，第一次启动后会在存放 server.jar 的目录生成很多个文件，可以在第一次启动前就单独创建一个目录来存放 server.jar 。 下载完成后需要启动一次服务器来生成相关配置文件，可以输入： java -Xms512M -Xmx1024M -jar server.jar -nogui 其中的 -Xms512M 是设置初始分配内存为 512M，-Xmx1024M 是设置最大占用内存为 1024M。 第一次启动时可能会输出如下的内容： [11:20:13] [main/ERROR]: Failed to load properties from file: server.properties [11:20:13] [main/WARN]: Failed to load eula.txt [11:20:13] [main/INFO]: You need to agree to the EULA in order to run the server. Go to eula.txt for more info. 此时在服务端的存放目录会生成一个 eula.txt 的文本文件，打开 eula.txt 把 eula=false 改为 eula=true 然后保存退出。 现在再启动服务器就可以启动成功了，不过在启动服务器之前可以先进行一些必要的配置。 配置说明Minecraft Server 的配置文件是 server.properties ，配置文件会在第一次启动服务器后生成。 下面是一些配置项的简单说明： online-mode：连接到 Minecraft 服务器验证玩家账户信息，如果玩家的 Minecraft 不是正版将无法进入服务器。如果你只允许正版玩家加入可以设置为 true，否则可以设置为 false。 gamemode：设置默认的游戏模式。survival 生存模式，creative 创造模式，adventure 冒险模式。spectator 旁观模式。 difficulty：设置游戏难度。peaceful 和平，easy 简单，normal 普通，hard 困难。 level-type：设置生成地图的类型。default 带有丘陵、河谷、海洋等的标准的世界，flat 超平坦世界，largebiomes 如同预设（default）世界，但所有生物群系都更大，amplified 如同预设世界，但世界生成高度提高。 pvp：玩家之间是否可以互相残杀。true 玩家可以互相残杀，false 玩家之间不会造成伤害。这里的伤害不包括岩浆或陷阱之类的间接伤害。 allow-nether：是否允许进入下界。true 可以进入下界，false 下界传送门不会生效。 enable-command-block：是否启用命令方块。true 启用，false 不启用。 level-seed：生成世界的种子，默认为空白。 player-idle-timeout：踢出长时间挂机的玩家，以分钟为单位，默认为 0 不限制。 spawn-animals：是否可以生成动物。true 可以生成动物，false 不可以生成动物。 spawn-monsters：是否可以生成攻击型生物和怪物。true 可以生成，false 不可以生成。 spawn-npcs：是否可以生成村民。true 可以生成，false 不可以生成。 query.port：监听服务器的端口号，默认为 25565。 server-port：服务器端口，默认为 25565。 这里只包含一部分的配置说明，如需查看更多配置说明可以访问 https://minecraft-zh.gamepedia.com/index.php?title=Server.properties&amp;variant=zh 。 在启动服务器前别忘了打开端口，关于 CentOS 开放端口可以看 CentOS 开放、关闭和查看端口 如果是阿里云的服务器的话，还需要在服务器后台的防火墙开放端口。 客户端连接进入 Minecraft，选择 多人游戏，点击 添加服务器，在服务器地址输入框输入服务器的 IP + 端口号，比如我的服务器 IP 是 39.112.55.66，端口是 25565，格式就是 39.112.55.66:25565，如下：服务器后台运行如果直接使用： java -Xms512M -Xmx1024M -jar server.jar -nogui 启动服务器的话，在断开远程连接后服务器也会停止运行。 如果要在断开远程连接后保持服务器运行可以使用： nohup java -Xms512M -Xmx1024M -jar server.jar -nogui &amp; 启动服务器。 安装 MOD如果你需要安装 MOD 的话，可以不需要手动下载服务端，FORGE 安装的时候会自动下载对应版本的服务端。 进入 http://files.minecraftforge.net/ 下载和你的 Minecraft 版本对应的 FORGE，选择完版本后点击 Installer 下载。 下载完成后是一个 jar 文件，可以上传到 Linux 服务器安装，也可以在自己的电脑上安装，安装完成后把生成的文件上传到服务器。下面就在本地电脑上安装，然后把安装生成的文件上传到服务器。 运行下载的 FORGE 安装程序，选择 Install Server，安装位置可以选择一个比较容易找到的文件夹，如下： 安装的时候需要下载文件，在国内速度可能会比较慢，安装完成后会生成一个 libraries 文件夹、一个 forge.jar、一个 minecraft_server.jar 和一个 JSON 文件，把安装生成的文件和目录全部上传到服务器。 上传完成后运行 forge.jar： java -Xms512M -Xmx1024M -jar forge-1.14.4-28.2.0.jar -nogui FORGE 的版本号可能会不一样。 第一次运行可能会出现如下的提示： [10:58:28] [main/ERROR] [minecraft/PropertyManager]: Failed to load properties from file: server.properties [10:58:28] [main/WARN] [minecraft/ServerEula]: Failed to load eula.txt [10:58:28] [main/INFO] [minecraft/MinecraftServer]: You need to agree to the EULA in order to run the server. Go to eula.txt for more info. 打开 eula.txt 把 eula=false 改为 eula=true 然后保存退出。 第一次运行后会生成一些文件和目录，其中的 server.properties 就是配置文件，mods 目录就是存放 MOD 的目录，下载的 jar 格式的 MOD 可以直接放到 mods 目录。 有的 MOD 除了服务端安装外客户端也需要安装，否则可能无法进入服务器。安装了 FORGE 后，启动服务器就需要通过 forge.jar 启动。 以上就是在 Linux 搭建服务器的过程，这个服务器只能给 Java 版的 Minecraft 使用。","link":"/2020/01/06/Linux-Minecraft-Java/"},{"title":"Linux其他命令","text":"收集了一些常用的终端命令，便于需要时使用。本文主要包括： 查找文件 软链接 打包和压缩 软件安装 查找文件find 命令功能非常强大，通常用来在 特定的目录下 搜索 符合条件的文件序号 命令 作用01 find [路径] -name “*.py” 查找指定路径下扩展名是 .py 的文件，包括子目录如果省略路径，表示在当前文件夹下查找之前学习的通配符，在使用 find 命令时同时可用有关 find 的高级使用，在就业班会讲 软链接序号 命令 作用01 ln -s 被链接的源文件 链接文件 建立文件的软链接，用通俗的方式讲类似于 Windows 下的快捷方式注意：没有 -s 选项建立的是一个 硬链接文件两个文件占用相同大小的硬盘空间，工作中几乎不会建立文件的硬链接源文件要使用绝对路径，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用 硬链接简介在使用 ln 创建链接时，如果没有 -s 选项，会创建一个 硬链接，而不是软链接 文件软硬链接的示意图在 Linux 中，文件名 和 文件的数据 是分开存储的 提示： 在 Linux 中，只有文件的 硬链接数 == 0 才会被删除使用 ls -l 可以查看一个文件的硬链接的数量在日常工作中，几乎不会建立文件的硬链接，知道即可 打包压缩打包压缩 是日常工作中备份文件的一种方式 在不同操作系统中，常用的打包压缩方式是不同的 Windows 常用 rarMac 常用 zipLinux 常用 tar.gz 打包 ／ 解包tar 是 Linux 中最常用的 备份工具，此命令可以 把一系列文件 打包到 一个大文件中，也可以把一个 打包的大文件恢复成一系列文件tar 的命令格式如下： 打包文件tar -cvf 打包文件.tar 被打包的文件／路径… 解包文件tar -xvf 打包文件.tartar 选项说明选项 含义c 生成档案文件，创建打包文件x 解开档案文件v 列出归档解档的详细过程，显示进度f 指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后注意：f 选项必须放在最后，其他选项顺序可以随意 压缩／解压缩gziptar 与 gzip 命令结合可以使用实现文件 打包和压缩 tar 只负责打包文件，但不压缩用 gzip 压缩 tar 打包后的文件，其扩展名一般用 xxx.tar.gz在 Linux 中，最常见的压缩文件格式就是 xxx.tar.gz 在 tar 命令中有一个选项 -z 可以调用 gzip，从而可以方便的实现压缩和解压缩的功能命令格式如下： 压缩文件tar -zcvf 打包文件.tar.gz 被压缩的文件／路径… 解压缩文件tar -zxvf 打包文件.tar.gz 解压缩到指定路径tar -zxvf 打包文件.tar.gz -C 目标路径选项 含义-C 解压缩到指定目录，注意：要解压缩的目录必须存在bzip2(two)tar 与 bzip2 命令结合可以使用实现文件 打包和压缩（用法和 gzip 一样） tar 只负责打包文件，但不压缩，用 bzip2 压缩 tar 打包后的文件，其扩展名一般用 xxx.tar.bz2在 tar 命令中有一个选项 -j 可以调用 bzip2，从而可以方便的实现压缩和解压缩的功能 命令格式如下： 压缩文件tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径… 解压缩文件tar -jxvf 打包文件.tar.bz2 软件安装通过 apt 安装／卸载软件apt 是 Advanced Packaging Tool，是 Linux 下的一款安装包管理工具可以在终端中方便的 安装／卸载／更新软件包 1. 安装软件$ sudo apt install 软件包 2. 卸载软件$ sudo apt remove 软件名 3. 更新已安装的包$ sudo apt upgrade配置软件源如果希望在 ubuntu 中安装软件，更加快速，可以通过设置镜像源，选择一个访问网速更快的服务器，来提供软件下载／安装服务提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了所谓镜像源，就是所有服务器的内容是相同的（镜像），但是根据所在位置不同，国内服务器通常速度会更快一些！","link":"/2020/11/12/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/"},{"title":"MarkDown快捷键","text":"习惯了在mac使用Mweb编写MarkDown，来到了windows有点不太适应，windows上比较好用的软件我觉得也就是Typora了，但是我觉得它和Mweb比，差的不是一丁半点 1、先介绍下csdn常用的快捷键吧 加粗 Ctrl + B 斜体 Ctrl + I 引用 Ctrl + Q 插入链接 Ctrl + L 插入代码 Ctrl + K 插入图片 Ctrl + G 提升标题 Ctrl + H 有序列表 Ctrl + O 无序列表 Ctrl + U 横线 Ctrl + R 撤销 Ctrl + Z 重做 Ctrl + Y 2、修改Typoya快捷键 无序列表：输入-之后输入空格 有序列表：输入数字+“.”之后输入空格 任务列表：-[空格]空格 文字 标题：ctrl+数字 表格：ctrl+t 生成目录：[TOC]按回车 选中一整行：ctrl+l 选中单词：ctrl+d 选中相同格式的文字：ctrl+e 跳转到文章开头：ctrl+home 跳转到文章结尾：ctrl+end 搜索：ctrl+f 替换：ctrl+h 引用：输入&gt;之后输入空格 代码块：ctrl+alt+f 加粗：ctrl+b 倾斜：ctrl+i 下划线：ctrl+u 删除线：alt+shift+5 插入图片：直接拖动到指定位置即可或者ctrl+shift+i 插入链接：ctrl+k 其实 Mweb使用快捷键的频率也不是相当多，但是为了大概率上统一，我讲Typora的快捷键进行了重新定义，好在这个快捷键定义非常方便 1556160300212 1234567891011 &quot;keyBinding&quot;: { &quot;代码块&quot;:&quot;Ctrl+K&quot;, &quot;超链接&quot;:&quot;Ctrl+L&quot;, &quot;图像&quot;:&quot;Ctrl+Alt+I&quot;, &quot;引用&quot;:&quot;Ctrl+Q&quot;, &quot;有序列表&quot;:&quot;Ctrl+Shift+U&quot;, &quot;无序列表&quot;:&quot;Ctrl+Shift+O&quot;, &quot;表格&quot;:&quot;Ctrl+T&quot;, &quot;降低标题级别&quot;:&quot;Ctrl + -&quot;, &quot;下划线&quot;:&quot;Ctrl+U&quot;,}","link":"/2020/11/11/MarkDown%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"title":"MTG 一款Telegram专用代理工具","text":"前言Telegram的几种内置代理，SOCKS5就不用说了，明文传输一用就被封MTProxy原来也还好，可惜现在被识别了，博主自己使用的情况，不管是官方版还是go语言版，基本没有坚持挺过24小时，就被阻断端口，虽然可以换端口，虽然有65535个端口可以更换，但还是非常麻烦。 介绍MTG是基于 MTProxy的一个分支，基于代理的重放攻击的预防，在理论上是不会被干掉的MTG代理遵循 ShadowSocks的方式，并且 MTG非常的轻量，无论安装还是卸载都非常简单。一键安装 bash &lt;(wget -qO- https://git.io/mtg.sh) 安装过程 root@ubuntu:~# systemctl stop mtg &amp;&amp; systemctl disable mtg Failed to stop mtg.service: Unit mtg.service not loaded. root@ubuntu:~# rm -f /usr/local/bin/mtg /lib/systemd/system/mtg.service /etc/mtg.conf root@ubuntu:~# bash &lt;(wget -qO- https://git.io/mtg.sh) Verifying archive integrity... 100% All good. Uncompressing Bullshit-free MTPROTO proxy Bin package [build 2019-12-26] 100% ================================================== &gt;Random port generated, input another if wish to change, press Enter to continue 65535 # 这里输入你要设定的端口，记得后台放行端口 Input a domain for FakeTLS mode, &quot;bing.com&quot; will be used if left empty # 这里输入TLS使用的域名，默认使用bing.com，建议直接回车使用默认域名 # 设置完这两项就OK，然后等待安装完成，在最后会给出你的TG代理连接 ================================================== &gt; Using: PORT: 65535, FakeTLS DOMAIN : bing.com ================================================== &gt; Downloading mtg binary ... 2020-01-22 13:13:15 URL:https://github-production-release-asset-2e65be.s3.amazonaws.com/135544649/cca8c080-0af8-11ea-9a56-32a4f2f0d345?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200122%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200122T051312Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=17d481bc81f881400c01e5d27b6de83f2eda890ef89aff01b0f7861d9b418aff&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;response-content-disposition=attachment%3B%20filename%3Dmtg-linux-amd64&amp;response-content-type=application%2Foctet-stream [10481664/10481664] -&gt; &quot;/usr/local/bin/mtg&quot; [1] FINISHED --2020-01-22 13:13:15-- Total wall clock time: 4.9s Downloaded: 1 files, 10.0M in 1.9s (5.34 MB/s) ================================================== v1.0.1 (go version go1.13.4 linux/amd64) [Tue, 19 Nov 2019 15:15:49 +0000] Created symlink from /etc/systemd/system/multi-user.target.wants/mtg.service to /lib/systemd/system/mtg.service. ================================================== &gt;Installation Done. Waiting for service to load ... &gt; Generated Secret: eed8229777e783af51b95da521ca008fb662696e672e636f6d &gt; Mtg listening at port: 9024 &gt; ... &gt; Setup mtproxy in telegram with following URL: Jan 22 13:13:16 ubuntu mtg[5764]: &quot;tme_url&quot;: &quot;https://t.me/proxy?port=65535&amp;secret=eed8229777e783af51b95da521ca008fb662696e672e636f6d&amp;server=XX.XX.XX.XX&quot;, Jan 22 13:13:16 ubuntu mtg[5764]: &quot;tme_url&quot;: &quot;https://t.me/proxy?port=65535&amp;secret=eed8229777e783af51b95da521ca008fb662696e672e636f6d&amp;server=%3Cnil%3E&quot;, &gt; Bye. # 安装完成后会给出两条链接，其中第一条链接中有IP地址的就是你的MTG专用代理 卸载 # 卸载MTG systemctl stop mtg &amp;&amp; systemctl disable mtg # 删除安装目录 rm -f /usr/local/bin/mtg /lib/systemd/system/mtg.service /etc/mtg.conf","link":"/2020/10/31/MTG/"},{"title":"MarkDown折叠语法","text":"当我们在文章中写太多内容时，进行适当的内容折叠是非常有必要的。 MarkDown折叠语法是： 1234567891011121314151617181920212223242526272829&lt;details&gt;&lt;summary&gt;Title&lt;/summary&gt;content!!!&lt;/details&gt; 示例1：注意：summary标签与正文间一定要空一行！&lt;details&gt;&lt;summary&gt;CLICK ME&lt;/summary&gt;**&lt;summary&gt;标签与正文间一定要空一行！！！**content!!!&lt;/details&gt; 示例2：在Github中写太多内容时，进行代码块内容折叠的代码如下：&lt;details&gt;&lt;summary&gt;展开查看&lt;/summary&gt;&lt;pre&gt;&lt;code&gt;System.out.println(&quot;Hello to see U!&quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt; 示例2： 在Github中写太多内容时，进行代码块内容折叠的代码如下： 展开查看 System.out.println(\"Hello to see U!\") 总结：可能不同的平台不同的编辑器，MarkDown折叠语法可能在使用上还是略有些区别，甚至是编辑器的限制，不让使用此语法，就会出现“MarkDown折叠语法”不生效，没有效果的问题。","link":"/2021/11/21/MarkDown%E6%8A%98%E5%8F%A0%E8%AF%AD%E6%B3%95/"},{"title":"Markdown编辑器Editor.md集成使用教程","text":"typecho同款编辑器带ui界面小白易上手 一、下载插件 项目地址：http://pandao.github.io/editor.md/ 二、引用插件 下载安装包后放在相应的目录中并引用； 12345&lt;link rel=&quot;stylesheet&quot; href=&quot;lib/js/editor.md-master/css/editormd.css&quot; /&gt;//依赖jquery&lt;script type=&quot;text/javascript&quot; src=&quot;lib/js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;lib/js/editor.md-master/editormd.min.js&quot;&gt;&lt;/script&gt;//需要这三个文件，自己对应好目录哦 三、在自己的页面中加上对应的id123456789101112131415161718192021&lt;div class=&quot;btns&quot;&gt; &lt;button id=&quot;goto-line-btn&quot;&gt;Goto line 90&lt;/button&gt; &lt;button id=&quot;show-btn&quot;&gt;Show editor&lt;/button&gt; &lt;button id=&quot;hide-btn&quot;&gt;Hide editor&lt;/button&gt; &lt;button id=&quot;get-md-btn&quot;&gt;Get Markdown&lt;/button&gt; &lt;button id=&quot;get-html-btn&quot;&gt;Get HTML&lt;/button&gt; &lt;button id=&quot;watch-btn&quot;&gt;Watch&lt;/button&gt; &lt;button id=&quot;unwatch-btn&quot;&gt;Unwatch&lt;/button&gt; &lt;button id=&quot;preview-btn&quot;&gt;Preview HTML (Press Shift + ESC cancel)&lt;/button&gt; &lt;button id=&quot;fullscreen-btn&quot;&gt;Fullscreen (Press ESC cancel)&lt;/button&gt; &lt;button id=&quot;show-toolbar-btn&quot;&gt;Show toolbar&lt;/button&gt; &lt;button id=&quot;close-toolbar-btn&quot;&gt;Hide toolbar&lt;/button&gt; &lt;button id=&quot;toc-menu-btn&quot;&gt;ToC Dropdown menu&lt;/button&gt; &lt;button id=&quot;toc-default-btn&quot;&gt;ToC default&lt;/button&gt; &lt;/div&gt; &lt;div id=&quot;layout&quot; class=&quot;editor&quot;&gt; &lt;div id=&quot;test-editormd&quot;&gt; &lt;textarea&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; 四、js代码主要就是说这个就是代码，记得make一下！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 var testEditor; testEditor = editormd(&quot;test-editormd&quot;, { path : &quot;/static/plugins/editor-md/lib/&quot;, width: &quot;60%&quot;, //宽度 height: &quot;400px&quot;, //高 theme: &quot;dark&quot;,//工具栏主题 previewTheme: &quot;dark&quot;,//预览主题 editorTheme: &quot;pastel-on-dark&quot;,//编辑主题 markdown: &quot;&quot;, placeholder:'Markdown编辑，左边编写，右边预览', //默认显示的文字，这里就不解释了 watch : false, // 关闭实时预览 syncScrolling: &quot;single&quot;, codeFold: true, //toolbar : false, //关闭工具栏 //previewCodeHighlight : false, // 关闭预览 HTML 的代码块高亮，默认开启 saveHTMLToTextarea: true, // 保存 HTML 到 Textarea searchReplace: true, htmlDecode: &quot;style,script,iframe|on*&quot;, // 开启 HTML 标签解析，为了安全性，默认不开启 emoji: true, taskList: true, tocm: true, // Using [TOCM] tex: true, // 开启科学公式TeX语言支持，默认关闭 flowChart: true, // 开启流程图支持，默认关闭 sequenceDiagram: true, // 开启时序/序列图支持，默认关闭, /* { success : 0 | 1, //0表示上传失败;1表示上传成功 message : &quot;提示的信息&quot;, url : &quot;图片地址&quot; //上传成功时才返回 } */ imageUpload: true, imageFormats: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;webp&quot;], imageUploadURL: &quot;/Center/RichTextUpload&quot;, //dialogLockScreen : false, // 设置弹出层对话框不锁屏，全局通用，默认为true //dialogShowMask : false, // 设置弹出层对话框显示透明遮罩层，全局通用，默认为true //dialogDraggable : false, // 设置弹出层对话框不可拖动，全局通用，默认为true //dialogMaskOpacity : 0.4, // 设置透明遮罩层的透明度，全局通用，默认值为0.1 //dialogMaskBgColor : &quot;#000&quot;, // 设置透明遮罩层的背景颜色，全局通用，默认为#fff toolbarAutoFixed:true,//工具栏自动固定定位的开启与禁用 // toolbarIcons : function() { //自定义工具栏，后面有详细介绍 // return laofaneditormd.toolbarModes['simple']; // full, simple, mini // }, onload: function () { //console.log('onload', this); //this.fullscreen(); //this.unwatch(); //this.watch().fullscreen(); //this.setMarkdown(&quot;#PHP&quot;); //this.width(&quot;100%&quot;); //this.height(480); //this.resize(&quot;100%&quot;, 640); }}); //上面的挑有用的写上去就行 综上所述一个编辑器就诞生了，下面有几个小知识点，大家看一下，或许用得上。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455//跳转到行 $(&quot;#goto-line-btn&quot;).bind(&quot;click&quot;, function(){ laofaneditormd.gotoLine(5); }); //显示编辑器 $(&quot;#show-btn&quot;).bind('click', function(){ laofaneditormd.show(); }); //隐藏编辑器 $(&quot;#hide-btn&quot;).bind('click', function(){ laofaneditormd.hide(); }); //获取md $(&quot;#get-md-btn&quot;).bind('click', function(){ alert(laofaneditormd.getMarkdown()); }); //获取html $(&quot;#get-html-btn&quot;).bind('click', function() { alert(laofaneditormd.getHTML()); }); //打开右侧实时预览 $(&quot;#watch-btn&quot;).bind('click', function() { laofaneditormd.watch(); }); //关闭右侧实时预览 $(&quot;#unwatch-btn&quot;).bind('click', function() { laofaneditormd.unwatch(); }); //预览结果 $(&quot;#preview-btn&quot;).bind('click', function() { laofaneditormd.previewing(); }); //全屏 $(&quot;#fullscreen-btn&quot;).bind('click', function() { laofaneditormd.fullscreen(); }); //显示工具栏 $(&quot;#show-toolbar-btn&quot;).bind('click', function() { laofaneditormd.showToolbar(); }); //关闭工具栏 $(&quot;#close-toolbar-btn&quot;).bind('click', function() { laofaneditormd.hideToolbar(); }); //打开目录 $(&quot;#toc-menu-btn&quot;).click(function(){ laofaneditormd.config({ tocDropdown : true, tocTitle : &quot;目录 Table of Contents&quot;, }); }); //默认目录 $(&quot;#toc-default-btn&quot;).click(function() { laofaneditormd.config(&quot;tocDropdown&quot;, false); }); 五、页面展示Markdown文档后台给我们的文档，我们要展示成转换后的样子不能一大堆符号摆在页面上是吧，也不好看呀，所以下面放上展示代码需要的东西。 1、首先引入必要JS（下面不是所有的都必要） 123456789101112131415161718192021222324252627282930313233 &lt;link rel=&quot;stylesheet&quot; href=&quot;lib/js/editor.md-master/css/editormd.css&quot; /&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://pandao.github.io/editor.md/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt; &lt;script src=&quot;lib/js/jquery.min.js&quot;&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/js/editor.md-master/lib/marked.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/js/editor.md-master/lib/prettify.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/js/editor.md-master/lib/raphael.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/js/editor.md-master/lib/underscore.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/js/editor.md-master/lib/sequence-diagram.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/js/editor.md-master/lib/flowchart.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/js/editor.md-master/editormd.min.js&quot;&gt;&lt;/script&gt; //具体目录在你下载的文件里都能找到，对号入座 2、页面的div&lt;div id=&quot;layout&quot; class=&quot;editor&quot;&gt; &lt;div id=&quot;test-editormd&quot; &gt; &lt;textarea&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; 3、js代码testEditor = editormd.markdownToHTML(&quot;test-editormd&quot;, { markdown:$scope.apidetails.content, htmlDecode : &quot;style,script,iframe&quot;, // you can filter tags decode emoji : true, taskList : true, tex : true, // 默认不解析 flowChart : true, // 默认不解析 sequenceDiagram : true, // 默认不解析}); 六、自定义工具栏工具栏分为三组：full、simple、mini 这三个，可以选择，如果想更加自由选你所需，就可以用下面的代码，也可以看看官网的示例： 12345toolbarIcons : function() { // Or return editormd.toolbarModes[name]; // full, simple, mini // Using &quot;||&quot; set icons align right. return [&quot;undo&quot;, &quot;redo&quot;, &quot;|&quot;, &quot;bold&quot;, &quot;hr&quot;]}, 具体每一个标签代表的什么含义可以对照整个工具栏自己对一下，下面是它的源码： 12345t.toolbarModes={ full:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;bold&quot;,&quot;del&quot;,&quot;italic&quot;,&quot;quote&quot;,&quot;ucwords&quot;,&quot;uppercase&quot;,&quot;lowercase&quot;,&quot;|&quot;,&quot;h1&quot;,&quot;h2&quot;,&quot;h3&quot;,&quot;h4&quot;,&quot;h5&quot;,&quot;h6&quot;,&quot;|&quot;,&quot;list-ul&quot;,&quot;list-ol&quot;,&quot;hr&quot;,&quot;|&quot;,&quot;link&quot;,&quot;reference-link&quot;,&quot;image&quot;,&quot;code&quot;,&quot;preformatted-text&quot;,&quot;code-block&quot;,&quot;table&quot;,&quot;datetime&quot;,&quot;emoji&quot;,&quot;html-entities&quot;,&quot;pagebreak&quot;,&quot;|&quot;,&quot;goto-line&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;fullscreen&quot;,&quot;clear&quot;,&quot;search&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;], simple:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;bold&quot;,&quot;del&quot;,&quot;italic&quot;,&quot;quote&quot;,&quot;uppercase&quot;,&quot;lowercase&quot;,&quot;|&quot;,&quot;h1&quot;,&quot;h2&quot;,&quot;h3&quot;,&quot;h4&quot;,&quot;h5&quot;,&quot;h6&quot;,&quot;|&quot;,&quot;list-ul&quot;,&quot;list-ol&quot;,&quot;hr&quot;,&quot;|&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;fullscreen&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;], mini:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;]}","link":"/2021/11/21/Markdown-Editor/"},{"title":"Markdown 中嵌入HTML实现其他功能","text":"自从几年前开始在 GitHub 玩耍，接触到 Markdown 之后，就一发不可收拾，在各种文档编辑上，有条件用 Markdown 的尽量用，不能用的创造条件也要用——README、博客、公众号、接口文档等等全都是，比如当前这篇文章就是用 Markdown 编辑而成。 这几年也发现越来越多的网站和程序提供了对 Markdown 的支持，从最初接触的 GitHub、Jekyll，到简书、掘金、CSDN 等等，由此也从别人做得好的文档中，学到了一些『奇技淫巧』，所以本文不是对 Markdown 基础语法的介绍，而是一些相对高级、能将 Markdown 玩出更多花样的小技巧。 注：如下技巧大多是利用 Markdown 兼容部分 HTML 标签的特性来完成，不一定在所有网站和软件里都完全支持，主要以 GitHub 支持为准。 在表格单元格里换行借助于 HTML 里的 &lt;br /&gt; 实现。 示例代码： 123| Header1 | Header2 ||---------|----------------------------------|| item 1 | 1. one&lt;br /&gt;2. two&lt;br /&gt;3. three | 示例效果： Header1 Header2 item 1 1. one 2. two 3. three 图文混排使用 &lt;img&gt; 标签来贴图，然后指定 align 属性。 示例代码： 12345678910111213&lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot;/&gt;这是一个示例图片。图片显示在 N 段文字的右边。N 与图片高度有关。刷屏行。刷屏行。到这里应该不会受影响了，本行应该延伸到了图片的正下方，所以我要足够长才能确保不同的屏幕下都看到效果。 示例效果： 这是一个示例图片。 图片显示在 N 段文字的右边。 N 与图片高度有关。 刷屏行。 刷屏行。 到这里应该不会受影响了，本行应该延伸到了图片的正下方，所以我要足够长才能确保不同的屏幕下都看到效果。 控制图片大小和位置标准的 Markdown 图片标记 ![]() 无法指定图片的大小和位置，只能依赖默认的图片大小，默认居左。 而有时候源图太大想要缩小一点，或者想将图片居中，就仍需要借助 HTML 的标签来实现了。图片居中可以使用 &lt;div&gt; 标签加 align 属性来控制，图片宽高则用 width 和 height 来控制。 示例代码： 1234567**图片默认显示效果：**![](/images/posts/markdown/demo.png)**加以控制后的效果：**&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;65&quot; height=&quot;75&quot; src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot;/&gt;&lt;/div&gt; 示例效果： 图片默认显示效果： 加以控制后的效果： 格式化表格表格在渲染之后很整洁好看，但是在文件源码里却可能是这样的： 12345|Header1|Header2||---|---||a|a||ab|ab||abc|abc| 不知道你能不能忍，反正我是不能忍。 好在广大网友们的智慧是无穷的，在各种编辑器里为 Markdown 提供了表格格式化功能，比如我使用 Vim 编辑器，就有 vim-table-mode 插件，它能帮我自动将表格格式化成这样： 12345| Header1 | Header2 ||---------|---------|| a | a || ab | ab || abc | abc | 是不是看着舒服多了？ 如果你不使用 Vim，也没有关系，比如 Atom 编辑器的 markdown-table-formatter 插件，Sublime Text 3 的 MarkdownTableFormatter 等等，都提供了类似的解决方案。 使用 Emoji这个是 GitHub 对标准 Markdown 标记之外的扩展了，用得好能让文字生动一些。 示例代码： 1我和我的小伙伴们都笑了。:smile: 示例效果： 我和我的小伙伴们都笑了。 更多可用 Emoji 代码参见 https://www.webpagefx.com/tools/emoji-cheat-sheet/。 行首缩进直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，&amp;ensp; 代表半角空格，&amp;emsp; 代表全角空格。 示例代码： 1&amp;emsp;&amp;emsp;春天来了，又到了万物复苏的季节。 示例效果： 春天来了，又到了万物复苏的季节。 展示数学公式如果是在 GitHub Pages，可以参考 http://wanguolin.github.io/mathmatics_rending/ 使用 MathJax 来优雅地展示数学公式（非图片）。 如果是在 GitHub 项目的 README 等地方，目前我能找到的方案只能是贴图了，以下是一种比较方便的贴图方案： 在 https://www.codecogs.com/latex/eqneditor.php 网页上部的输入框里输入 LaTeX 公式，比如 $$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$； 在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24； 在文档需要的地方使用以上 URL 贴图，比如 1![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24) 示例效果： 任务列表在 GitHub 和 GitLab 等网站，除了可以使用有序列表和无序列表外，还可以使用任务列表，很适合要列出一些清单的场景。 示例代码： 1234567**购物清单**- [ ] 一次性水杯- [x] 西瓜- [ ] 豆浆- [x] 可口可乐- [ ] 小茗同学 示例效果： 购物清单 [ ] 一次性水杯 [x] 西瓜 [ ] 豆浆 [x] 可口可乐 [ ] 小茗同学 自动维护目录有时候维护一份比较长的文档，希望能够自动根据文档中的标题生成目录（Table of Contents），并且当标题有变化时自动更新目录，能减轻工作量，也不易出错。 如果你使用 Vim 编辑器，那可以使用我维护的插件 vim-markdown-toc 来帮你完美地解决此事： 插件地址：https://github.com/mzlogin/vim-markdown-toc 如果你使用其它编辑器，一般也能找到对应的解决方案，比如 Atom 编辑器的 markdown-toc 插件，Sublime Text 的 MarkdownTOC 插件等。","link":"/2020/11/20/Markdown-3/"},{"title":"用 Vim 编辑 Markdown 时直接粘贴图片","text":"我习惯使用 Vim 编辑 Markdown 文件，一直存在一个痛点就是粘贴图片很不方便。 前后对比我以前常用的操作流程： 复制图片/截图； 在保存图片对话框里一层层点选保存路径，输入文件名保存； 回到 Vim 里，手动输入引用图片的表达式。第 2 步和第 3 步是比较痛苦的，尤其是文件路径比较深的时候，可能要点选好几次。 最近偶然发现的一个外国小伙写的插件 md-img-paste.vim，能比较好地解决这个问题。现在的操作流程： 复制图片/截图； 在 Vim 里输入图片相对路径，自动保存图片并插入引用图片的表达式。 注：也可以直接回车，会按默认规则生成文件名。 效果演示： 使用方法安装这个插件没有其它依赖，使用自己习惯的插件管理方式安装就好。 比如我使用 Vundle，在 vimrc 里添加如下内容，然后 :so $MYVIMRC 再 :PluginInstall 就好了。 1Plugin 'ferrine/md-img-paste.vim' 配置插件没有给粘贴剪贴板里的图片的操作绑定默认快捷键，需要自己绑定一下，比如我是绑定到 &lt;leader&gt;i： 1autocmd FileType markdown nmap &lt;buffer&gt;&lt;silent&gt; &lt;leader&gt;i :call mdip#MarkdownClipboardImage()&lt;CR&gt; 另外还有两个可选配置项： 12let g:mdip_imgdir = '.'&quot; let g:mdip_imgname = 'image' g:mdip_imgdir 对应图片保存路径前缀。我设置为了 .，然后总是输入相对当前文件的路径； g:mdip_imgname 对应图片保存时的缺省文件名前缀，即粘贴图片时，如果不输入文件名直接回车，将保存为 &lt;前缀&gt;_日期-时间.png 名称的文件。我的完整 Vim 配置文件托管在 GitHub，供参考。 It’s done, enjoy it.","link":"/2021/05/20/Vim-Markdown/"},{"title":"Base64编码原理解析","text":"在制作v2订阅链接时经常需要使用到base64编码 1. Base64 是什么 Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2^6=64，所以每 6 个比特为一个单元，对应某个可打印字符。3 个字节有 24 个比特，对应于 4 个 Base64 单元，即 3 个字节可由 4 个可打印字符来表示。 ——维基百科 它不是一种加解密技术，是一种简单的编解码技术。 Base64 常用于表示、传输、存储二进制数据，也可以用于将一些含有特殊字符的文本内容编码，以便传输。 比如： 在电子邮件的传输中，Base64 可以用来将 binary 的字节序列，比如附件，编码成 ASCII 字节序列； 将一些体积不大的图片 Base64 编码后，直接内嵌到网页源码里； 将要传递给 HTTP 请求的参数做简单的转换，降低肉眼可读性； 注：用于 URL 的 Base64 非标准 Base64，是一种变种。 网友们在论坛等公开场合习惯将邮箱地址 Base64 后再发出来，防止被爬虫抓取后发送垃圾邮件。 2. Base64 编码原理标准 Base64 里的 64 个可打印字符是 A-Za-z0-9+/，分别依次对应索引值 0-63。索引表如下：编码时，每 3 个字节一组，共 8bit*3=24bit，划分成 4 组，即每 6bit 代表一个编码后的索引值，划分如下图所示：这样可能不太直观，举个例子就容易理解了。比如我们对 cat 进行编码：可以看到 cat 编码后变成了 Y2F0。 如果待编码内容的字节数不是 3 的整数倍，那需要进行一些额外的处理。 如果最后剩下 1 个字节，那么将补 4 个 0 位，编码成 2 个 Base64 字符，然后补两个 =：如果最后剩下 2 个字节，那么将补 2 个 0 位，编码成 3 个 Base64 字符，然后补一个 =： 3. 实现一个简易的 Base64 编码器讲完原理，我们就可以动手实现一个简易的标准 Base64 编码器了，以下是我参考 Java 8 的 java.util.Base64 乱写的一个 Java 版本，仅供参考，主要功能代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public class CustomBase64Encoder { /** * 索引表 */ private static final char[] sBase64 = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; /** * 将 byte[] 进行 Base64 编码并返回字符串 * @param src 原文 * @return 编码后的字符串 */ public static String encode(byte[] src) { if (src == null) { return null; } byte[] dst = new byte[(src.length + 2) / 3 * 4]; int index = 0; // 每次将 3 个字节编码为 4 个字节 for (int i = 0; i &lt; (src.length / 3 * 3); i += 3) { int bits = (src[i] &amp; 0xff) &lt;&lt; 16 | (src[i + 1] &amp; 0xff) &lt;&lt; 8 | (src[i + 2] &amp; 0xff); dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 18) &amp; 0x3f]; dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 12) &amp; 0x3f]; dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f]; dst[index++] = (byte) sBase64[bits &amp; 0x3f]; } // 处理剩下的 1 个或 2 个字节 if (src.length % 3 == 1) { int bits = (src[src.length - 1] &amp; 0xff) &lt;&lt; 4; dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f]; dst[index++] = (byte) sBase64[bits &amp; 0x3f]; dst[index++] = '='; dst[index] = '='; } else if (src.length % 3 == 2) { int bits = (src[src.length - 2] &amp; 0xff) &lt;&lt; 10 | (src[src.length - 1] &amp; 0xff) &lt;&lt; 2; dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 12) &amp; 0x3f]; dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f]; dst[index++] = (byte) sBase64[bits &amp; 0x3f]; dst[index] = '='; } return new String(dst); }} 这部分源码我也上传到 GitHub 仓库 https://github.com/mzlogin/spring-practices 的 base64test 工程里了 4. 其它知识点4.1 为什么有的编码结果带回车在电子邮件中，根据 RFC 822 规定，每 76 个字符需要加上一个回车换行，所以有些编码器实现，比如 sun.misc.BASE64Encoder.encode，是带回车的，还有 java.util.Base64.Encoder.RFC2045，是带回车换行的，每行 76 个字符。 4.2 Base64 的变种除了标准 Base64 之外，还有一些其它的 Base64 变种。 比如在 URL 的应用场景中，因为标准 Base64 索引表中的 / 和 + 会被 URLEncoder 转义成 %XX 形式，但 % 是 SQL 中的通配符，直接用于数据库操作会有问题。此时可以采用 URL Safe 的编码器，索引表中的 /+ 被换成 -_，比如 java.util.Base64.Encoder.RFC4648_URLSAFE 就是这样的实现。 5. 参考链接https://zh.wikipedia.org/zh-hans/Base64https://www.liaoxuefeng.com/wiki/897692888725344/949441536192576","link":"/2021/11/20/base64/"},{"title":"Docker超详细基础教程","text":"一.Docker介绍 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）。 二.Docker的基本操作2.1基本准备这篇文章中我的运行环境都是在CentOS7中运行。 2.2安装Docker 121.下载关于Docker的依赖环境yum -y install yum-utils device-mapper-persistent-data lvm2 122.设置下载Docker的镜像源yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 12yum makecache fastyum -y install docker-ce 12345674.启动Docker，并设置为开机自动启动，测试# 启动Docker服务systemctl start docker# 设置开机自动启动systemctl enable docker# 测试docker run hello-world 2.3 Docker的中央仓库 Docker官方的中央仓库: 这个仓库是镜像最全的，但是下载速度较慢。https://hub.docker.com/ 国内的镜像网站：网易蜂巢、daoCloud。。。https://c.163yun.com/hub#/homehttps://hub.daocloud.io/ (推荐使用) 在公司内部会采用私服的方式拉取镜像。(添加配置)12345678910# 需要在/etc/docker/daemon.json{ &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [&quot;ip:port]}# ip:port公司私服的ip和port# 重启两个服务systemctl daemon-reloadsystemctl restart docker 2.4 镜像的操作1234# 1. 拉取镜像到本地docker pull 镜像名称[:tag]# 举个例子 tomcatdocker pull daocloud.io/library/tomcat:8.5.15-jre8 12# 2. 查看全部本地的镜像docker images 12# 3. 删除本地镜像docker rmi 镜像的标识 1234567# 4. 镜像的导入导出(不规范)# 将本地的镜像导出docker save -o 导出的路径 镜像id# 加载本地的镜像文件docker load -i 镜像文件# 修改镜像名称docker tag 镜像id 新镜像名称:版本 2.5 容器的操作12345678# 1. 运行容器# 简单操作docker run 镜像的标识|镜像名称[tag]# 常用的参数docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[tag]# -d: 代表后台运行容器# -p: 宿主机端口:容器端口: 为了映射当前Linux的端口和容器的端口# --name 容器名称: 指定容器的名称 1234567891011# 2. 查看正在运行的容器docker ps [OPTIONS]# OPTIONS说明:# -a: 代表查看全部的容器，包括没有运行# -q: 只查看容器的标识# -f: 根据条件过滤显示的内容# --format: 指定返回值的模板文件# -l: 显示最近创建的容器# -n: 列出最近创建的n个容器# --no-trunc: 不截断输出# -s: 显示总的文件大小 123# 3. 查看容器的日志docker logs -f 容器id# -f: 可以滚动查看日志的最后几行 12# 4. 进入到容器内部docker exec -it 容器id bash 123456789# 5. 删除容器(删除容器前，需要先停止容器)docker stop 容器id# 停止指定的容器docker stop $(docker ps -qa)# 停止全部容器docker rm 镜像id# 删除指定容器docker rm $(docker ps -qa)# 删除全部容器 12#6. 启动容器docker start 容器id 三.Docker应用3.1 准备SSM工程12345# MySQL数据库的连接用户名和密码改变了，修改db.propreties# 项目重新打包mvn clean package -DskipTests# 项目地址链接: https://pan.baidu.com/s/1F4xTLoOFCMb7rl1VUrBASA 密码: bgjw 3.2 准备MySQL容器12# 运行MySQL容器docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4 3.3 准备Tomcat容器12345# 运行Tomcat容器，在上面容器操作中已经搞定，只需要将SSM项目的war包部署到Tomcat容器内部# 可以通过命令将宿主机的内容复制到容器内部docker cp 文件名称 容器id:容器内部路径# 举个例子docker cp ssm.war fe:/usr/local/tomcat/webapps/ 四.Docker自定义镜像中央仓库上的镜像，也是Docker的用户自己上传过去的。123456789# 1. 创建一个Dockerfile文件，并且指定自定义镜像信息。# Dockerfile文件中常用的内容from: 指定当前自定义镜像依赖的环境copy: 将相对路径下的内容复制到自定义镜像中workdir: 声明镜像的默认工作目录cmd: 需要执行的命令(在workdir下执行的，cmd可以写多个，只以最后一个为准)# 举个例子，自定义一个tomcat镜像，并且将ssm.war部署到tomcat中from daocloud.io/library/tomcat:8.5.15-jre8copy ssm.war /usr/local/tomcat/webapps 12# 2. 将准备好的Dockerfile和相应的文件拖拽到Linux操作系统中，通过Docker的命令制作镜像docker build -t 镜像名称:[tag] . 五.Docker-Compose之前运行一个镜像，需要添加大量的参数。可以通过Docker-Compose编写这些参数。Docker-Compose可以帮助我们批量的管理容器。只需要通过一个docker-compose.yml文件去维护即可。5.1 下载Docker-Compose12345678910111213141516171819# 1. 去Github官网搜索docker-compose，下载1.24.1版本的Docker-Composehttps://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64# 2. 将下载好的文件拖拽到Linux系统中将文件上传到你所使用的服务器或者虚拟机，然后将文件移动到/usr/local# 3. 需要将Docker-Compose文件的名称修改一下，基于Docker-Compose文件一个可执行的权限mv docker-compose-Linux-x86_64 docker-composechmod 777 docker-compose# 4. 方便后期操作，配置一个环境变量# 将docker-compose文件移动到了/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到了PATH中mv docker-compose /usr/local/binvi /etc/profileexport PATH=/usr/local/bin:$PATHsource /etc/profile# 5. 测试一下# 在任意目录下输入docker-compose 5.2 Docker-Compose管理MySQL和Tomcat容器 yml文件以key:value方式来指定配置信息 多个配置信息以换行+缩进的方式来区分 在docker-compose.yml文件中，不要使用制表符 version: ‘3.1’ services: mysql: # 服务的名称 restart: always # 代表只要Docker启动，那么这个容器就跟着一起启动 image: daocloud.io/library/mysql:5.7.4 # 指定镜像路径 container_name: mysql # 指定容器名称 ports: - 3306:3306 # 指定端口号的映射 environment: MYSQL_ROOT_PASSWORD: root # 指定MySQL的ROOT用户登录密码 TZ: Asia/Shanghai # 指定时区 volumes: - /opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql # 映射数据卷 tomcat: restart: always # 代表只要Docker启动，那么这个容器就跟着一起启动 image: daocloud.io/library/tomcat:8.5.15-jre8 # 指定镜像路径 container_name: tomcat # 指定容器名称 ports: - 8080:8080 # 指定端口号的映射 environment: MYSQL_ROOT_PASSWORD: root # 指定MySQL的ROOT用户登录密码 TZ: Asia/Shanghai # 指定时区 volumes: - /opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps # 映射数据卷 - /opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/ logs # 映射数据卷 5.3 使用docker-compose命令管理容器 在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml 12# 1. 基于docker-compose.yml启动管理的容器docker-compose up -d 12# 2. 关闭并删除容器docker-compose down 12# 3. 开启 | 关闭 | 重启已经存在的由docker-compose维护的容器docker-compose start | stop | restart 12# 4. 查看由docker-compose管理的容器docker-compose ps 12# 5. 查看日志docker-compose logs -f 5.4 docker-compose配置Dockerfile使用 使用docker-compose.yml文件以及Dockerfile文件在生产自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器 docker-compose.yml 1234567891011121314# yml文件version: '3.1'services: ssm: restart: always build: # 构建自定义镜像 context: ../. # 指定dockerfile文件的所在路径 dockerfile: Dockerfile # 指定Dockerfile文件名称 image: ssm:1.0.1 container_name: ssm ports: - 8081:8080 environment: TZ: Asia/Shanghai Dockerfile文件 12from daocloud.io/library/tomcat:8.5.15-jre8copy ssm.war /usr/local/tomcat/webapps 12345678# 可以直接启动基于docker-compose.yml以及Dockerfile文件构建的自定义镜像dockr-compose up -d# 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像# 重新构建的话# 重新构建自定义镜像docker-compose build# 运行前，重新构建docker-compose up -d --build","link":"/2020/11/17/docker/"},{"title":"V2RAY一键部署脚本","text":"此安装脚本除了可以安装V2以外，亦可以安装SS，MTP，Socks5，简单好用； 一键安装命令： Debian/Ubuntu apt-get update apt-get install curl -y bash &lt;(curl -s -L https://git.io/v2ray.sh) Centos yum update yum install curl -y bash &lt;(curl -s -L https://git.io/v2ray.sh) 根据提示选择需要的选项安装即可； 管理面板命令： v2ray 安装过程 1. 安装 卸载 请选择 [1-2]:1 请选择 V2Ray 传输协议 [1-32] TCP TCP_HTTP WebSocket WebSocket + TLS HTTP/2 mKCP mKCP_utp mKCP_srtp mKCP_wechat-video mKCP_dtls mKCP_wireguard QUIC QUIC_utp QUIC_srtp QUIC_wechat-video QUIC_dtls QUIC_wireguard TCP_dynamicPort TCP_HTTP_dynamicPort WebSocket_dynamicPort mKCP_dynamicPort mKCP_utp_dynamicPort mKCP_srtp_dynamicPort mKCP_wechat-video_dynamicPort ….准备安装了咯..看看有毛有配置正确了… ———- 安装信息 ————- V2Ray 传输协议 = TCP V2Ray 端口 = 64057 是否配置 Shadowsocks = 未配置 ———- END ————- 按 Enter 回车键 继续….或按 Ctrl + C 取消.安装结果 ---------- V2Ray 配置信息 ------------- 地址 (Address) = xx.xx.xx.xx 端口 (Port) = 64057 用户ID (User ID / UUID) = 35b4eee6-d90b-4e9f-bab9-c1266f2ad8c0 额外ID (Alter Id) = 233 传输协议 (Network) = tcp 伪装类型 (header type) = none ---------- END ------------- 提示: 输入 v2ray url 可生成 vmess URL 链接 / 输入 v2ray qr 可生成二维码链接 管理脚本 ## V2Ray 版本: v4.21.3 / V2Ray 状态: 正在运行 ## 1. 查看 V2Ray 配置 2. 修改 V2Ray 配置 3. 下载 V2Ray 配置 / 生成配置信息链接 / 生成二维码链接 4. 查看 Shadowsocks 配置 / 生成二维码链接 5. 修改 Shadowsocks 配置 6. 查看 MTProto 配置 / 修改 MTProto 配置 7. 查看 Socks5 配置 / 修改 Socks5 配置 8. 启动 / 停止 / 重启 / 查看日志 9. 更新 V2Ray / 更新 V2Ray 管理脚本 10. 卸载 V2Ray 11. 其他 温馨提示...如果你不想执行选项...按 Ctrl + C 即可退出 请选择菜单 [1-11]:","link":"/2021/10/31/V2RAY/"},{"title":"下载GitHub上单个文件(夹)","text":"方法一：SVN-下载单个文件夹 个人最适应的方法，缺点是需要借助第三方工具-svn 环境：Windows 10 ​ 若想要下载{username}的{repo}里的{dir}文件夹， 主分支master（现在似乎默认是main了，区别不大）： 其浏览器路径应为https://github.com/{username}/{repo}/tree/master/{dir} 修改/tree/master/为/trunk/ 打开cmd，输入指令：svn checkout https://github.com/{username}/{repo}/trunk/{dir} 该{dir}将被下载至当前目录下 示例 特定分支 将/trunk/换成/branches/{branch_name}即可 方法二：高版本 Git 这个方法较为繁琐，但无需像前者一样借助其它工具 方法：Git 的Sparse Checkout模式，指定文件/文件夹 创建空的本地仓库，并将远程 Git Server URL 加入到 Git Config里 none 1234mkdir project_foldercd project_foldergit initgit remote add -f origin &lt;repo-url&gt; 在 Config 中设置允许使用Sparse Checkout模式 none 1git config core.sparsecheckout true 在.git/info/目录下新建sparse-checkout文件（注意文件名不要错了），写入需要的文件（一行为一项） 如： none 12/source/tools/index.html/source/about 以正常方式从服务器pull下来即可 none 1git pull origin master 方法三：利用 DownGit 工具","link":"/2021/11/20/downgit/"},{"title":"使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源（二）","text":"之前写过一篇 使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源，在那之后，又陆续想到并实施了几点利用 jsDelivr 进一步加速静态资源加载的措施，新起一篇作为记录和分享。 继上一轮改造过后，比较拖页面加载速度的主要有三点： 页面首个请求响应时间； 图片资源加载时间； 站内搜索引用的 JSON 资源加载时间。 第 1 点在页面仍然托管在 GitHub Pages 的前提下，似乎没有什么好办法能产生质的飞跃；本篇主要改善了第 2 点和第 3 点。 0x01 图片资源加速这里所说的图片主要是指文章里引用的图片。 我一直将图片放在博客源码根目录的 images 文件夹下，引用图片的习惯写法是这样的： 1![after use cdn](/images/posts/github/cdn-after.png) 如果想将这个图片地址替换为 jsDelivr 的地址，需要做的就是将 /images 替换为 https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images 一处一处替换行不行？当然也行，但后面写新文章时要引用图片，还得手动写这一长串，不方便；万一 jsDeliver 出状况，也不好一键切换回来。有没有一劳永逸的方法？当然也有，我们从 Jekyll 的 layout 机制来想办法。 Jekyll 的 layout 可以理解为页面模板，它是可以继承的，比如我的博客的所有页面模板有一个共同的祖先模板 _layouts/default.html，模板里可以使用 Liquid 语法对内容进行处理，我们可以利用这一点，来自动完成批量替换的工作。 关键代码如下： 12345678{% assign assets_base_url = site.url %}{% if site.cdn.jsdelivr.enabled %}{% assign assets_base_url = &quot;https://cdn.jsdelivr.net/gh/&quot; | append: site.repository | append: '@master' %}{% endif %}{% assign assets_images_url = 'src=&quot;' | append: assets_base_url | append: &quot;/images&quot; %}{% include header.html %} {{ content | replace: 'src=&quot;/images', assets_images_url }}{% include footer.html %} 大意就是，如果打开了启用 jsDelivr 加速的开关，就将 content 里的 src=”/images” 替换为 src=”https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images&quot;，否则替换为 src=”https://mazhuang.org/images&quot; 以上便达成了我们的目的 0x02 站内搜索引用的 JSON 资源加速我是使用 Simple-Jekyll-Search 这个 JavaScript 库来实现站内搜索的，它的搜索数据是来自一个动态生成的 JSON 文件。 这个 JSON 文件编译前长这样： https://github.com/mzlogin/mzlogin.github.io/blob/master/assets/search_data.json Jekyll 编译后长这样： https://mazhuang.org/assets/search_data.json 这样的资源是没有办法直接通过替换网址来用 jsDelivr 加速的，因为 jsDelivr 上缓存的是编译前的文件，而我们需要的是编译后的。 那我们就想办法： 将博客源码编译；将编译结果保存到另一个分支；通过 jsDelivr 引用新分支上的这个文件。这些步骤可以通过 GitHub 去年推出的新特性 Actions 来完成，在我们每一次向博客源码仓库 push 代码时自动触发。 关键步骤如下： 在 GitHub 新建一个 Personal access Token： Settings –&gt; Developer settings –&gt; Personal access tokens –&gt; Generate new token –&gt; 填写 note，勾选 public_repo，生成之后复制 token 值备用。 在博客源码仓库的 Settings –&gt; Secrets –&gt; New secret，Name 填 ACCESS_TOKEN，Value 填第 1 步里复制的 token 值； 在博客源码根目录下新建文件 .github/workflows/ci.yml，内容如下： 123456789101112131415161718192021222324252627282930313233name: Build and Deployon: push: branches: [ master ]jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2.3.1 with: persist-credentials: false - name: Set Ruby 2.7 uses: actions/setup-ruby@v1 with: ruby-version: 2.7 - name: Install and Build run: | gem install bundler bundle install bundle exec jekyll build - name: Deploy uses: JamesIves/github-pages-deploy-action@3.6.2 with: ACCESS_TOKEN: $ BRANCH: built FOLDER: _site CLEAN: true 大意就是在向 master 分支 push 代码时，自动执行 checkout、初始化 ruby 环境、安装 Jekyll 并编译博客源码的工作，最后将编译生成的 _site 目录里的内容推送到 built 分支。对 GitHub Actions 感兴趣的同学可以自行参考官方说明学习 修改引用 JSON 文件的地方，比如我的 _includes/sidebar-search.html 里的写法由： 1json: 'https://mazhuang.org/assets/search_data.json', 改为了 12345{% if site.cdn.jsdelivr.enabled and site.url contains 'mazhuang.org' %} json: 'https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@built/assets/search_data.json',{% else %} json: '{{ site.url }}/assets/search_data.json',{% endif %} 将以上更改推送到源码仓库，等待处理完成即可。","link":"/2021/03/10/jsDelivr-2/"},{"title":"使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源","text":"挺久以前就有网友给我的 GitHub Pages 博客模板提 Issue，说希望能增加 CDN 用于加速静态资源的加载，由于懒，一直没有动。 最近偶尔要打开自己博客看下 Wiki 的时候，要等挺久，比较痛苦，碰巧昨天晚上看到这样一篇帖子：GitHub 图床的正确用法，通过 jsDelivr CDN 全球加速，感觉很适合我的需求场景，于是决定趁这几天休假将这个改造一下。 先看效果以下改造前后的加载情况都是在 Edge 浏览器禁用缓存后录制的，录制时间段很接近，从本地访问两个 GitHub Pages 服务的原始响应速度应该类似。 改造前加载 注：由于改造前没有保留加载图，所以这是截的一个使用相同模板的朋友的首页加载情况。 可以看到耗时最长的两个请求时间达到了 12 秒左右，而且很多资源的加载时间在 1 秒以上，页面完成加载时间长达 15 秒多……估计一般的访客是没这个耐心等待的。 改造后加载 这样一对比效果还是很明显的。改造过后耗时最长的是两个没办法走 CDN 的请求，而走 CDN 的那些资源加载时间基本都没超过 60 毫秒，页面完成加载时间缩短到了 3 秒以内。 当然，因为页面自身还是在 GitHub Pages 托管，有时候首个请求还是会挺久才返回。 改造后的效果可以打开 https://mazhuang.org 体验。 方案考虑优化独立博客的加载速度有一些不同的思路，对应不同的方案： 优化博客代码，精简需要加载的资源； 将博客部署到国内访问快的服务器上； 部署到国内的代码托管平台，比如 Gitee 和 Coding 等； 采用 CDN 加速；其中 2 和 3 我不想考虑，还是期望只在 GitHub 上管理博客，所以 1 和 4 是优化方向，本文对应的就是 4 的部分。 而采用 CDN 加速的方案，可以考虑 将公共库改为直接引用公共 CDN 链接； 自己编写和修改的静态资源自己去托管在一个 CDN 服务上。 有一些 CDN 服务商提供一定的免费额度，可以按喜好选用，或者选择付费服务。这里我没有纠结，看完文首提到的那篇文章，去看了下 jsDelivr 的介绍后觉得靠谱：它原生支持使用 GitHub 项目里的资源，什么都不用配置，更重要的是免费，在国内有节点，而且速度还不错（官网上也把 works in China 作为一个卖点的），遂决定直接用它。 jsDelivr 支持的 GitHub 资源的方式jsDelivr 对 GitHub 的支持是作为重要特性来宣传的，官网的介绍链接：https://www.jsdelivr.com/features#gh 以下是一些认为需要了解的知识的小结： 这里以我托管博客的 GitHub 仓库为例，地址是 https://github.com/mzlogin/mzlogin.github.io，那它里面的资源可以直接以 https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/ + 仓库里的文件路径 来访问。 比如仓库里有一个 js 文件 assets/js/main.js，那么它可以用 CDN 链接 https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/assets/js/main.js 来访问。 另外还支持一些高级用法，比如： 指定 release 版本号/提交 sha1/分支名称，例如指定获取该仓库的名称为 1.2.0 或 v1.2.0 的 release 版本资源：1https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js 如果指定版本为 1 或者 1.2，那它会自动匹配到这个范围内的最新版本号。 也可以不指定版本或者指定版本为 latest，这样总是使用最新版本的资源。 压缩资源，在 js/css 文件后缀前面加上 .min：1https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.min.js 合并多个文件，用 combine/file1,file2,file3 格式的链接：1https://cdn.jsdelivr.net/combine/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.min.js,gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/simple-jekyll-search.min.js 压缩资源、合并文件的 CDN 链接在第一次有人访问时可能比较慢，后面再有人访问就快了。 其它知识点： 可以通过 https://cdn.jsdelivr.net/combine/gh/mzlogin/mzlogin.github.io[@&lt;版本号&gt;]/[&lt;文件夹&gt;/] 这样的路径浏览缓存文件列表； 可以访问 https://purge.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js 来清除指定文件的缓存；（将引用的 CDN 链接里的 cdn 改成 purge 就是了） 可以访问 https://data.jsdelivr.com/v1/package/gh/mzlogin/mzlogin.github.io 来查看 CDN 上的 tags 和 versions 列表，更多数据接口参数参见 https://github.com/jsdelivr/data.jsdelivr.com。 改造步骤下面是记录具体改造博客模板的步骤： 在 _config.yml 文件中添加控制开关： 1234# 对 css 和 js 资源的 cdn 加速配置cdn: jsdelivr: enabled: true 修改 _layouts 里的文件，给名为 assets_base_url 的变量赋值，用它来代表加载静态资源的根路径： 1234{% assign assets_base_url = site.url %}{% if site.cdn.jsdelivr.enabled %} {% assign assets_base_url = &quot;https://cdn.jsdelivr.net/gh/&quot; | append: site.repository | append: '@master' %}{% endif %}修改以前直接用 拼接的静态资源引用链接，替换为 ，比如 _includes/header.html 里： 12- &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ site.url }}/assets/css/posts/index.css&quot;&gt;+ &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ assets_base_url }}/assets/css/posts/index.css&quot;&gt;这样万一哪天 CDN 出了点什么状况，我们也可以很方便地通过一个开关就切回自已的资源链接恢复服务。","link":"/2021/03/20/jsDelivr/"},{"title":"Linux远程管理常用命令","text":"收集了一些常用的终端命令，便于需要时使用。本文主要包括： 关机/重启 查看或配置网卡信息 远程登录和复制文件 关机/重启序号 命令 对应英文 作用01 shutdown 选项 时间 shutdown 关机／重新启动shutdownshutdown 命令可以 安全 关闭 或者 重新启动系统选项 含义 r 重新启动提示： 不指定选项和参数，默认表示 1 分钟之后 关闭电脑远程维护服务器时，最好不要关闭系统，而应该重新启动系统常用命令示例 重新启动操作系统，其中 now 表示现在$ shutdown -r now 立刻关机，其中 now 表示现在$ shutdown now 系统在今天的 20:25 会关机$ shutdown 20:25 系统再过十分钟后自动关机$ shutdown +10 取消之前指定的关机计划$ shutdown -c 查看或配置网卡信息序号 命令 对应英文 作用01 ifconfig configure a network interface 查看/配置计算机当前的网卡配置信息02 ping ip地址 ping 检测到目标 ip地址 的连接是否正常网卡 和 IP 地址网卡网卡是一个专门负责网络通讯的硬件设备IP 地址是设置在网卡上的地址信息我们可以把 电脑 比作 电话，网卡 相当于 SIM 卡，IP 地址 相当于 电话号码 IP 地址每台联网的电脑上都有 IP 地址，是保证电脑之间正常通讯的重要设置注意：每台电脑的 IP 地址不能相同，否则会出现 IP 地址冲突，并且没有办法正常通讯 ifconfigifconfig 可以查看／配置计算机当前的网卡配置信息 查看网卡配置信息$ ifconfig 查看网卡对应的 IP 地址$ ifconfig | grep inet提示：一台计算机中有可能会有一个 物理网卡 和 多个虚拟网卡，在 Linux 中物理网卡的名字通常以 ensXX 表示 127.0.0.1 被称为 本地回环/环回地址，一般用来测试本机网卡是否正常ping 检测到目标主机是否连接正常$ ping IP地址 检测本地网卡工作正常$ ping 127.0.0.1ping 一般用于检测当前计算机到目标计算机之间的网络 是否通畅，数值越大，速度越慢ping 的工作原理与潜水艇的声纳相似，ping 这个命令就是取自 声纳的声音* 网络管理员之间也常将 ping 用作动词 —— ping 一下计算机X，看他是否开着原理：网络上的机器都有 唯一确定的 IP 地址，我们给目标 IP 地址发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在 提示：在 Linux 中，想要终止一个终端程序的执行，绝大多数都可以使用 CTRL + C 远程登录和复制文件序号 命令 对应英文 作用01 ssh 用户名@ip secure shell 关机／重新启动02 scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径 secure copy 远程复制文件ssh 基础在 Linux 中 SSH 是 非常常用 的工具，通过 SSH 客户端 我们可以连接到运行了 SSH 服务器 的远程机器上 001_SSH示意图SSH 客户端是一种使用 Secure Shell（SSH） 协议连接到远程计算机的软件程序SSH 是目前较可靠，专为远程登录会话和其他网络服务 提供安全性的协议利用 SSH 协议 可以有效防止远程管理过程中的信息泄露通过 SSH 协议 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗SSH 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度域名 和 端口号域名由一串 用点分隔 的名字组成，例如：www.itcast.cn是 IP 地址 的别名，方便用户记忆端口号IP 地址：通过 IP 地址 找到网络上的 计算机 端口号：通过 端口号 可以找到 计算机上运行的应用程序 SSH 服务器 的默认端口号是 22，如果是默认端口号，在连接的时候，可以省略 常见服务端口号列表： 序号 服务 端口号01 SSH 服务器 2202 Web 服务器 8003 HTTPS 44304 FTP 服务器 21SSH 客户端的简单使用ssh [-p port] user@remoteuser 是在远程机器上的用户名，如果不指定的话默认为当前用户remote 是远程机器的地址，可以是 IP／域名，或者是 后面会提到的别名port 是 SSH Server 监听的端口，如果不指定，就为默认值 22提示： 使用 exit 退出当前用户的登录注意： ssh 这个终端命令只能在 Linux 或者 UNIX 系统下使用 如果在 Windows 系统中，可以安装 PuTTY 或者 XShell 客户端软件即可 提示： 在工作中，SSH 服务器的端口号很有可能不是 22，如果遇到这种情况就需要使用 -p 选项，指定正确的端口号，否则无法正常连接到服务器 Windows 下 SSH 客户端的安装PuttyXShell建议从官方网站下载正式的安装程序 scpscp 就是 secure copy，是一个在 Linux 下用来进行 远程拷贝文件 的命令它的地址格式与 ssh 基本相同，需要注意的是，在指定端口时用的是大写的 -P 而不是小写的002_SCP示意图 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py注意：: 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径scp -P port 01.py user@remote:Desktop/01.py 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.pyscp -P port user@remote:Desktop/01.py 01.py 加上 -r 选项可以传送文件夹把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktopscp -r demo user@remote:Desktop 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹scp -r user@remote:Desktop demo选项 含义-r 若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名-P 若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口注意： scp 这个终端命令只能在 Linux 或者 UNIX 系统下使用如果在 Windows 系统中，可以安装 PuTTY，使用 pscp 命令行工具或者安装 FileZilla 使用 FTP 进行文件传输FileZilla官方网站：https://www.filezilla.cn/download/clientFileZilla 在传输文件时，使用的是 FTP 服务 而不是 SSH 服务，因此端口号应该设置为 21SSH 高级免密码登录配置别名提示：有关 SSH 配置信息都保存在用户家目录下的 .ssh 目录下 免密码登录步骤配置公钥 执行 ssh-keygen 即可生成 SSH 钥匙，一路回车即可上传公钥到服务器 执行 ssh-copy-id -p port user@remote，可以让远程服务器记住我们的公钥示意图003_SSH 免密码示意图非对称加密算法 使用 公钥 加密的数据，需要使用 私钥 解密使用 私钥 加密的数据，需要使用 公钥 解密配置别名每次都输入 ssh -p port user@remote，时间久了会觉得很麻烦，特别是当 user, remote 和 port 都得输入，而且还不好记忆 而 配置别名 可以让我们进一步偷懒，譬如用：ssh mac 来替代上面这么一长串，那么就在 ~/.ssh/config 里面追加以下内容： Host MacHostName ip地址User usernamePort 22保存之后，即可用 ssh mac 实现远程登录了，scp 同样可以使用","link":"/2020/11/12/linux/"},{"title":"Linux用户权限相关命令","text":"收集了一些常用的终端命令，便于需要时使用。本文主要包括： 用户 和 权限 的基本概念用户管理 终端命令组管理 终端命令修改权限 终端命令用户 和 权限 的基本概念 基本概念用户 是 Linux 系统工作中重要的一环，用户管理包括 用户 与 组 管理在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都必须拥有一个账号，并且对于不同的系统资源拥有不同的使用权限在 Linux 中，可以指定 每一个用户 针对 不同的文件或者目录 的 不同权限对 文件／目录 的权限包括：序号 权限 英文 缩写 数字代号01 读 read r 402 写 write w 203 执行 excute x 1 组为了方便用户管理，提出了 组 的概念，如下图所示 在实际应用中，可以预先针对 组 设置好权限，然后 将不同的用户添加到对应的组中，从而不用依次为每一个用户设置权限 ls -l 扩展ls -l 可以查看文件夹下文件的详细信息，从左到右依次是： 权限，第 1 个字符如果是 d 表示目录硬链接数，通俗地讲，就是有多少种方式，可以访问到当前目录／文件拥有者，家目录下 文件／目录 的拥有者通常都是当前用户组，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲大小时间名称chmod 简单使用（重要）chmod 可以修改 用户／组 对 文件／目录 的权限命令格式如下：chmod +/-rwx 文件名|目录名提示：以上方式会一次性修改 拥有者 / 组 权限 超级用户Linux 系统中的 root 账号通常 用于系统的维护和管理，对操作系统的所有资源 具有所有访问权限在大多数版本的 Linux 中，都不推荐 直接使用 root 账号登录系统在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户” sudosu 是 substitute user 的缩写，表示 使用另一个用户的身份sudo 命令用来以其他身份来执行命令，预设的身份为 root用户使用 sudo 时，必须先输入密码，之后有 5 分钟的有效期限，超过期限则必须重新输入密码若其未经授权的用户企图使用 sudo，则会发出警告邮件给管理员 组管理 终端命令提示：创建组 / 删除组 的终端命令都需要通过 sudo 执行 序号 命令 作用01 groupadd 组名 添加组02 groupdel 组名 删除组03 cat /etc/group 确认组信息04 chgrp -R 组名 文件/目录名 递归修改文件/目录的所属组提示： 组信息保存在 /etc/group 文件中/etc 目录是专门用来保存 系统配置信息 的目录在实际应用中，可以预先针对 组 设置好权限，然后 将不同的用户添加到对应的组中，从而不用依次为每一个用户设置权限 用户管理 终端命令提示：创建用户 / 删除用户 / 修改其他用户密码 的终端命令都需要通过 sudo 执行 3.1 创建用户／设置密码／删除用户序号 命令 作用 说明01 useradd -m -g 组 新建用户名 添加新用户 -m 自动建立用户家目录-g 指定用户所在的组，否则会建立一个和同名的组02 passwd 用户名 设置用户密码 如果是普通用户，直接用 passwd 可以修改自己的账户密码03 userdel -r 用户名 删除用户 -r 选项会自动删除用户家目录04 cat /etc/passwd grep 用户名 确认用户信息 新建用户后，用户信息会保存在 /etc/passwd 文件中提示： 创建用户时，如果忘记添加 -m 选项指定新用户的家目录 —— 最简单的方法就是删除用户，重新创建创建用户时，默认会创建一个和用户名同名的组名用户信息保存在 /etc/passwd 文件中 查看用户信息序号 命令 作用01 id [用户名] 查看用户 UID 和 GID 信息02 who 查看当前所有登录的用户列表03 whoami 查看当前登录用户的账户名passwd 文件/etc/passwd 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是 用户名密码（x，表示加密的密码）UID（用户标识）GID（组标识）用户全名或本地帐号家目录登录使用的 Shell，就是登录之后，使用的终端命令，ubuntu 默认是 dashusermodusermod 可以用来设置 用户 的 主组 ／ 附加组 和 登录 Shell，命令格式如下：主组：通常在新建用户时指定，在 etc/passwd 的第 4 列 GID 对应的组附加组：在 etc/group 中最后一列表示该组的用户列表，用于指定 用户的附加权限提示：设置了用户的附加组之后，需要重新登录才能生效！ 修改用户的主组（passwd 中的 GID）usermod -g 组 用户名 修改用户的附加组usermod -G 组 用户名 修改用户登录 Shellusermod -s /bin/bash 用户名注意：默认使用 useradd 添加的用户是没有权限使用 sudo 以 root 身份执行命令的，可以使用以下命令，将用户添加到 sudo 附加组中 usermod -G sudo 用户名 which（重要）提示 /etc/passwd 是用于保存用户信息的文件/usr/bin/passwd 是用于修改用户密码的程序which 命令可以查看执行命令所在位置，例如：which ls 输出/bin/lswhich useradd 输出/usr/sbin/useraddbin 和 sbin在 Linux 中，绝大多数可执行文件都是保存在 /bin、/sbin、/usr/bin、/usr/sbin/bin（binary）是二进制执行文件目录，主要用于具体应用/sbin（system binary）是系统管理员专用的二进制代码存放目录，主要用于系统管理/usr/bin（user commands for applications）后期安装的一些软件/usr/sbin（super user commands for applications）超级用户的一些管理程序提示： cd 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 which 无法找到 cd 命令的位置 切换用户序号 命令 作用 说明01 su - 用户名 切换用户，并且切换目录 - 可以切换到用户家目录，否则保持位置不变02 exit 退出当前登录账户su 不接用户名，可以切换到 root，但是不推荐使用，因为不安全exit 示意图如下： 修改文件权限序号 命令 作用01 chown 修改拥有者02 chgrp 修改组03 chmod 修改权限命令格式如下： 修改文件|目录的拥有者chown 用户名 文件名|目录名 递归修改文件|目录的组chgrp -R 组名 文件名|目录名 递归修改文件权限chmod -R 755 文件名|目录名chmod 在设置权限时，可以简单地使用三个数字分别对应 拥有者 ／ 组 和 其他 用户的权限 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他chmod +/-rwx 文件名|目录名常见数字组合有（u表示用户／g表示组／o表示其他）： 777 ===&gt; u=rwx,g=rwx,o=rwx* 755 ===&gt; u=rwx,g=rx,o=rx644 ===&gt; u=rw,g=r,o=r","link":"/2020/11/12/linuxuser/"},{"title":"mailu搭建域名邮箱","text":"Mailu是一个简单而功能齐全的邮件服务器，它使用Docker映像启动。它是免费软件,愿意接受建议和外部贡献。该项目旨在为人们提供便捷的设置，易于维护且功能齐全的邮件服务器. 主要的功能 基本的邮件服务器 IMAP IMAP+,SMTP和 进阶电子邮件功能 别名，域别名，自定义路由 Web访问 多个Webmail管理界面 用户功能 别名，自动回复，自动转发，获取帐户 管理员功能 全局管理员，公告，每域配额 安全 强制启用TLS，Letsencrypt！，DKIM，防病毒扫描程序 反垃圾邮件 自主学习 灰名单 DMARC 和 SPF 全部组件安装的资源占用 安装之前的准备 25端口首先,你要确保你的服务器开启了25端口 检测方法: telnet smtp.aol.com 25正确回响 Trying 67.195.228.102…Connected to smtp.aol.g03.yahoodns.net.Escape character is ‘^]’.220 smtp.mail.yahoo.com ESMTP ready修改主机名编辑/etc/hosts 添加 YourServerIP 长主机名 短主机名之后执行 echo “主机名” &gt; /etc/hostnamehostname -F /etc/hostname设置DNS将根域名设置任意一个A记录 将mail.YourDomain(例如mail.moec.top)设置A记录到你的服务器IP 为根域名(moec.top)设置MX记录,指向mail.moec.top 设置SPF:将根域名(moec.top)设置TXT记录为 v=spf1 mx ~all 设置DMARC:将_dmarc.YourDomain(_dmarc.moec.top)设置TXT解析 值为v=DMARC1; p=none; pct=100; rua=mailto:admin@YourDomain 安装 1.安装Docker和Docker ComposeDocker安装: wget -qO- https://get.docker.com/ | bashDocker Compose安装: curl -L “https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)” -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose2. Mailu配置获取首先来到https://setup.mailu.io/ Step 1在第一步中选择Compose, simply using Docker Compose manager Step 2在Main mail domain and server display name(主要邮箱域名和服务器显示名称)中应该填写您的根域名 在Linked Website URL中填写邮件服务器主机名 一定要勾选Enable the admin UI (and path to the admin UI) 不然不会安装Web控制页面 Step 3 选择一些功能Step 3主要是设置一些功能 网页邮箱 杀毒 WebDAV 邮件代收 Enable Web email client (and path to the Web email client)启用Web电子邮件客户端（以及Web电子邮件客户端的路径） 可以选择Roundcube和Rainloop,我建议选择Rainloop,这个根据你的喜好 Step 4 -将Mailu暴露给世界在IP listen address中填写您服务器的IP地址 Subnet of the docker network. This should not conflict with any networks to which your system is connected. (Internal and external!)是Docker的内网,一般不用管 建议启用Enable unbound resolver (香菇大佬说的 Public hostnames为服务器的长主机名 (mail.moec.top) Database preferences数据库选择支持Sqlite,MySQL和PostgreSQL. PostgreSQL支持自动部署,而MySQL需要手动部署 按需选择~ 3.运行为Mailu创建文件夹 mkdir /mailucd /mailu 然后下载配置文件 直接docker-compose -p mailu up -d运行 4.Enjoy新建管理员账号docker-compose -p mailu exec admin flask mailu admin 用户名 域名 密码Ex: docker-compose -p mailu exec admin flask mailu admin laoxong moec.top d6ZHZKyq9ivLJ6之后访问Domain/admin进入管理界面 DKIM先点击Mail domains之后点击鼠标所指的地方来到域名详细 之后点击Generate keys生成DKIM记录 然后和根据提示配置 用户点击鼠标所指的地方来到用户管理 然后点击右上角Add User新建 真正的EnjoyRainloop设置中文,首先点击左下角的设置,然后选择General,点击Language后面的语言,选择中文 效果mail-tester测试得分 ：6.9/10 但是不要着急 我们来康康问题出在了哪 1.Similar message reported on Pyzor (http://pyzor.org) 在Pyzor（http://pyzor.org）上报告了类似的消息 这个原因是邮箱的内容是我随便输的 解决了这个问题直接就+2分 2.Delivered to internal network by a host with no rDNS 由没有rDNS的主机传递到内部网络 这个原因是因为我的Rdns设置的问题","link":"/2019/11/12/mailu/"},{"title":"在多台服务器上部署哪吒探针 vps监控","text":"开源地址：[https://github.com/naiba/nezha](https://github.com/naiba/nezha) 预览地址：[https://server.inkup.cn](https://server.inkup.cn) 功能特性 计划任务：备份脚本、服务重启，等定期运维任务。 报警通知：CPU、内存、硬盘、带宽、流量实时监控。 服务监控：HTTP、SSL证书、ping、TCP 端口等。 自定义代码：改LOGO、改色调、加统计代码等。 详情见文档 部署教程一· 设置域名解析可以直接用 ip+端口 方式访问，为了安全及后期维护迁移方便，强烈建议设置用域名访问。准备两个域名，用本站域名举例： 域名1： a.moththe.com 作为面板访问域名，套 CDN（保护源站IP不泄露）。 域名2： b.moththe.com 不套CDN，指向面板服务器 IP，作为客户端与面板连接使用。 两个域名都解析到部署面板服务器的IP。 二. 创建 GitHub OAuth Apps需要有Github账号，没有的话先注册一个。这一步让Github账号用作面板后台登录验证。 创建 OAuth Apps 打开 Github Developer settings ，点击 New OAuth App 按钮 填写站点名称和 URL 信息 请参考图片填写，把 a.moththe.com 更换成自己面板域名，填写好以后点击 Register application 。 https://套CDN的域名 https://套CDN的域名/oauth2/callback 获取 OAuth Apps 的 Client ID 和 Client secret 参照下图创建 client id 和 clients secret 并记下来。 三. 部署哪吒探针面板端 放行对应端口 放行8008、5555两个端口，这是默认的，如果你安装中改为其他端口，防火墙放行相应的端口。 一键安装脚本 键入后按提示安装面板端，依次输入上面步骤获取的 Client ID ， Client secret 等相关信息。 curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh sudo ./nezha.sh 四. 设置域名访问 设置反向代理 在宝塔面板中新建站点，我这里是套CDN的域名，然后设置反代。 反代配置文件 location / { proxy_pass http://127.0.0.1:8008; proxy_set_header Host $host; } location /ws { proxy_pass http://127.0.0.1:8008; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;Upgrade&quot;; proxy_set_header Host $host; } 配置 SSL 证书 直接在宝塔面板中一键获取 Let’s Encrypt 免费证书。如果域名托管在 Cloudflare，也可以使用CF生成的免费长期证书，填在面板中使用。然后开启强制 HTTPS 即可。 现在就可以直接通过域名访问哪吒探针了，现在我们来配置被监控的服务器。 五. 部署哪吒探针客户端（被监控） 在哪吒面板中生成客户端连接密钥 打开哪吒面板，点击登录后台，通过GitHub账号验证后进入管理后台，添加服务器，创建好以后记下生成的密钥 一键安装客户端 键入后按提示 安装监控Agent ，依次输入 域名2(我这里是不套CDN的域名），上一步骤中生成的连接密钥等相关信息。 curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh sudo ./nezha.sh 有多台被监控机器时，按照此步骤在控制面板添加服务器。其他功能可自行在哪吒面板后台摸索。 常见问题1· 打开显示断开实时链接可以关闭CDN再试试。 2· Centos8 中部署客户端或者面板端，一直显示离线请关闭SElinux，打开配置文件 vi /etc/selinux/config ，将 SELINUX=enforcing 改为 SELINUX=disabled ，重启机器 reboot ，然后键入安装脚本选择 重启Agent 。 3· 修改服务器信息后变成离线在安装客户端(被监控)的服务器上执行 systemctl restart nezha-agent 重启程序。 4· 启动nezha-agent还是一直显示离线检查配置有没有写对 cat /etc/systemd/system/nezha-agent.service | grep ExecStart 。 5· 如何进行数据迁移、备份恢复？数据储存在 /opt/nezha 文件夹中，迁移数据时打包这个文件夹，到新环境解压。然后执行一键脚本安装即可。 6· 首页服务器随机闪烁掉线？执行 ntpdate 0.pool.ntp.org 同步一下面板部署所在的服务器的时间。","link":"/2021/01/08/nezha/"},{"title":"Linux 服务器使用 Rclone 挂载 OneDrive","text":"之前写过挂载 Google Drive 的过程，因为我的 Google Drive 空间不大，而 OneDrive 有 5T 的空间，所以准备把 OneDrive 挂载上去使用。OneDrive 的挂载方法和 Google Drive 大部分是差不多的，但 OneDrive 的授权要麻烦一些。这里简单记录一下我配置的过程。 **下载安装** 使用脚本下载安装 Rclone： curl https://rclone.org/install.sh | sudo bash 初始化配置安装完成后输入： rclone config 可以看到： 2021/04/14 07:14:46 NOTICE: Config file &quot;/root/.config/rclone/rclone.conf&quot; not found - using defaults No remotes found - make a new onen) New remotes) Set configuration passwordq) Quit config 输入 n 新建配置。 name 可以随便输入， 然后会出现挂载的服务类型，如下： Type of storage to configure. Enter a string value. Press Enter for the default (“”).Choose a number from below, or type in your own value1 / 1Fichier“fichier”2 / Alias for an existing remote“alias”3 / Amazon Drive“amazon cloud drive”4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS“s3”5 / Backblaze B2“b2”6 / Box“box”7 / Cache a remote“cache”8 / Citrix Sharefile“sharefile”9 / Compress a remote“compress”10 / Dropbox“dropbox”11 / Encrypt/Decrypt a remote“crypt”12 / Enterprise File Fabric“filefabric”13 / FTP Connection“ftp”14 / Google Cloud Storage (this is not Google Drive)“google cloud storage”15 / Google Drive“drive”16 / Google Photos“google photos”17 / Hadoop distributed file system“hdfs”18 / Hubic“hubic”19 / In memory object storage system.“memory”20 / Jottacloud“jottacloud”21 / Koofr“koofr”22 / Local Disk“local”23 / Mail.ru Cloud“mailru”24 / Mega“mega”25 / Microsoft Azure Blob Storage“azureblob”26 / Microsoft OneDrive“onedrive”27 / OpenDrive“opendrive”28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)“swift”29 / Pcloud“pcloud”30 / Put.io“putio”31 / QingCloud Object Storage“qingstor”32 / SSH/SFTP Connection“sftp”33 / Sugarsync“sugarsync”34 / Tardigrade Decentralized Cloud Storage“tardigrade”35 / Transparently chunk/split large files“chunker”36 / Union merges the contents of several upstream fs“union”37 / Webdav“webdav”38 / Yandex Disk“yandex”39 / Zoho“zoho”40 / http Connection“http”41 / premiumize.me“premiumizeme”42 / seafile“seafile” 直接输入序号，比如我挂载的是 OneDrive 就可以输入 26 ， client_id 可以直接回车默认， client_secret 也可以直接回车默认， 然后会出现 OneDrive 区域选择，如下： Choose national cloud region for OneDrive. Enter a string value. Press Enter for the default (“global”).Choose a number from below, or type in your own value1 / Microsoft Cloud Global“global”2 / Microsoft Cloud for US Government“us”3 / Microsoft Cloud Germany“de”4 / Azure and Office 365 operated by 21Vianet in China“cn” 可以直接输入 1 选择全球， 然后是选择是否进行高级配置，如下： dit advanced config? (y/n) y) Yesn) No (default) 可以输入 n ， 接着是自动配置选择，如下： Remote config Use auto config? Say Y if not sure Say N if you are working on a remote or headless machine y) Yes (default) n) No 可以输入 n ， 这里需要获取授权码： For this to work, you will need rclone available on a machine that has a web browser available. For more help and alternate methods see: https://rclone.org/remote_setup/ Execute the following on the machine with the web browser (same rcloneversion recommended): rclone authorize &quot;onedrive&quot; Then paste the result below: 授权码需要在本地电脑上获取，访问 https://rclone.org/downloads/ 根据你的电脑系统版本下载对应的 Rclone。 下载完成后解压，进入存放 Rclone 的目录，以 Win10 为例，打开 Powershell ，我的 Rclone 放在 E:下载rclone-v1.55.0-windows-amd64 ，我可以输入： cd E:\\下载\\rclone-v1.55.0-windows-amd64 在存放 Rclone 的目录可以看到 rclone.exe 的可执行程序，输入： ./rclone authorize &quot;onedrive&quot; 浏览器应该会自动打开，如果浏览器没有打开可以根据提示复制地址访问。如果浏览器登录了 OneDrive 的话会直接显示授权确认信息，如果没有登录的话会弹出登录页面，登录 OneDrive 后也会显示授权确认信息，如下： 选择 接受 后在本地命令行会显示一串 JSON 格式的授权信息，复制授权信息包括首尾的 {} ，到 Linux 终端粘贴。 然后是选择 OneDrive 的类型，如下： Choose a number from below, or type in an existing value 1 / OneDrive Personal or Business“onedrive”2 / Root Sharepoint site“sharepoint”3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite))“url”4 / Search for a Sharepoint site“search”5 / Type in driveID (advanced)“driveid”6 / Type in SiteID (advanced)“siteid”7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)“path” 可以输入 1 ， 然后会显示找到的 OneDrive 账户，如下： Found 1 drives, please select the one you want to use:0: OneDrive (business) id=b!b_xnJJqyBMSVPjgvhvbP8XmJ_M_dMjhzrbhnaWknnbKqNBm8MTqM3kvEtW67P Found drive 'root' of type 'business', URL: https://xxx-my.sharepoint.com/personal/changbin_xxx_onmicrosoft_com/Documents Is that okay?y) Yes (default)n) No 确认无误后输入 y ， 接着会显示你选择的配置信息，确认无误后输入 y 保存配置。 挂载输入： rclone mount configName:OneDriveLocation dir --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 其中的 configName 就是配置名称，OneDriveLocation 就是要挂载的 OneDrive 目录，dir 就是要挂载到的本地目录。 例如我要把一个名为 OneDrive 的配置挂载到本地的 /OneDrive 目录，我可以这样写： rclone mount OneDrive:/ /OneDrive --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 我这里挂载的是整个 OneDrive 网盘，所以我写的是 OneDrive 的根目录 / 。 挂载完成后不会显示任何内容，可以再开一个终端，输入 df -h 查看磁盘空间，如下： Filesystem Size Used Avail Use% Mounted on devtmpfs 1.5G 0 1.5G 0% /devtmpfs 1.5G 0 1.5G 0% /dev/shmtmpfs 1.5G 153M 1.4G 11% /runtmpfs 1.5G 0 1.5G 0% /sys/fs/cgroup/dev/vda1 57G 26G 29G 48% /tmpfs 301M 0 301M 0% /run/user/0OneDrive 5.0T 1.1T 4.0T 21% /OneDrive 挂载完成后进入挂载的目录就可以看到 OneDrive 的文件了，上传文件可以直接拷贝到挂载目录，下载也是直接拷贝到本地目录。 挂载出错如果在挂载的时候出现了类似下面的提示： 2021/03/04 18:58:16 Fatal error: failed to mount FUSE fs: fusermount: exec: &quot;fusermount&quot;: executable file not found in $PATH 需要安装 fuse。 CentOS/Fedora 安装 fuse： yum install -y fuseUbuntu/Debian 安装 fuse： apt install -y fuse","link":"/2021/01/01/onedrive/"},{"title":"编译一个openwrt固件","text":"0.创建一个GitHub账号。 首先打开https://github.com/ ，按照下图进行输入： 输入验证码，然后点击蓝色的按钮【Next：Select a Plan】 然后点击【Choose Free】 然后按照下图随便选一些选项： 然后随便填点文字，点击【Complete setup】 然后网页会提示：Please verify your email address（请检查你的邮件地址） 打开邮箱，查收GitHub发来的邮件。 点击【Verify email address】 输入邮箱和密码，点击【Sign in】 1.进行默认配置的编译 账号创建完成，需要同步Lean的源代码。 在网页上方的搜索框里面输入coolsnowwolf/lede 点击第一个结果 然后点击【Fork】按钮 出现如下的提示，意思是等待片刻： 然后点击【Action】选项卡 网页会提示“Workflows在fork的仓库中无法运行”，接下来点击绿色的按钮 【I understand my workflows, go ahead and run them】 然后点击进入Code选项卡： 点击.github/workflows 点击openwrt-ci.yml 点击编辑按钮进入编辑页面 第一次编辑此文档，即可触发GitHub Action的自动编译。 将左侧编辑栏的push、branches和- master前面的#删除，千万不要删掉空格。 然后点击右侧的【Start commit】，再点击【Commit changes】 此时点击Action选项卡，即可看到已经自动开始编译。 黄色为正在编译，绿色为编译完成，红色为编译失败。 点击openwrt-ci，即可看到编译过程。 编译完成之后这里会显示成下图这样，按下图指示即可下载编译好的固件。 2.使用自定义配置进行编译 首先我们打开Code选项卡，找到.github/workflows/openwrt-ci-yml这个文件，点击编辑： 注意事项： ①需要DIY哪个功能，就将cat、CONFIG、EOF前面的#号和空格删掉。 ②去掉#号之后，cat、CONFIG、以及EOF要和上面的#号对齐 ③编辑之后，需要点击【Start commit】和【Commit changes】提交修改。 ④新人尽量每次修改只改5行以内代码，并在提交代码时写好修改记录。 ⑤可以添加代码库中有，但是openwrt-ci.yml中没有的插件，如 CONFIG_PACKAGE_luci-app-uhttpd=y ⑥如果一个luci-app需要多个依赖，只需要填写该luci-app即可， 其余依赖包会在编译时自动勾选。 ⑦如果需要修改固件大小，可以添加如下代码： # 设置固件大小: cat &gt;&gt; .config &lt;&lt;EOF CONFIG_TARGET_KERNEL_PARTSIZE=30 CONFIG_TARGET_ROOTFS_PARTSIZE=400 EOF 其中：30代表固件中内核分区大小，400代表固件中ROOTFS分区大小 ⑧修改完代码之后，需要检查每组代码是否以cat &gt;&gt; .config &lt;&lt;EOF开头，并以EOF结尾。","link":"/2020/10/23/openwrt/"},{"title":"青龙2.10+XDD-Plus+nvjdc短信验证登录对接xdd-plus","text":"一、准备工作1.一台电脑（手机也可以，自行找ssh链接工具） 2.购买服务器，并开放服务器端口，这里以阿里云服务器为例。其它服务器自行百度，这里就不过多叙述。 3.连接服务器 二、开始搭建1.安装docke并设置开机启动 12345sudo yum check-updatecurl -sSL https://get.daocloud.io/docker | shsudo systemctl start dockersudo systemctl status dockersudo systemctl enable docker 2.拉取青龙面板1234567891011docker run -dit \\ --name ql \\ --hostname ql \\ --restart always \\ -p 5700:5700 \\ -v $PWD/ql/config:/ql/config \\ -v $PWD/ql/log:/ql/log \\ -v $PWD/ql/db:/ql/db \\ -v $PWD/ql/scripts:/ql/scripts \\ -v $PWD/ql/jbot:/ql/jbot \\ whyour/qinglong:latest 端口号可自己方法： -p 5700:5700 端口号为5700 -p xxxx:5700 端口号为xxxx 注：改的端口号一定要在安全组中放行该端口，不然访问不到 3.登录青龙面板在浏览器中输入 服务器ip:端口号 端口号为上一步你自己设置的端口号 例如：123.123.123.123:5700 进入青龙面板的登陆页面，开始安装 4.拉取定时任务脚本仓库这里推荐两个仓库： faker2仓库： 1ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql&quot; smiek2221仓库： 1ql repo https://ghproxy.com/github.com/smiek2221/scripts.git &quot;jd_|gua_&quot; &quot;&quot; &quot;ZooFaker_Necklace.js|JDJRValidator_Pure.js|sign_graphics_validate.js&quot; 青龙面板相关依赖及部分脚本依赖不能偷懒，稍微等一等有点慢 1234567891011docker exec -it QL bash -c &quot;npm install -g typescript&quot;docker exec -it QL bash -c &quot;npm install axios date-fns&quot;docker exec -it QL bash -c &quot;npm install crypto -g&quot;docker exec -it QL bash -c &quot;npm install jsdom&quot;docker exec -it QL bash -c &quot;npm install png-js&quot;docker exec -it QL bash -c &quot;npm install -g npm&quot;docker exec -it QL bash -c &quot;pnpm i png-js&quot;docker exec -it QL bash -c &quot;pip3 install requests&quot;docker exec -it QL bash -c &quot;apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source&quot;docker exec -it QL bash -c &quot;apk add python3 zlib-dev gcc jpeg-dev python3-dev musl-dev freetype-dev&quot;docker exec -it QL bash -c &quot;cd /ql/scripts/ &amp;&amp; apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; npm i &amp;&amp; npm i -S ts-node typescript @types/node date-fns axios png-js canvas --build-from-source&quot; 5.应用设置配置为下一步的xdd-plus对接青龙做出准备 6.搭建xdd-plus所需环境 6.1安装gcc 12yum -y install gccyum -y install gcc-c++ 6.2下载go安装包 ，这里我们安装到usr/local目录 1cd /usr/local &amp;&amp; wget https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz -O go1.16.7.linux-amd64.tar.gz 6.3解压go安装包 tar -xvzf go1.16.7.linux-amd64.tar.gz 6.4手动设置环境变量路径/etc/profile 12345export GO111MODULE=onexport GOPROXY=https://goproxy.cnexport GOROOT=/usr/local/goexport GOPATH=/usr/local/go/pathexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin 复制上方代码添加到profile文件末尾 6.5执行source 1source /etc/profile 6.6检测一下看看有没有安装成功 1go env 6.7安装git 12345wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -ivh epel-release-latest-7.noarch.rpm yum install -y git 7.安装xdd-plus 7.1拉取xdd-plus的库 1cd ~ &amp;&amp; git clone https://ghproxy.com/https://github.com/764763903a/xdd-plus.git 7.2编译xdd 12cd xdd-plusgo build 7.3给与xdd最高权限 1chmod 777 xdd 7.4运行xdd（要确保你在xdd-plus目录下） 1./xdd 等程序跑个半分钟Ctrl+c退出 7.5WinSCP中手动修改root/xdd-plus/conf/config.yaml文件 1234567891011121314151617181920212223242526272829303132333435363738mode: parallel #模式 balance(均衡模式)、parallel(平行模式)containers: - address: http://123.123.123.123:5700 #这里是你青龙面板的地址 username: 青龙面板的账号 #登陆青龙面板的账号 password: 青龙面板的密码 #登录青龙面板的密码 cid: Client ID #刚刚在青龙面板获取到的Client ID secret: Client Secret #刚刚在青龙面板获取到的Client Secret weigth: 1 #权重 balance模式下权重越高分得的ck越多，默认1 mode: parallel #模式 balance(均衡模式)、parallel(平行模式) limit: 9999 #限制容器ck数目AtTime: 8 #填写1-12之间的数 填错自负默认为10 10点容易出现高峰超时。IsHelp: true #填写true或者false falseIsOldV4: #填写true或者false false是否新版或者旧版V4Wskey: true # 填空默认禁用wskey转换 需要的填trueIsAddFriend: #填写true或者false falseLim: #填写1-N 代表限制次数Tyt: #填写1-N 代表推一推需要的互助值，默认为8Later: #延时防止黑IP自己设置 默认60 不怕黑的改为1即可 单位是秒ApiToken: #nvjdc短信接入token参数，自己设置theme: /root/xdd-plus/theme/admin.html #自定义主题，支持本地、网络路径 static: ./static #静态文件 便于自定义二维码页面时，引入css、js等文件master: #xdd-plus后台密码，并从井号开始把这一段文字全部删除database: /root/xdd-plus/.xdd.db qywx_key: #企业微信推送keydaily_push: #定时任务resident: #均衡模式下所有容器共同的账号pin，有多个用'&amp;'拼接。不建议填写。user_agent:telegram_bot_token:telegram_user_id:TGURL: #填写TG代理地址参考https://www.kejiwanjia.com/server/5221.html#3workerqquid: 管理员QQ #接收通知的qq号，管理员QQ号码qqgid: QQ群号 #监听的群qbot_public_mode: true #qq机器人群聊模式，默认私聊模式default_priority: #新用户默认优先级no_ghproxy: true #更新资源是否不使用代理daily_asset_push_cron: 0 21 * * * #日常资产推送时间 可以不填repos: - git: https://github.com/shufflewzc/faker2.git 修改完之后Ctrl+s保存文件退出，回到命令行在次运行上一步7.4 出现二维码，扫码绑定你的机器人qq，等一会后向你的机器人发消息测试。 7.6然后Ctrl+c，为防止机器人被杀死我们后台挂机 1./xdd -d 我们的xdd-plus配置到此结束 8.nvjdc短信验证登录对接xdd-plus 8.1先cd回根目录 1cd 8.2首先安装unzip 1yum install wget unzip -y 8.3然后创建一个目录放配置以及chromium 1mkdir nolanjdc &amp;&amp; cd nolanjdc 8.4拉取nvjdc对接xdd-plus专用的配置文件 1wget https://cdn.jsdelivr.net/gh/yanyuwangluo/tuku@main/Config.json 8.5创建chromium文件夹并进入 1mkdir -p .local-chromium/Linux-884014 &amp;&amp; cd .local-chromium/Linux-884014 8.6下载chromium并删除chromium压缩包 1wget https://mirrors.huaweicloud.com/chromium-browser-snapshots/Linux_x64/884014/chrome-linux.zip &amp;&amp; unzip chrome-linux.zip &amp;&amp; rm -f chrome-linux.zip 8.7回到刚刚创建的目录 1cd ~/nolanjdc 8.8拉取nvjdc项目镜像 1docker pull nolanhzy/nvjdc:1.0 8.9启动项目容器（5703就是你nvjdc的端口号） 1docker run --name nolanjdc -p 5703:80 -d -v &quot;$(pwd)&quot;/Config.json:/app/Config/Config.json:ro \\-v &quot;$(pwd)&quot;/.local-chromium:/app/.local-chromium \\-it --privileged=true nolanhzy/nvjdc:1.0 8.10查看日志 1docker logs -f nolanjdc 出现表示NETJDC started成功，然后Ctrl+c退出日志即可 8.11修改nvjdc对接xdd-plus的配置文件 配置文件路径/root/nolanjdc/Config.json 编辑好后保存重启容器（修改配置文件后需要重启） 1docker restart nolanjdc 到这一步已经可以全部正常使用了 后面做一些补充 （可忽略）公告处可以公告处可通过html+css编写后转义替换添加更多功能，可进交流群。 删除容器和镜像（后面的0.8是版本号跟随自己需求更改） 1docker rm -f nolanjdc &amp;&amp; docker rmi -f nolanhzy/nvjdc:1.0 更新：更新前删除容器和镜像，然后继续执行8.7到8.10就好 卸载nvjdc 1docker rm -f nolanjdc &amp;&amp; docker rmi -f nolanhzy/nvjdc:1.0 &amp;&amp; rm -rf /root/nolanjdc","link":"/2021/11/15/qinglong/"},{"title":"Docker部署为知笔记（国内gitbook）","text":"软件特色 一键收集微信、网页、微博 保存碎片信息 批量导入文档 文字、清单、手写 图片、拍照、语音、附件 一次记录永久保存 轻量级图文编辑工具 内置Markdown功能 写出漂亮的文档 资料永久保存在云端 修改后的笔记会保存历史版本 无需担心资料丢失 群组、多级文件夹、标签 让资料井井有条 关键词全文搜索 快捷方式定位文件夹和笔记 快速找到所需资料 前言官网:WizNote 官方安装教程:WizNote 安装安装Docker curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh启动为知笔记服务端执行 cd ~mkdir wizdata然后执行 docker run –name wiz –restart=always -it -d -v ~/wizdata:/wiz/storage -v /etc/localtime:/etc/localtime -p 80:80 -p 9269:9269/udp wiznote/wizserver将其中的-p 80:80的一个80改为你想要的端口,例如-p 8080:80 或者改为-p 10003:80,这样下面的配置文件就不用改了 当然,如果你不想配置HTTPS而且本地没有其他HTTP服务器你可以直接梭哈 配置HTTPS由于现在一直在用Apache,就只po出一个Apache的配置文件了 &lt;VirtualHost *:80&gt; ServerAdmin admin@moec.top DocumentRoot “/www/wwwroot/域名” ServerName 域名 #errorDocument 404 /404.html ErrorLog “/www/wwwlogs/wiz.5777.tk-error_log” CustomLog “/www/wwwlogs/wiz.5777.tk-access_log” combined ProxyPass http://localhost:10003/ ProxyPassReverse http://localhost:10003/ #DENY FILES &lt;Files ~ (\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md)$&gt; Order allow,deny Deny from all &lt;/Files&gt; ServerAdmin admin@moec.top DocumentRoot \"/www/wwwroot/域名/\" ServerName 域名 #errorDocument 404 /404.html ErrorLog \"/www/wwwlogs/域名-error_log\" CustomLog \"/www/wwwlogs/域名-access_log\" combined &lt;Location /&gt; ProxyPass http://localhost:10003/ ProxyPassReverse http://localhost:10003/ &lt;/Location&gt; #SSL SSLEngine On SSLCertificateFile /www/server/panel/vhost/cert/---/fullchain.pem SSLCertificateKeyFile /www/server/panel/vhost/cert/---/privkey.pem SSLCipherSuite EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5 SSLProtocol All -SSLv2 -SSLv3 -TLSv1 SSLHonorCipherOrder On #DENY FILES &lt;Files ~ (\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md)$&gt; Order allow,deny Deny from all &lt;/Files&gt; 按照你的配置配置后,重载你的Apache即可 安装完成访问你配置的域名即可 默认账号:密码 admin@wiz.cn:123456 然后点击头像,访问管理后台 访问用户管理即可更改管理员 桌面客户端桌面客户端 WizNote Lite (支持Markdown实时渲染) 客户端截图: 体验: 有一些BUG,不过能用.webp如外链图片无法加载 更新docker stop wizdocker rm wizdocker pull wiznote/wizserver:latest备份备份非常的简单,只需要备份~/wizdata这个文件夹即可 *@master-node:~/wizdata# lltotal 36drwxr-xr-x 2 root root 4096 Jun 6 08:30 configdrwxr-xr-x 3 root root 4096 Jun 6 08:28 data_rootdrwxrwxrwx 12 mysql mysql 4096 Jun 6 08:18 dbdrwxrwxrwx 2 root root 4096 Jun 6 08:23 indexdrwxrwxrwx 3 root root 4096 Jun 6 08:18 logsdrwxr-xr-x 3 root root 4096 Jun 6 08:29 override_filesdrwxr-xr-x 2 root root 4096 Jun 6 08:46 wiz-abstractdrwxr-xr-x 2 root root 4096 Jun 6 08:23 wiz-gather-devdrwxr-xr-x 3 root root 4096 Jun 6 08:46 wizserver-temp里面包含了所有的数据","link":"/2021/04/12/wiznote/"},{"title":"在 Windows11 中安装 WSA (安卓子系统)","text":"首先你得打开 windows 里面的功能，在 windows 菜单里面搜索启用.... 功能 然后打开里面的这两个功能 重启 之后下载需要的包 商店下载链接 https://www.microsoft.com/store/productId/9P3395VX91NR 安装包抓包地址 https://store.rg-adguard.net/ 在抓包地址右边选择 Slow 通道 (因为 Slow 通道对应的是 Beta 通道，其他 Fast,RP,Retail 分别对应 Dev, 预览，正式版) 然后在地址栏里面输入商店下载地址 找到最下面的那个最大的包，我这里名字为 \"MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle\" 如果版本更新可能会变，不过都差不多，把它下载下来 如果你双击它，你会发现无法安装 这个时候我们需要用管理员运行 Powershell 来安装 win+X 运行 Powershell 在里面输入 1add-appxpackage &quot;这里填你下载的安装包的绝对路径&quot; 比如我的就是 1add-appxpackage &quot;D:\\Downloads\\Microsoft Edge\\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral___8wekyb3d8bbwe.Msixbundle&quot; 回车执行 然后就可以 enjoy 了 很多小伙伴装了 WSA 都发现没有桌面，这就意味着你只能用 adb 来进行和子系统的交互 十分的麻烦，这里我推荐一个工具，[秋之盒](https://www.atmb.top/) **我使用的是 canary 金丝雀版本** 进入 WSA 界面 打开开发人员模式 启用它，进入管理开发人员设置 打开 usb 调试 回到 WSA 界面，刷新和复制 IP进入秋之盒 在这里输入你复制的 IP 安装一个然后你就能对 WSA 做你想做的事情了，比如可以安装一个应用商店，我这里推荐大家安装一个酷安听说有人在 wsa 里面成功安装了谷歌框架，大家也可以试试","link":"/2021/11/19/wsa/"},{"title":"卸载腾讯云、阿里云后台监控服务","text":"前言相信腾讯云，阿里云大家都很熟悉了，那么腾讯云、阿里云后台监控是怎么回事呢？对云腾讯云、阿里云等大厂而言自带的系统一般都带有后台监控等，虽然我们这些遵纪守法的好公民来讲其实也没啥的，但是总归是不太舒服的。所以本文将介绍如何卸载其监控等。（ps:上了腾讯云轻量香港的车，来水一水。） 懒人专用一键脚本 12345678 wget https://yun.tyiblog.top/linux/all/jk_uninstall.shchmod +x jk_uninstall.sh#卸载阿里云./jk_uninstall.sh ai#卸载腾讯云./jk_uninstall.sh txShell复制**腾讯云监控卸载** SSH运行以下代码： 123/usr/local/qcloud/stargate/admin/uninstall.sh/usr/local/qcloud/YunJing/uninst.sh/usr/local/qcloud/monitor/barad/admin/uninstall.sh 以下代码不建议运行： 123rm -rf /usr/local/qcloud/rm -rf /usr/local/sa/rm -rf /usr/local/agenttools SSH运行以下代码无输出则卸载成功。（最好重启后运行查看） 1ps -A | grep agent 阿里云监控卸载卸载脚本： 123456wget http://update.aegis.aliyun.com/download/uninstall.shchmod +x uninstall.sh./uninstall.shwget http://update.aegis.aliyun.com/download/quartz_uninstall.shchmod +x quartz_uninstall.sh./quartz_uninstall.sh 卸载残留： 123pkill aliyun-servicerm -rf /etc/init.d/agentwatch /usr/sbin/aliyun-servicerm -rf /usr/local/aegis* 屏蔽云盾: 1234567891011iptables -I INPUT -s 140.205.201.0/28 -j DROPiptables -I INPUT -s 140.205.201.16/29 -j DROPiptables -I INPUT -s 140.205.201.32/28 -j DROPiptables -I INPUT -s 140.205.225.192/29 -j DROPiptables -I INPUT -s 140.205.225.200/30 -j DROPiptables -I INPUT -s 140.205.225.184/29 -j DROPiptables -I INPUT -s 140.205.225.183/32 -j DROPiptables -I INPUT -s 140.205.225.206/32 -j DROPiptables -I INPUT -s 140.205.225.205/32 -j DROPiptables -I INPUT -s 140.205.225.195/32 -j DROPiptables -I INPUT -s 140.205.225.204/32 -j DROP 如果需要重新启用云盾，只要在iptables中释放屏蔽的IP段即可，安骑士的启用使用以下代码： 123wget http://update.aegis.aliyun.com/download/install.shchmod +x install.shsh install.sh","link":"/2018/07/22/%E5%8D%B8%E8%BD%BD%E8%85%BE%E8%AE%AF%E4%BA%91%E3%80%81%E9%98%BF%E9%87%8C%E4%BA%91%E5%90%8E%E5%8F%B0%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1/"},{"title":"MarkDown","text":"首先提两个开始使用MarkDown时候自己的问题 单个回车，视为空格，连续回车，才是分段。（简书做过处理，单个回车也会分段，一样的写法GitHub就会挤在一块） GitHub中“# + 空格 + 标题”调整标题，简书中“# + 标题”就可以调整标题，GitHub显示为“#标题” 1. Markdown_是什么_？Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 2. _谁_创造了它？它由Aaron Swartz和John Gruber共同设计，Aaron Swartz是一位有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 他有着足以让你跪拜的人生经历： 14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 天才都有早逝的归途。 3. _为什么_要使用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail） 摆脱Word（我不是认真的）。 4. _谁_在用？Markdown的使用者： GitHub 简书 Stack Overflow Apollo Moodle Reddit 等等 5. 尝试一下 1. 斜体和粗体1234*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~ view 斜体_或_斜体 粗体 加粗斜体 删除线 2. 分级标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 由于用了[TOC]标记编辑器会把所有标题写到目录大纲中，在这里写的演示标题也会列进去，所以就不演示了。同学们自己在编辑器中观察，很简单，一级标题字号最大，依级递减。 3. 超链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。 3.1. 行内式语法说明： []里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接地址与链接标题前有一个空格。 123欢迎来到[饼干博客](https://bngan.com)欢迎来到[liyang's blog](https://bngan.com &quot;饼干博客&quot;) view 欢迎来到饼干博客 欢迎来到饼干博客 3.2. 参考式参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。 语法说明：参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。 如果链接文字本身可以做为链接标记，你也可以写成[链接文字][][链接文字]：链接地址的形式，见代码的最后一行。 12345我经常去的几个网站[Google][1],[YouTube][2],[YouTube][]。[1]:http://www.google.com[2]:https://www.youtube.com &quot;YouTube&quot;[YouTube]:https://www.youtube.com 我经常去的几个网站Google,YouTube,YouTube。 3.3. 自动链接语法说明：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 12&lt;http://example.com/&gt;&lt;address@example.com&gt; view http://example.com/address@example.com 4. 锚点网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。 注意： Markdown Extra 只支持在标题后插入锚点，其它地方无效。 Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。 1跳转测试{#toc-heading-18} 跳转到页尾，这个有点问题，会跳转到新标签页的页尾，因为hexo会在生成的a标签上加上target=&quot;_blank&quot;这个属性，暂时无法解决。 5. 列表5.1. 无序列表使用 *，+，- 表示无序列表。 123- 无序列表项 一- 无序列表项 二- 无序列表项 三 view 无序列表项 一 无序列表项 二 无序列表项 三 5.2. 有序列表有序列表则使用数字接着一个英文句点。 1231. 有序列表项 一2. 有序列表项 二3. 有序列表项 三 view 有序列表项 一 有序列表项 二 有序列表项 三 5.3. 定义型列表语法说明： 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab) 1234567代码块 1 Markdown: 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） view 代码块 1 Markdown 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格） 代码块 2 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 1代码块（左侧有八个不可见的空格） 5.3. 列表缩进语法说明： 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 1234567* 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ * 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 view 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 5.4. 包含段落的列表语法说明： 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）： 123456789* 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！* 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 view 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 5.5. 包含引用的列表语法说明： 如果要在列表项目内放进引用，那 &gt; 就需要缩进： 123* 阅读的方法: &gt; 打开书本。 &gt; 打开电灯。 view 阅读的方法: 打开书本。打开电灯。 5.6. 包含代码区块的引用语法说明：如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符： 5.7. 一个特殊情况在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法： 11986. What a great season. 会显示成： What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠： 11986\\. What a great season. 才会正常显示成： 1986. What a great season. 6. 引用语法说明： 引用需要在被引用的文本前加上&gt;符号。 123456&gt; 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2.&gt; 无意义的占行文字3.无意义的占行文字4. view 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2. 无意义的占行文字3.无意义的占行文字4. 6.1. 引用的多层嵌套区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： 12345&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白&gt;&gt; 自己看教程！ - 愤青&gt; 教程在哪？ - 小白 请问 Markdwon 怎么用？ - 小白 自己看教程！ - 愤青 教程在哪？ - 小白 6.2. 引用其它要素引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 123456&gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： 1return shell_exec(&quot;echo $input | $markdown_script&quot;); 7. 插入图像图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。 语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。 7.1. 行内式语法说明：![图片Alt](图片地址 “图片Title”) 12美丽风景： ![美丽风景](https://yuhongjun.github.io/assets/media/scenery.jpeg &quot;美丽风景&quot;) view美丽风景： 7.2. 参考式 语法说明： 在文档要插入图片的地方写![图片Alt][标记] 在文档的最后写上[标记]:图片地址 “Title” 123![美丽风景](https://yuhongjun.github.io/assets/media/scenery.jpeg &quot;美丽风景&quot;)[scenery]:https://yuhongjun.github.io/assets/media/scenery.jpeg &quot;美丽风景&quot; view 8. 内容目录在段落中填写 [TOC] 以显示全文内容的目录结构。 效果参见最上方的目录 9. 注脚语法说明： 在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。 1234567使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]:Markdown是一种纯文本标记语言[^2]:HyperText Markup Language 超文本标记语言[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文 view 使用 Markdown^1可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote^Le 编辑器进行书写。 [^2]:HyperText Markup Language 超文本标记语言 注：脚注自动被搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转回到加注的地方。 10. LaTeX 公式10.1. $ 表示行内公式：1质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 view质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 10.2 $$ 表示整行公式：123$$\\sum_{i=1}^n a_i=0$$$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$$$\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}$$ 访问 MathJax 参考更多使用方法。 11 .表格语法说明： 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。 简单方式写表格： 12345学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92 2.原生方式写表格： 12345|学号|姓名|分数||-|-|-||小明|男|75||小红|女|79||小陆|男|92| 3.为表格第二列指定方向： 1234产品|价格-|-:Leanote 高级账号|60元/年Leanote 超级账号|120元/年 view 简单方式写表格： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 2.原生方式写表格： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 3.为表格第二列指定方向： 产品 价格 Leanote 高级账号 60元/年 Leanote 超级账号 120元/年 12. 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789* * *********- - ---------------------------------------- 显示效果都一样 13. 代码对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。 语法说明： 插入行内代码，即插入一个单词或者一句代码的情况，使用code这样的形式插入。 插入多行代码，可以使用缩进或者“code “,具体看示例。 注意： 缩进式插入前方必须有空行 13.1. 行内式1C语言里的函数 `scanf()` 怎么使用？ viewC语言里的函数 scanf() 怎么使用？ 13.2. 缩进式多行代码缩进 4 个空格或是 1 个制表符 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 12345#include &lt;stdio.h&gt; int main(void) { printf(&quot;Hello world&quot;); } view 12345#include &lt;stdio.h&gt; int main(void) { printf(&quot;Hello world&quot;); } 13.3. 用六个`包裹多行代码1234567` ` `#include &lt;stdio.h&gt;int main(void){ printf(&quot;Hello world&quot;);}` ` ` 另外说明一下，第一个 ```后可以加上代码的类型，js代码就加上js,css就加上css，渲染出来的样式会有区别。比如下面这段，虽然内容基本差不多，第一个是js，第二个是json，渲染出来就是不一样的。如果不加的话文字都是白色的。 12345 var object ={ &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;, &quot;name&quot;: &quot;码酱&quot;, &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,} 12345{ &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;, &quot;name&quot;: &quot;码酱&quot;, &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;} 12345 var object ={ &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;, &quot;name&quot;: &quot;码酱&quot;, &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,} 13.5. HTML 原始码在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如： 第一个例子： 123&lt;div class=&quot;footer&quot;&gt; © 2018 ***&lt;/div&gt; view © 2018 *** 还有一个流程图，hexo暂时渲染不出来，一般人也用不到，就去掉了。","link":"/2020/11/10/MarkDown/"},{"title":"B2+CF+ShareX,实现无成本图床和便捷上传","text":"准备 1.一个cloudflare账号 https://dash.cloudflare.com/ 2.一个B2账号 https://www.backblaze.com/b2/cloud-storage.html 3.windows软件ShareX 步骤 1.注册B2账号,点击进入B2 Cloud Storage,点击Buckets创建一个BUcket,设为public,并上传一个图片,记录下下图要用的域名 2.点击App keys,添加一个新的key,bucket就选你刚创建的那个,记录下你的密钥,之后要在ShareX中用 3.打开cf,cname一下上图要记的域名,小云朵点亮 4.加一条页面缓存规则. 5.创建一个workers,粘贴下列代码,记得b2domain和bucket的值改成自己的 'use strict'; const b2Domain = 'img.domain.com'; // configure this as per instructions above const b2Bucket = 'bucket-name'; // configure this as per instructions above const b2UrlPath = `/file/${b2Bucket}/`; addEventListener('fetch', event =&gt; { return event.respondWith(fileReq(event)); }); // define the file extensions we wish to add basic access control headers to const corsFileTypes = ['png', 'jpg', 'gif', 'jpeg', 'webp']; // backblaze returns some additional headers that are useful for debugging, but unnecessary in production. We can remove these to save some size const removeHeaders = [ 'x-bz-content-sha1', 'x-bz-file-id', 'x-bz-file-name', 'x-bz-info-src_last_modified_millis', 'X-Bz-Upload-Timestamp', 'Expires' ]; const expiration = 31536000; // override browser cache for images - 1 year // define a function we can re-use to fix headers const fixHeaders = function(url, status, headers){ let newHdrs = new Headers(headers); // add basic cors headers for images if(corsFileTypes.includes(url.pathname.split('.').pop())){ newHdrs.set('Access-Control-Allow-Origin', '*'); } // override browser cache for files when 200 if(status === 200){ newHdrs.set('Cache-Control', \"public, max-age=\" + expiration); }else{ // only cache other things for 5 minutes newHdrs.set('Cache-Control', 'public, max-age=300'); } // set ETag for efficient caching where possible const ETag = newHdrs.get('x-bz-content-sha1') || newHdrs.get('x-bz-info-src_last_modified_millis') || newHdrs.get('x-bz-file-id'); if(ETag){ newHdrs.set('ETag', ETag); } // remove unnecessary headers removeHeaders.forEach(header =&gt; { newHdrs.delete(header); }); return newHdrs; }; async function fileReq(event){ const cache = caches.default; // Cloudflare edge caching const url = new URL(event.request.url); if(url.host === b2Domain &amp;&amp; !url.pathname.startsWith(b2UrlPath)){ url.pathname = b2UrlPath + url.pathname; } let response = await cache.match(url); // try to find match for this request in the edge cache if(response){ // use cache found on Cloudflare edge. Set X-Worker-Cache header for helpful debug let newHdrs = fixHeaders(url, response.status, response.headers); newHdrs.set('X-Worker-Cache', \"true\"); return new Response(response.body, { status: response.status, statusText: response.statusText, headers: newHdrs }); } // no cache, fetch image, apply Cloudflare lossless compression response = await fetch(url, {cf: {polish: \"lossless\"}}); let newHdrs = fixHeaders(url, response.status, response.headers); if(response.status === 200){ response = new Response(response.body, { status: response.status, statusText: response.statusText, headers: newHdrs }); }else{ response = new Response('File not found!', { status: 404 }) } event.waitUntil(cache.put(url, response.clone())); return response; } 6.workers里添加路由,使访问你的域名时,先走workers 访问一下你的图片文件 比如说一开始是https://f000.backblazeb2.com/file/backblaze1489498/wallhaven-md2x8m.jpg 现在用https://dlcu.cf/wallhaven-md2x8m.jpg就可以访问了 7.配置ShareX. 这个感觉没啥好说的,主页面–目标–上传目标设置–backblaze b2,填上就行了 结束 这个的好处就是方便了上传,自己在电脑前,截一下图直接上传,或者复制一下直接上传 还有就是可以用自己的域名,再说的话就是数据自己也能找回.","link":"/2021/02/02/shareX/"},{"title":"什么是正则表达式 我该怎么使用它","text":"什么是正则表达式 ？ 正则表达式是一种被用于从文本中检索符合某些特定模式的文本。 正则表达式是从左到右来匹配一个字符串的。“Regular Expression”这个词太长了，我们通常使用它的缩写“regex”或者“regexp”。正则表达式可以被用来替换字符串中的文本、验证表单、基于模式匹配从一个字符串中提取字符串等等。 想象一下，您正在编写应用程序，并且您希望在用户选择用户名时设置规则。我们希望用户名可以包含字母，数字，下划线和连字符。为了让它看起来不丑，我们还想限制用户名中的字符数量。这时我们可以使用以下正则表达式来验证用户名： 上面这个正则表达式可以匹配 john_doe，jo-hn_doe 和 john12_as。但是它不能匹配 Jo，因为该字符串里面包含大写字符，并且它太短了。 目录 什么是正则表达式 ？ 目录 1. 基本匹配 2. 元字符 2-1 英文句号 2-2 字符集 2-2-1 否定字符集 2-3 重复 2-3-1 星号 2-3-2 加号 2-3-3 问号 2-4 花括号 2-5 字符组 2-6 分支结构 2-7 转义特殊字符 2-8 定位符 2-8-1 插入符号 2-8-2 美元符号 3. 简写字符集 4. 断言 4-1 正向先行断言 4-2 负向先行断言 4-3 正向后行断言 4-4 负向后行断言 5. 标记 5-1 不区分大小写 5-2 全局搜索 5-3 多行匹配 常用正则表达式 1. 基本匹配正则表达式只是我们用于在文本中检索字符串的模式。例如正则表达式 cat，表示：字母 c 后面跟着一个字母 a，再后面跟着一个字母 t。 \"cat\" => The cat sat on the mat 正则表达式 123 会匹配字符串“123”。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。正则表达式通常区分大小写，因此正则表达式 Cat 与字符串“cat”不匹配。 \"Cat\" => The cat sat on the Cat 2. 元字符元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符在写在方括号内时有特殊含义。元字符如下： 元字符 描述 . 匹配除换行符以外的任意字符。 [ ] 字符类，匹配方括号中包含的任意字符。 [^ ] 否定字符类。匹配方括号中不包含的任意字符 * 匹配前面的子表达式零次或多次 + 匹配前面的子表达式一次或多次 ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。 {n,m} 花括号，匹配前面字符至少 n 次，但是不超过 m 次。 (xyz) 字符组，按照确切的顺序匹配字符 xyz。 | 分支结构，匹配符号之前的字符或后面的字符。 \\ 转义符，它可以还原元字符原来的含义，允许你匹配保留字符 [ ] ( ) { } . * + ? ^ $ \\ | ^ 匹配行的开始 $ 匹配行的结束 2-1 英文句号英文句号 . 是元字符的最简单的例子。元字符 . 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 .ar，表示：任意字符后面跟着一个字母 a，再后面跟着一个字母 r。 \".ar\" => The car parked in the garage. 2-2 字符集字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。例如正则表达式 [Tt]he，表示：大写 T 或小写 t ，后跟字母 h，再后跟字母 e。 \"[Tt]he\" => The car parked in the garage. 然而，字符集中的英文句号表示它字面的含义。正则表达式 ar[.]，表示小写字母 a，后面跟着一个字母 r，再后面跟着一个英文句号 . 字符。 \"ar[.]\" => A garage is a good place to park a car. 2-2-1 否定字符集一般来说插入字符 ^ 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 [^c]ar，表示：除了字母 c 以外的任意字符，后面跟着字符 a，再后面跟着一个字母 r。 \"[^c]ar\" => The car parked in the garage. 2-3 重复以下元字符 +，* 或 ? 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。 2-3-1 星号星号 * 表示匹配上一个匹配规则零次或多次。正则表达式 a* 表示小写字母 a 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。例如正则表达式 [a-z]*，表示：一行中可以包含任意数量的小写字母。 \"[a-z]*\" => The car parked in the garage #21. 星号 * 可以与元符号 . 用在一起，用来匹配任意字符串 .*。星号 * 可以与空格符 \\s 一起使用，用来匹配一串空格字符。例如正则表达式 \\s*cat\\s*，表示：零个或多个空格，后面跟小写字母 c，再后面跟小写字母 a，再在后面跟小写字母 t，后面再跟零个或多个空格。 \"\\s*cat\\s*\" => The fat cat sat on the cat. 2-3-2 加号加号 + 表示匹配上一个字符一次或多次。例如正则表达式 c.+t，表示：一个小写字母 c，后跟任意数量的字符，后跟小写字母 t。 \"c.+t\" => The fat cat sat on the mat. 2-3-3 问号在正则表达式中，元字符 ? 用来表示前一个字符是可选的。该符号匹配前一个字符零次或一次。例如正则表达式 [T]?he，表示：可选的大写字母 T，后面跟小写字母 h，后跟小写字母 e。 \"[T]he\" => The car is parked in the garage. \"[T]?he\" => The car is parked in the garage. 2-4 花括号在正则表达式中花括号（也被称为量词？）用于指定字符或一组字符可以重复的次数。例如正则表达式 [0-9]{2,3}，表示：匹配至少 2 位数字但不超过 3 位（0 到 9 范围内的字符）。 \"[0-9]{2,3}\" => The number was 9.9997 but we rounded it off to 10.0. 我们可以省略第二个数字。例如正则表达式 [0-9]{2,}，表示：匹配 2 个或更多个数字。如果我们也删除逗号，则正则表达式 [0-9]{2}，表示：匹配正好为 2 位数的数字。 \"[0-9]{2,}\" => The number was 9.9997 but we rounded it off to 10.0. \"[0-9]{2}\" => The number was 9.9997 but we rounded it off to 10.0. 2-5 字符组字符组是一组写在圆括号内的子模式 (...)。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。例如正则表达式 (ab)* 表示匹配零个或多个的字符串“ab”。我们还可以在字符组中使用元字符 |。例如正则表达式 (c|g|p)ar，表示：小写字母 c、g 或 p 后面跟字母 a，后跟字母 r。 \"(c|g|p)ar\" => The car is parked in the garage. 2-6 分支结构在正则表达式中垂直条 | 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支结构的工作方式一样。但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。例如正则表达式 (T|t)he|car，表示：匹配大写字母 T 或小写字母 t，后面跟小写字母 h，后跟小写字母 e，或匹配小写字母 c，后跟小写字母 a，后跟小写字母 r。 \"(T|t)he|car\" => The car is parked in the garage. 2-7 转义特殊字符正则表达式中使用反斜杠 \\ 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 { } [ ] / \\ + * . $ ^ | ?。在特殊字符前面加 \\，就可以使用它来做匹配字符。例如正则表达式 . 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 . 字符，正则表达式 (f|c|m)at\\.?，表示：小写字母 f、c 或者 m 后跟小写字母 a，后跟小写字母 t，后跟可选的 . 字符。 \"(f|c|m)at\\.?\" => The fat cat sat on the mat. 2-8 定位符在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。定位符有两种类型：第一种类型是 ^ 检查匹配字符是否是起始字符，第二种类型是 $，它检查匹配字符是否是输入字符串的最后一个字符。 2-8-1 插入符号插入符号 ^ 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 ^a（如果 a 是起始符号）匹配字符串 abc，它会匹配到 a。但是如果我们使用正则表达式 ^b，它是匹配不到任何东西的，因为在字符串 abc 中“b”不是起始字符。让我们来看看另一个正则表达式 ^(T|t)he，这表示：大写字母 T 或小写字母 t 是输入字符串的起始符号，后面跟着小写字母 h，后跟小写字母 e。 \"(T|t)he\" => The car is parked in the garage. \"^(T|t)he\" => The car is parked in the garage. 2-8-2 美元符号美元 $ 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 (at\\.)$，表示：小写字母 a，后跟小写字母 t，后跟一个 . 字符，且这个匹配器必须是字符串的结尾。 \"(at\\.)\" => The fat cat. sat. on the mat. \"(at\\.)$\" => The fat cat sat on the mat. 3. 简写字符集正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下： 简写 描述 . 匹配除换行符以外的任意字符 \\w 匹配所有字母和数字的字符：[a-zA-Z0-9_] \\W 匹配非字母和数字的字符：[^\\w] \\d 匹配数字：[0-9] \\D 匹配非数字：[^\\d] \\s 匹配空格符：[\\t\\n\\f\\r\\p{Z}] \\S 匹配非空格符：[^\\s] 4. 断言后行断言和先行断言有时候被称为断言，它们是特殊类型的 非捕获组（用于匹配模式，但不包括在匹配列表中）。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。例如我们想获取输入字符串 $4.44 and $10.88 中带有前缀 $ 的所有数字。我们可以使用这个正则表达式 (?&lt;=\\$)[0-9\\.]*，表示：获取包含 . 字符且前缀为 $ 的所有数字。以下是正则表达式中使用的断言： 符号 描述 ?= 正向先行断言 ?! 负向先行断言 ?&lt;= 正向后行断言 ?&lt;! 负向后行断言 4-1 正向先行断言正向先行断言认为第一部分的表达式的后面必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 (?=...)。先行断言表达式写在括号中的等号后面。例如正则表达式 (T|t)he(?=\\sfat)，表示：匹配大写字母 T 或小写字母 t，后面跟字母 h，后跟字母 e。在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配后面跟着 fat 的 The 或 the。 \"(T|t)he(?=\\sfat)\" => The fat cat sat on the mat. 4-2 负向先行断言当我们需要指定第一部分表达式的后面不跟随某一内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样，唯一的区别在于我们使用否定符号 ! 而不是等号 =，例如 (?!...)。我们来看看下面的正则表达式 (T|t)he(?!\\sfat)，表示：从输入字符串中获取全部 The 或者 the 且不匹配 fat 前面加上一个空格字符。 \"(T|t)he(?!\\sfat)\" => The fat cat sat on the mat. 4-3 正向后行断言正向后行断言用于获取跟随在特定模式之后的所有匹配内容。正向后行断言表示为 (?&lt;=...)。例如正则表达式 (?&lt;=(T|t)he\\s)(fat|mat)，表示：从输入字符串中获取在单词 The 或 the 之后的所有 fat 和 mat 单词。 \"(?","link":"/2020/03/02/zz/"},{"title":"Python入门实践","text":"​ IDE：集成开发环境。一般包括代码编辑器，调试器和图形用户界面工具。 ![Thonny](https://cdn.jsdelivr.net/gh/OldSuns/Figurebed@main/img/2021/11/13_163116.png) ​ IDLE：开发Python程序的基本IDE（包括交互式编辑器Python Shell和编辑器） 在我们接下来的学习中，代码的格式大多是交互式编辑器的格式（以&gt;&gt;&gt;开头），而我们在实际应用中则需要使用文本编辑器来编写Python代码。在目前的使用中，这两者最大的区别在于：交互式编辑器中使用一个变量会直接输出变量中存储的结果，但文本编辑器不行。示例如下： 可以看到，命令行里并没有出现该变量的内容。我们需要加入print语句以实现正常的输出。 那么在交互式编辑器如何呢？ 正常输出，没有问题。 Python 基本元素：数字、字符串和变量本章会从 Python 最基本的内置数据类型开始学习，这些类型包括： 布尔型（表示真假的类型，仅包含 True 和 False 两种取值） 整型（整数，例如 42、100000000） 浮点型（小数，例如 3.14159，或用科学计数法表示的数字，例如 1.0e8，它表示 1 乘以 10 的 8 次方，也可写作100000000.0） 字符串型（字符组成的序列） 变量、名字和对象Python 里所有数据——布尔值、整数、浮点数、字符串，甚至大型数据结构、函数以及程序——都是以对象（object）的形式存在的。这使得 Python 语言具有很强的统一性（还有许多其他有用的特性），而这恰恰是许多其他语言所缺少的。 变量编程语言允许你定义变量（variable）。所谓变量就是在程序中为了方便地引用内存中的值而为它取的名称。在 Python 中，我们用 = 来给一个变量赋值。 我们都在数学课上学过 = 代表“等于”，那么为什么计算机语言（包括 Python）要用 = 代表赋值操作呢？一种解释是标准键盘没有像左箭头一样的逻辑上能代表赋值操作的键，与其他键相比，= 显得相对不那么令人困惑；而在程序中，赋值出现的频率又要远远超过等于，因此把 = 分给了赋值操作来使用。 下面这段仅两行的 Python 程序首先将整数 7 赋值给了变量 a，之后又将 a 的值打印了出来： 123&gt;&gt;&gt; a = 7&gt;&gt;&gt; print(a)7 注意，Python 中的变量有一个非常重要的性质：它仅仅是一个名字。赋值操作并不会实际复制值，它只是为数据对象取个相关的名字。名字是对对象的引用而不是对象本身。你可以把名字想象成贴在盒子上的标签（见图 ）。 试着在交互式解释器中执行下面的操作：(1) 和之前一样，将 7 赋值给名称 a，这样就成功创建了一个包含整数 7 的对象；(2) 打印 a 的值；(3) 将 a 赋值给 b，这相当于给刚刚创建的对象又贴上了标签 b；(4) 打印 b 的值。 123456&gt;&gt;&gt; a = 7&gt;&gt;&gt; print(a)7&gt;&gt;&gt; b=a&gt;&gt;&gt; print(b)7 变量名不允许以数字开头。此外，Python 中以下划线开头的名字有特殊的含义。变量名只能包含以下字符： 小写字母（a~z） 大写字母（A~Z） 数字（0~9） 下划线（_） 运算符 运算符 描述 示例 运算结果 + 加法 5 + 8 13 - 减法 90-10 80 * 乘法 4*7 28 / 除法 7/2 3.5 // 整数除法 7//2 3 % 模（取余） 7%3 1 ** 幂 3**4 81 基数在 Python 中，整数默认使用十进制数（以 10 为底），除非你在数字前添加前缀，显式地指定使用其他基数（base）。 在 Python 中，除十进制外你还可以使用其他三种进制的数字： 0b 或 0B 代表二进制（以 2 为底） 0o 或 0O 代表八进制（以 8 为底） 0x 或 0X 代表十六进制（以 16 为底） Python 解释器会打印出它们对应的十进制整数。我们来试试这些不同进制的数。如： 123456&gt;&gt;&gt;0b10 #二进制2&gt;&gt;&gt;0o10 #八进制8&gt;&gt;&gt;0x10 #十六进制16 类型转换我们可以方便地使用 int() 函数将其他的 Python 数据类型转换为整型。它会保留传入数据的整数部分并舍去小数部分。 Python 里最简单的数据类型是布尔型，它只有两个可选值：True 和 False。当转换为整数时，它们分别代表 1 和 0： 1234&gt;&gt;&gt; int(True)1&gt;&gt;&gt; int(False)0 当将浮点数转换为整数时，所有小数点后面的部分会被舍去： 123456&gt;&gt;&gt; int(98.6) #浮点数98&gt;&gt;&gt; int(1.0e4) #科学计数法10000&gt;&gt;&gt; int(&quot;-23&quot;) #字符串-23 如果你试图将一个与数字无关的类型转化为整数，会得到一个异常： 1234&gt;&gt;&gt; int(&quot;OldSun&quot;)Traceback (most recent call last): File &quot;&lt;pyshell&gt;&quot;, line 1, in &lt;module&gt;ValueError: invalid literal for int() with base 10: 'OldSun' int() 可以接受浮点数或由数字组成的字符串，但无法接受包含小数点或指数的字符串： 1234&gt;&gt;&gt; int(&quot;98.6&quot;)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; ValueError: invalid literal for int() with base 10: '98.6' 12&gt;&gt;&gt; int(float(&quot;98.6&quot;))98 字符串将一系列字符包裹在一对单引号或一对双引号中即可创建字符串，就像下面这样： 12&gt;&gt;&gt; &quot;OldSun&quot;'OldSun' 交互式解释器输出的字符串永远是用单引号包裹的，但无论使用哪种引号，Python 对字符串的处理方式都是一样的，没有任何区别。既然如此，为什么要使用两种引号？这么做的好处是可以创建本身就包含引号的字符串，而不用使用转义符。可以在双引号包裹的字符串中使用单引号，或者在单引号包裹的字符串中使用双引号： 12&gt;&gt;&gt; &quot;'wow,',said the OldSun&quot;&quot;'wow,',said the OldSun&quot; 你还可以使用连续三个单引号 ‘’’，或者三个双引号 “”” 创建多行字符串： 你会发现解释器打印出来的和print不太一样，这是因为print会自动转换转义符，比如把“\\n”自动替换成换行。关于转义符的内容你会在之后看到。 使用 str() 可以将其他 Python 数据类型转换为字符串： 12&gt;&gt;&gt; str(98.6)'98.6' 转义符：使用\\转义python 允许你对某些字符进行转义操作，以此来实现一些难以单纯用字符描述的效果。在字符的前面添加反斜线符号 \\ 会使该字符的意义发生改变。最常见的转义符是 \\n，它代表换行符，便于你在一行内创建多行字符串。 123456&gt;&gt;&gt; me = 'OldSun\\nhave\\nno\\nPython' &gt;&gt;&gt; print(me)OldSunhavenoPython 转义符 \\t（tab 制表符）常用于对齐文本： 12345678&gt;&gt;&gt; print('\\tabc') abc&gt;&gt;&gt; print('a\\tbc') a bc&gt;&gt;&gt; print('ab\\tc') ab c&gt;&gt;&gt; print('abc\\t') abc 有时你可能还会用到 ‘ 和 “ 来表示单、双引号，尤其当该字符串由相同类型的引号包裹时： 12&gt;&gt;&gt; testimony = &quot;\\&quot;I did nothing!\\&quot; he said. \\&quot;Not that either! Or the other thing.\\&quot;&quot; &gt;&gt;&gt; print(testimony) &quot;I did nothing!&quot; he said. &quot;Not that either! Or the other thing.&quot; 如果你需要输出一个反斜线字符，连续输入两个反斜线即可 使用[start:end:step]分片分片操作（slice）可以从一个字符串中抽取子字符串（字符串的一部分）。我们使用一对方括号、起始偏移量 start、终止 偏移量 end 以及可选的步长 step 来定义一个分片。其中一些可以省略。分片得到的子串包含从 start 开始到 end 之前的全部字符。 [:] 提取从开头到结尾的整个字符串 [start:] 从 start 提取到结尾 [:end] 从开头提取到 end - 1 [start:end] 从 start 提取到 end - 1 [start:end:step] 从 start 提取到 end - 1，每 step 个字符提取一个 字符串函数使用len( )获得长度len() 函数可用于计算字符串包含的字符数： 12345&gt;&gt;&gt; len(letters)26&gt;&gt;&gt; empty = &quot;&quot;&gt;&gt;&gt; len(empty)0 使用split()分割使用内置的字符串函数 split() 可以基于分隔符将字符串分割成由若干子串组成的列表。 123&gt;&gt;&gt; todos = 'get gloves,get mask,give cat vitamins,call ambulance'&gt;&gt;&gt; todos.split(',')['get gloves', 'get mask', 'give cat vitamins', 'call ambulance'] 使用join()合并join() 函数与 split() 函数正好相反：它将包含若干子串的列表分解，并将这些子串合成一个完整的大的字符串。join() 的调用顺序看起来有点别扭，与 split() 相反，你需要首先指定粘合用的字符串，然后再指定需要合并的列表：string.join(list)。因此，为了将列表 lines 中的多个子串合并成完整的字符串，我们应该使用语句：’\\n’.join(lines)。下面的例子将列表中的名字通过逗号及空格粘合在一起： 1234&gt;&gt;&gt; list = ['OldSun', 'Love', 'Youngun']&gt;&gt;&gt; string = ', '.join(list)&gt;&gt;&gt; print(string)OldSun, Love, Youngun Python 容器：列表、元组、字典与集合列表使用[]或list()创建列表列表可以由零个或多个元素组成，元素之间用逗号分开，整个列表被方括号所包裹： 1&gt;&gt;&gt; a=[1,2,3] 也可以使用 list() 函数来创建一个空列表： 123&gt;&gt;&gt; list=list()&gt;&gt;&gt; list[] 包含列表的列表123456789&gt;&gt;&gt; a=[1,2,3]&gt;&gt;&gt; b=[4,5,6]&gt;&gt;&gt; c=[a,b]&gt;&gt;&gt; c[[1, 2, 3], [4, 5, 6]]&gt;&gt;&gt; c[0][1, 2, 3]&gt;&gt;&gt; c[0][1]2 切片我们可以使用[offset](偏移量)查找或修改元素： 1234567&gt;&gt;&gt; a=[1,2,3]&gt;&gt;&gt; b=[4,5,6]&gt;&gt;&gt; a[1]2&gt;&gt;&gt; b[0]=13&gt;&gt;&gt; b[13, 5, 6] 列表的偏移量必须是合法有效的。 同时，我们也可以切片查找元素： 12345678&gt;&gt;&gt; a=[1,2,3]&gt;&gt;&gt; a[0:2][1, 2]&gt;&gt;&gt; a[0:2]=[3,4]&gt;&gt;&gt; a[3, 4, 3]&gt;&gt;&gt; b[::-1][6, 5, 13] 添加元素使用append()添加元素至尾部传统的向列表中添加元素的方法是利用 append() 函数将元素一个个添加到尾部。例如，我们想把5添加到a列表中： 12345&gt;&gt;&gt; a[3, 4, 3]&gt;&gt;&gt; a.append(5)&gt;&gt;&gt; a[3, 4, 3, 5] 使用insert()在指定位置插入元素append() 函数只能将新元素插入到列表尾部，而使用 insert() 可以将元素插入到列表的任意位置。指定偏移量为 0 可以插入列表头部。如果指定的偏移量超过了尾部，则会插入到列表最后，就如同 append() 一样，这一操作不会产生 Python 异常。 12345&gt;&gt;&gt; a[3, 4, 3, 5]&gt;&gt;&gt; a.insert(2,'8')&gt;&gt;&gt; a[3, 4, '8', 3, 5] 删除元素使用del删除指定位置的元素1234567891234&gt;&gt;&gt; a=[3,4,'8',3,5]&gt;&gt;&gt; del a[3]&gt;&gt;&gt; a[3, 4, '8', 5] 使用remove()删除具有指定值的元素如果不确定或不关心元素在列表中的位置，可以使用 remove() 根据指定的值删除第一个被匹配到的元素。 12345&gt;&gt;&gt; a[3, 4, '8', 5]&gt;&gt;&gt; a.remove(4)&gt;&gt;&gt; a[3, '8', 5] 使用pop()获取并删除指定位置的元素使用 pop() 同样可以获取列表中指定位置的元素，但在获取完成后，该元素会被自动删除。 如果你为 pop() 指定了偏移量，它会返回偏移量对应位置的元素；如果不指定，则默认使用 -1。因此，pop(0) 将返回列表的头元素，而 pop() 或pop(-1) 则会返回列表的尾元素： 123456789&gt;&gt;&gt; a=[1,2,3,4,5,8]&gt;&gt;&gt; a.pop()8&gt;&gt;&gt; a[1, 2, 3, 4, 5]&gt;&gt;&gt; a.pop(3)4&gt;&gt;&gt; a[1, 2, 3, 5] 使用index()查询具有特定值的元素位置1234&gt;&gt;&gt; a[1, 2, 3, 5]&gt;&gt;&gt; a.index(2)1 使用count()记录特定值出现的次数12345&gt;&gt;&gt; a=[1,2,3,3,5,3,4,6]&gt;&gt;&gt; a.count(3)3&gt;&gt;&gt; a.count(6)1 使用sort()重新排列元素在实际应用中，经常需要将列表中的元素按值排序，而不是按照偏移量排序。Python 为此提供了两个函数： 列表方法 sort() 会对原列表进行排序，改变原列表内容。 通用函数 sorted() 则会返回排好序的列表副本，原列表内容不变。 如果列表中的元素都是数字，它们会默认地被排列成从小到大的升序。如果元素都是字符串，则会按照字母表顺序排列。 1234&gt;&gt;&gt; a=[27,13,89,5]&gt;&gt;&gt; a.sort()&gt;&gt;&gt; a[5, 13, 27, 89] 123456&gt;&gt;&gt; a=[27,13,89,5]&gt;&gt;&gt; b=sorted(a)&gt;&gt;&gt; a[27, 13, 89, 5]&gt;&gt;&gt; b[5, 13, 27, 89] 使用len()获取长度len() 可以返回列表长度： 12&gt;&gt;&gt; len(a)4 使用=赋值，使用copy()复制如果将一个列表赋值给了多个变量，改变其中的任何一处会造成其他变量对应的值也被修改，如下所示： 123456789&gt;&gt;&gt; a = [1, 2, 3]&gt;&gt;&gt; a[1, 2, 3]&gt;&gt;&gt; b = a&gt;&gt;&gt; b[1, 2, 3]&gt;&gt;&gt; a[0] = 'surprise'&gt;&gt;&gt; a['surprise', 2, 3] 现在，b 的值是什么？它会保持 [1, 2, 3]，还是改变为 [‘surprise’, 2, 3] ？试一试： 12&gt;&gt;&gt; b['surprise', 2, 3] 还记得第 2 章中贴标签的比喻吗？ b 与 a 实际上指向的是同一个对象，因此，无论我们是通过 a 还是通过 b 来修改列表的内容，其结果都会作用于双方。 通过下面任意一种方法，都可以将一个列表的值复制到另一个新的列表中： 列表 copy() 函数 list() 转换函数 列表分片 [:] 1234&gt;&gt;&gt; a = [1, 2, 3]&gt;&gt;&gt; b = a.copy()&gt;&gt;&gt; c = list(a)&gt;&gt;&gt; d = a[:] 改变 a 不影响 b、c 和 d 的复制 12345678&gt;&gt;&gt; a[0] = 'integer lists are boring'&gt;&gt;&gt; a ['integer lists are boring', 2, 3]&gt;&gt;&gt; b[1, 2, 3]&gt;&gt;&gt; c[1, 2, 3]&gt;&gt;&gt; d[1, 2, 3] 元组与列表类似，元组也是由任意类型元素组成的序列。与列表不同的是，元组是不可变的，这意味着一旦元组被定义，将无法再进行增加、删除或修改元素等操作。因此，元组就像是一个常量列表。 下面的例子展示了创建元组的过程，它的语法与我们直观上预想的有一些差别。可以用 () 创建一个空元组： 123&gt;&gt;&gt; empty_tuple = ()&gt;&gt;&gt; empty_tuple() 创建包含一个或多个元素的元组时，每一个元素后面都需要跟着一个逗号，即使只包含一个元素也不能省略： 123&gt;&gt;&gt; king = 'OldSun',&gt;&gt;&gt; king('OldSun',) 如果创建的元组所包含的元素数量超过 1，最后一个元素后面的逗号可以省略： 123&gt;&gt;&gt; tuple = 'max', 'mid', 'min'&gt;&gt;&gt; tuple('max', 'mid', 'min') Python 的交互式解释器输出元组时会自动添加一对圆括号。你并不需要这么做——定义元组真正靠的是每个元素的后缀逗号 ——但如果你习惯添加一对括号也无可厚非。可以用括号将所有元素包裹起来，这会使得程序更加清晰： 123&gt;&gt;&gt; tuple = ('max', 'mid', 'min')&gt;&gt;&gt; tuple('max', 'mid', 'min') 可以一口气将元组赋值给多个变量： 12345678&gt;&gt;&gt; tuple = ('max', 'mid', 'min')&gt;&gt;&gt; a, b, c=tuple&gt;&gt;&gt; a'max'&gt;&gt;&gt; b'mid'&gt;&gt;&gt; c'min' 有时这个过程被称为元组解包。可以利用元组在一条语句中对多个变量的值进行交换，而不需要借助临时变量： 1234567&gt;&gt;&gt; a=&quot;Tuple&quot;&gt;&gt;&gt; b=&quot;OldSun&quot;&gt;&gt;&gt; a,b=b,a&gt;&gt;&gt; a'OldSun'&gt;&gt;&gt; b'Tuple' 字典字典（dictionary）与列表类似，但其中元素的顺序无关紧要，因为它们不是通过像 0 或 1 的偏移量访问的。取而代之，每个元素拥有与之对应的互不相同的键（key），需要通过键来访问元素。键通常是字符串，但它还可以是 Python 中其他任意的不可变类型：布尔型、整型、浮点型、元组、字符串，以及其他一些在后面的内容中会见到的类型。字典是可变的，因此你可以增加、删除或修改其中的键值对。字典是无序的，它没有固定的顺序。 用大括号（{}）将一系列以逗号隔开的键值对（key:value）包裹起来即可进行字典的创建。记住，字典的键必须保证互不相同,否则后加入的同键的值会覆盖前一个。 123456&gt;&gt;&gt; a={&quot;name&quot;:&quot;OldSun&quot;,&quot;age&quot;:16}&gt;&gt;&gt; a['name']'OldSun'&gt;&gt;&gt; a[&quot;age&quot;]=17&gt;&gt;&gt; a{'name': 'OldSun', 'age': 17} 集合集合就像舍弃了值，仅剩下键的字典一样。键与键之间也不允许重复。如果你仅仅想知道某一个元素是否存在而不关心其他的，使用集合是个非常好的选择。如果需要为键附加其他信息的话，建议使用字典。很久以前，当你还在小学时，可能就学到过一些关于集合论的知识。当然，如果你的学校恰好跳过了这一部分内容（或者实际上教了，但你当时正好盯着窗外发呆，我小时候就总是这样开小差），可以仔细看看下图，它展示了我们对于集合进行的最基本的操作——交和并。 你可以使用 set() 函数创建一个集合，或者用大括号将一系列以逗号隔开的值包裹起来，如下所示： 123456789&gt;&gt;&gt; empty_set = set()&gt;&gt;&gt; empty_setset()&gt;&gt;&gt; even_numbers = {0, 2, 4, 6, 8}&gt;&gt;&gt; even_numbers{0, 8, 2, 4, 6}&gt;&gt;&gt; odd_numbers = {1, 3, 5, 7, 9}&gt;&gt;&gt; odd_numbers{9, 3, 1, 5, 7} 与字典的键一样，集合是无序的。 由于 [ ] 能创建一个空列表，你可能期望 {} 也能创建空集。但事实上，{ } 会创建一个空字典，这也是为什么交互式解释器把空集输出为 set() 而不是 {}。为何如此？没有什么特殊原因，仅仅是因为字典出现的比较早并抢先占据 了花括号。 使用set()将其他类型转换为集合你可以利用已有列表、字符串、元组或字典的内容来创建集合，其中重复的值会被丢弃。 首先来试着转换一个包含重复字母的字符串： 12&gt;&gt;&gt; set( 'letters' ){'l', 'e', 't', 'r', 's'} 注意，上面得到的集合中仅含有一个 ‘e’ 和一个 ‘t’，尽管字符串 ‘letters’ 里各自包含两个。列表和元组都可以用set()来建立集合。要注意，当字典作为参数传入 set() 函数时，只有键会被使用： 12&gt;&gt;&gt; set( {'apple': 'red', 'orange': 'orange', 'cherry': 'red'} ){'apple', 'cherry', 'orange'} 集合运算符之后的例子会涵盖所有的集合运算符。有些运算使用特殊定义过的标点，另一些则使用函数，还有一些运算两者都可使用。这里使用测试集合 a（包含 1 和 2），以及 b（包含 2 和 3）： 12&gt;&gt;&gt; a = {1,2}&gt;&gt;&gt; b = {2,3} 可以通过使用特殊标点符号 &amp; 或者集合函数 intersection() 获取集合的交集（两集合共有元素），如下所示： 1234&gt;&gt;&gt; a &amp; b{2}&gt;&gt;&gt; a.intersection(b){2} 下面的例子中，使用 | 或者 union() 函数来获取集合的并集（至少出现在一个集合中的元素）： 1234&gt;&gt;&gt; a | b{1, 2, 3}&gt;&gt;&gt; a.union(b){1, 2, 3} 使用字符 - 或者 difference() 可以获得两个集合的差集（出现在第一个集合但不出现在第二个集合）： 1234&gt;&gt;&gt; a - b{1}&gt;&gt;&gt; a.difference(b){1} 使用 ^ 或者 symmetric_difference() 可以获得两个集合的异或集（仅在两个集合中出现一次）： 1234&gt;&gt;&gt; a ^ b{1, 3}&gt;&gt;&gt; a.symmetric_difference(b){1, 3} 使用 &lt;= 或者 issubset() 可以判断一个集合是否是另一个集合的子集（第一个集合的所有元素都出现在第二个集合中）： 1234&gt;&gt;&gt; a &lt;= bFalse&gt;&gt;&gt; a.issubset(b)False 同理，&lt; 可以判断真子集，&gt;= 可以判断超集，&gt; 可以判断真超集。 代码结构循环我们这里略过了if、elif和else的分支判断。相信大家都会的。 While循环Python 中最简单的循环机制是 while。打开交互式解释器，执行下面的从 1 打印到 5 的简单循环： 1234567891011&gt;&gt;&gt; count=1&gt;&gt;&gt; while count&lt;=5:... print(count)... count+=1...12345&gt;&gt;&gt; 首先将变量 count 的值赋为 1，while 循环比较 count 的值和 5 的大小关系，如果 count 小于等于 5 的话继续执行。在 环内部，打印 count 变量的值，然后使用语句 count += 1 对 count 进行自增操作，返回到循环的开始位置，继续比较count 和 5 的大小关系。现在，count 变量的值为 2，因此 while 循环内部的代码会被再次执行，count 值变为 3 。 在 count 从 5 自增到 6 之前循环一直进行。然后下次判断时，count &lt;= 5 的条件不满足，while 循环结束。Python 跳到循环下面的代码。 使用break跳出循环如果你想让循环在某一条件下停止，但是不确定在哪次循环跳出，可以在无限循环中声明 break 语句。这次，我们通过Python 的 input() 函数从键盘输入一行字符串，然后将字符串转换成整数形式后加一。当输入的一行仅含有字符 q 时，跳出循环 ： 1234567891011&gt;&gt;&gt; while True: stuff = input(&quot;Number to plus 1 [ type q to quit ]: &quot;) if stuff == &quot;q&quot;: break print(int(stuff)+1) Number to plus 1 [ type q to quit ]: 34Number to plus 1 [ type q to quit ]: 45Number to plus 1 [ type q to quit ]: q 使用continue跳到循环开始有时我们并不想结束整个循环，仅仅想跳到下一轮循环的开始。下面是一个编造的例子：读入一个整数，如果它是奇数则输出它的平方数；如果是偶数则跳过。同样使用 q 来结束循环，代码中加上了适当的注释： 12345678910111213141516&gt;&gt;&gt; while True:... value = input(&quot;Int , please [q to quit]: &quot;)... if value == &quot;q&quot;: #停止循环... break... num = int(value)... if num % 2 == 0: #判断偶数... continue... print(num, &quot;squared is&quot;, num*num)...Int , please [q to quit]: 33 squared is 9Int , please [q to quit]: 4Int , please [q to quit]: 55 squared is 25Int , please [q to quit]: q&gt;&gt;&gt; 循环外使用else如果 while 循环正常结束（没有使用 break 跳出），程序将进入到可选的 else 段。当你使用循环来遍历检查某一数据结构时，找到满足条件的解使用 break 跳出；循环结束，即没有找到可行解时，将执行 else 部分代码段： 12345678910&gt;&gt;&gt; while position &lt; len(numbers):... number = numbers[position]... if number %2 == 0:... print(&quot;Found even number&quot;,number)... break... position+=1... else:... print(&quot;No even number found&quot;)...No even number found 使用for迭代Python 频繁地使用迭代器。它允许在数据结构长度未知和具体实现未知的情况下遍历整个数据结构，并且支持迭代快速读写中的数据，以及允许不能一次读入计算机内存的数据流的处理。 12345678&gt;&gt;&gt; a=[1,3,5,7]&gt;&gt;&gt; for i in a: print(i) 1357 列表、字符串、元组、字典、集合等都是 Python 中可迭代的对象。元组或者列表在一次迭代过程产生一项，而字符串迭代会产生一个字符，如下所示： 123456&gt;&gt;&gt; for i in &quot;cat&quot;: print(i) cat 对一个字典（或者字典的 keys() 函数）进行迭代将返回字典中的键。 1234567&gt;&gt;&gt; dic={&quot;a&quot;:3,&quot;b&quot;:7,&quot;me&quot;:&quot;you&quot;}&gt;&gt;&gt; for i in dic: #等同于for i in dic.keys(): print(i) abme 123456&gt;&gt;&gt; for i in dic.values(): print(i) 37you 123456789101112&gt;&gt;&gt; for i in dic.items(): print(i) ('a', 3)('b', 7)('me', 'you')&gt;&gt;&gt; for i,j in dic.items(): print(&quot;key=&quot;,i,&quot;value=&quot;,j) key= a value= 3key= b value= 7key= me value= you 在 for 循环中跳出的用法和在 while 循环中是一样的。 在一个循环中使用 continue 会跳到下一次的迭代开始，这一点和 while 循环也是类似的。 类似于 while，for 循环也可以使用可选的 else 代码段，用来判断 for 循环是否正常结束（没有调用 break 跳出）。若正常结束，则会执行 else 段。 推导式推导式是从一个或者多个迭代器快速简洁地创建数据结构的一种方法。它可以将循环和条件判断结合，从而避免语法冗长的代码。会使用推导式有时可以说明你已经超过 Python 初学者的水平。也就是说，使用推导式更像 Python 风格。 列表推导式你可以从 1 到 5 创建一个整数列表，每次增加一项，如下所示： 12345678&gt;&gt;&gt; number_list = []&gt;&gt;&gt; number_list.append(1)&gt;&gt;&gt; number_list.append(2)&gt;&gt;&gt; number_list.append(3) &gt;&gt;&gt; number_list.append(4) &gt;&gt;&gt; number_list.append(5) &gt;&gt;&gt; number_list[1, 2, 3, 4, 5] 或者，可以结合 range() 函数使用一个迭代器： 123456&gt;&gt;&gt; number_list = []&gt;&gt;&gt; for number in range(1, 6): ... number_list.append(number)...&gt;&gt;&gt; number_list[1, 2, 3, 4, 5] 或者，直接把 range() 的返回结果放到一个列表中： 123&gt;&gt;&gt; number_list = list(range(1, 6))&gt;&gt;&gt; number_list[1, 2, 3, 4, 5] 上面这些方法都是可行的 Python 代码，会得到相同的结果。然而，更像 Python 风格的创建列表方式是使用列表推导。最简单的形式如下所示： 1[ expression for item in iterable ] 下面的例子将通过列表推导创建一个整数列表： 123&gt;&gt;&gt; number_list = [number for number in range(1,6)]&gt;&gt;&gt; number_list[1, 2, 3, 4, 5] 在第一行中，第一个 number 变量为列表生成值，也就是说，把循环的结果放在列表 number_list 中。第二个 number 为循环变量。其中第一个 number 可以为表达式，试试下面改编的例子： 123&gt;&gt;&gt; number_list = [number**2 for number in range(1,6)]&gt;&gt;&gt; number_list[1, 4, 9, 16, 25] 列表推导把循环放在方括号内部。这种例子和之前碰到的不大一样，但却是更为常见的方式。同样，列表推导也可以像下面的例子加上条件表达式： 1[expression for item in iterable if condition] 现在，通过推导创建一个在 1 到 5 之间的奇数列表（当 number % 2 为真时，代表奇数；为假时，代表偶数）： 123&gt;&gt;&gt; a_list = [number for number in range(1,6) if number % 2 == 1]&gt;&gt;&gt; a_list[1, 3, 5] 如果在对应的推导中有多个 for … 语句，可以使用以下的循环嵌套： 12345678910&gt;&gt;&gt; cells = [(row, col) for row in range(1,4) for col in range(1,3)] &gt;&gt;&gt; for cell in cells: print(cell) (1, 1)(1, 2)(2, 1)(2, 2)(3, 1)(3, 2) 另外，在对 cells 列表进行迭代时可以通过元组拆封将变量 row 和 col 的值分别取出： 123456789&gt;&gt;&gt; for row,col in cells: print(row,col) 1 11 22 12 23 13 2 其中，在列表推导中 for row … 和 for col … 都可以有自己单独的 if 条件判断。 字典推导式除了列表，字典也有自己的推导式。最简单的例子就像： 1{ key_expression : value_expression for expression in iterable if condition} 类似于列表推导，字典推导也有 if 条件判断以及多个 for 循环迭代语句： 1234&gt;&gt;&gt; word = 'letters'&gt;&gt;&gt; letter_counts = {letter: word.count(letter) for letter in word} &gt;&gt;&gt; letter_counts{'l': 1, 'e': 2, 't': 2, 'r': 1, 's': 1} 程序中，对字符串 ‘letters’ 中出现的字母进行循环，计算出每个字母出现的次数。对于程序执行来说，两次调用word.count(letter) 浪费时间，因为字符串中 t 和 e 都出现了两次，第一次调用 word.count() 时已经计算得到相应的值。下面的例子会解决这个小问题，更符合 Python 风格： 1234&gt;&gt;&gt; word = 'letters'&gt;&gt;&gt; letter_counts = {letter: word.count(letter) for letter in set(word)}&gt;&gt;&gt; letter_counts{'l': 1, 'e': 2, 't': 2, 'r': 1, 's': 1} 字典键的顺序和之前的例子是不同的，因为是对 set(word) 集合进行迭代的，而前面的例子是对 word 字符串迭代。 集合推导式集合也不例外，同样有推导式。最简单的版本和之前的列表、字典推导类似： 1{expression for expression in iterable if condition } 123&gt;&gt;&gt; a_set = {number for number in range(1,6) if number % 3 == 1} &gt;&gt;&gt; a_set{1,4} 元组是没有推导式的。你可能认为将列表推导式中的方括号变成圆括号就可以定义元组推导式，但事实并非如此。这会生成一个生成器推导式。感兴趣的可以自行搜索。 用户输入函数input()函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中，以方便你使用。 例如，下面的程序让用户输入一些文本，再将这些文本呈现给用户： 12message = input(&quot;Tell me something, and I will repeat it back to you: &quot;) print(message) 函数input()接受一个参数：即要向用户显示的提示或说明，让用户知道该如何做。在这个示例中，Python运行第1行代码时，用户将看到提示Tell me something, and I will repeat it back to you:。程序等待用户输入，并在用户按回车键后继续运行。输入存储在变量message中，接下来的print(message)将输入呈现给用户： 12Tell me something, and I will repeat it back to you: Hello everyone!Hello everyone! 函数定义函数下面是一个打印问候语的简单函数，名为greet_user()： 12345def greet_user(): &quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot; print(&quot;Hello!&quot;) greet_user() 这个示例演示了最简单的函数结构。第一行代码使用关键字def来告诉Python你要定义一个函数。这是函数定义，向Python 指出了函数名，还可能在括号内指出函数为完成其任务需要什么样的信息。在这里，函数名为greet_user()，它不需要任何信息就能完成其工作，因此括号是空的（即便如此，括号也必不可少）。最后，定义以冒号结尾。 紧跟在def greet_user():后面的所有缩进行构成了函数体。处的文本是被称为文档字符串（docstring）的注释，描述了函数是做什么的。文档字符串用三引号括起，Python使用它们来生成有关程序中函数的文档。 代码行print(&quot;Hello!&quot;)是函数体内的唯一一行代码，greet_user()只做一项工作：打印Hello!。 要使用这个函数，可调用它。函数调用让Python执行函数的代码。要调用函数，可依次指定函数名以及用括号括起的必要信息。由于这个函数不需要任何信息，因此调用它时只需输入greet_user()即可。和预期的一样，它打印Hello!： 12&gt;&gt;&gt; greet_user()Hello! 向函数传递信息只需稍作修改，就可以让函数greet_user()不仅向用户显示Hello!，还将用户的名字用作抬头。为此，可在函数定义def greet_user()的括号内添加username。通过在这里添加username，就可让函数接受你给username指定的任何值。现在，这个函数要求你调用它时给username指定一个值。调用greet_user()时，可将一个名字传递给它，如下所示： 123def greet_user(username): &quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot; print(&quot;Hello, &quot; + username.title() + &quot;!&quot;) #.title()方法可以是字符串开头大写 12&gt;&gt;&gt; greet_user('oldsun')Hello, Oldsun! 实参和形参前面定义函数greet_user()时，要求给变量username指定一个值。调用这个函数并提供这种信息（人名）时，它将打印相应的问候语。 在函数greet_user()的定义中，变量username是一个形参——函数完成其工作所需的一项信息。在代码greet_user(‘oldsun’)中，值’oldsun’是一个实参。实参是调用函数时传递给函数的信息。我们调用函数时，将要让函数使用的信息放在括号内。在greet_user(‘oldsun’)中，将实参’oldsun’传递给了函数greet_user()，这个值被存储在形参username中。 传递实参鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用位置实参，这要求实参的顺序与形参的顺序相同；也可使用关键字实参，其中每个实参都由变量名和值组成；还可使用列表和字典。下面来依次介绍这些方式。 位置实参你调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。 为明白其中的工作原理，来看一个字符串相加的函数。这个函数将两个字符串进行拼接，如下所示： 123456def str_sum(str1,str2): sum = str1+str2 return suma=&quot; I am &quot;b=&quot;OldSun&quot; 使用位置实参来调用函数时，如果实参的顺序不正确，结果可能出乎意料： 1234&gt;&gt;&gt; str_sum(a,b)' I am OldSun'&gt;&gt;&gt; str_sum(b,a)'OldSun I am ' 因此，请务必确认函数调用中实参的顺序与函数定义中形参的顺序一致。 关键字实参关键字实参是传递给函数的名称—值对。你直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。以上面定义的函数为例： 1234&gt;&gt;&gt; str_sum(str1=a,str2=b)' I am OldSun'&gt;&gt;&gt; str_sum(str2=b,str1=a)' I am OldSun' 关键字实参的顺序无关紧要，因为Python知道各个值该存储到哪个形参中。下面两个函数调用是等效的： 使用关键字实参时，务必准确地指定函数定义中的形参名。 默认值编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。 我们定义一个两数相加的函数，在其中我们设置形参arg2默认为10： 123def sum(arg1,arg2=10): sum =arg1+arg2 return sum 1234&gt;&gt;&gt; sum(10)20&gt;&gt;&gt; sum(10,30)40 使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的形参。这让Python依然能够正确地解读位置实参。 返回值函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回的值被称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。简单的例子便是上面的str_sum函数和sum函数。当然，我们也可以让return带上表达式： 123def sum(arg1,arg2=10): sum =arg1+arg2 return sum+10 12&gt;&gt;&gt; sum(13,40)63","link":"/2019/11/20/python/"}],"tags":[{"name":"v2ray","slug":"v2ray","link":"/tags/v2ray/"},{"name":"cloudflare","slug":"cloudflare","link":"/tags/cloudflare/"},{"name":"Minecraft","slug":"Minecraft","link":"/tags/Minecraft/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"telegram","slug":"telegram","link":"/tags/telegram/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"jsDelivr","slug":"jsDelivr","link":"/tags/jsDelivr/"},{"name":"python","slug":"python","link":"/tags/python/"}],"categories":[]}