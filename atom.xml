<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饼干博客</title>
  
  
  <link href="https://g8d.xyz/atom.xml" rel="self"/>
  
  <link href="https://g8d.xyz/"/>
  <updated>2021-11-25T10:10:29.282Z</updated>
  <id>https://g8d.xyz/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021.11.25</title>
    <link href="https://g8d.xyz/2021/11/25/2021-11-18/"/>
    <id>https://g8d.xyz/2021/11/25/2021-11-18/</id>
    <published>2021-11-25T10:11:42.000Z</published>
    <updated>2021-11-25T10:10:29.282Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="47a0e051685cbf81039784782a8908c70edb238bed3d2ecf4fcc12094fb99a64"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码在TG群</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">该文章已加密, 请输入密码查看。</summary>
    
    
    
    
    <category term="v2ray" scheme="https://g8d.xyz/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare Worker 无服务器追查 Git 仓库代码泄露</title>
    <link href="https://g8d.xyz/2021/11/24/Cloudflare-Worker-%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%BD%E6%9F%A5-Git-%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    <id>https://g8d.xyz/2021/11/24/Cloudflare-Worker-%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%BD%E6%9F%A5-Git-%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E6%B3%84%E9%9C%B2/</id>
    <published>2021-11-24T14:45:45.000Z</published>
    <updated>2021-11-24T14:54:09.914Z</updated>
    
    <content type="html"><![CDATA[<p>大部分 Git 平台，如 Github、Gitlab 等，会在打开仓库时自动渲染 README.md，而我们利用这一特性，通过对 README.md 中的图片访问日志加以记录，可以实现追查代码泄露的目的。</p><span id="more"></span><p>如果你还没有 Cloudflare 账号，<a href="https://dash.cloudflare.com/sign-up">可以申请一个</a>。<br>登录 Cloudflare 后，进入 Workers 页面，点击 KV。<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-1.png"><br>添加一个 Cloudflare KV，起名 ref，用于记录访问记录。<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-2.png"><br>创建 Cloudflare Worker，起名 img，用于记录请求信息，并转发图片资源请求。<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-3.png"><br>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&#x27;fetch&#x27;, (event) =&gt; &#123;</span><br><span class="line">  event.respondWith(handleRequest(event.request));</span><br><span class="line">&#125;);</span><br><span class="line">async function handleRequest(request) &#123;</span><br><span class="line">  let response;</span><br><span class="line">  if (request.url.slice(-4).toLowerCase() === &#x27;.png&#x27;) &#123;</span><br><span class="line">    const ref = request.headers.get(&#x27;referer&#x27;);</span><br><span class="line">    if (ref) &#123;</span><br><span class="line">      const time = new Date().toLocaleString(&#x27;zh-CN&#x27;, &#123; timeZone: &#x27;Asia/Shanghai&#x27; &#125;);</span><br><span class="line">      const ip = request.headers.get(&#x27;CF-Connecting-IP&#x27;);</span><br><span class="line">      const ua = request.headers.get(&#x27;User-Agent&#x27;);</span><br><span class="line">      const key = `Referer: $&#123;ref&#125;`;</span><br><span class="line">      const val = `时间: $&#123;time&#125;\nIP: $&#123;ip&#125;\nUA: $&#123;ua&#125;`;</span><br><span class="line">      await REF.put(key, val, &#123; expirationTtl: 60 * 60 * 24 * 365 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const redirect = new Request(&#x27;https://cdn.jsdelivr.net/gh/imaegoo/image/1x1_ffffff00.png&#x27;);</span><br><span class="line">    response = await fetch(redirect);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    response = new Response(&#x27;not found&#x27;, &#123; status: 404 &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 KV ref 的命名空间绑定到 Worker img。<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-4.png"><br>在仓库的 <code>README.md</code> 中插入图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://img.imaegoo.workers.dev/image.png)</span><br></pre></td></tr></table></figure><p>到 KV ref 中查看效果<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-5.png"><br><img src="https://img.imaegoo.workers.dev/image.png"><br>利用同样的思路和方法，我们还可以追查网站文章未经授权的转载，试试看！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大部分 Git 平台，如 Github、Gitlab 等，会在打开仓库时自动渲染 README.md，而我们利用这一特性，通过对 README.md 中的图片访问日志加以记录，可以实现追查代码泄露的目的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>Markdown编辑器Editor.md集成使用教程</title>
    <link href="https://g8d.xyz/2021/11/21/Markdown-Editor/"/>
    <id>https://g8d.xyz/2021/11/21/Markdown-Editor/</id>
    <published>2021-11-21T10:24:21.000Z</published>
    <updated>2021-11-23T10:15:25.209Z</updated>
    
    <content type="html"><![CDATA[<p>typecho同款编辑器带ui界面小白易上手</p><span id="more"></span><img src="https://cdn.jsdelivr.net/gh/ruiliijdhdhdh/photo@latest//img/202111212009163.png"/><h1 id="一、下载插件"><a href="#一、下载插件" class="headerlink" title="一、下载插件"></a><strong>一、下载插件</strong></h1><p> 项目地址：<a href="http://pandao.github.io/editor.md/">http://pandao.github.io/editor.md/</a></p><h1 id="二、引用插件"><a href="#二、引用插件" class="headerlink" title="二、引用插件"></a><strong>二、引用插件</strong></h1><p> 下载安装包后放在相应的目录中并引用；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;lib/js/editor.md-master/css/editormd.css&quot; /&gt;</span><br><span class="line">//依赖jquery</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;lib/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;lib/js/editor.md-master/editormd.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">//需要这三个文件，自己对应好目录哦</span><br></pre></td></tr></table></figure><h1 id="三、在自己的页面中加上对应的id"><a href="#三、在自己的页面中加上对应的id" class="headerlink" title="三、在自己的页面中加上对应的id"></a><strong>三、在自己的页面中加上对应的id</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btns&quot;&gt;</span><br><span class="line">         &lt;button id=&quot;goto-line-btn&quot;&gt;Goto line 90&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;show-btn&quot;&gt;Show editor&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;hide-btn&quot;&gt;Hide editor&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;get-md-btn&quot;&gt;Get Markdown&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;get-html-btn&quot;&gt;Get HTML&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;watch-btn&quot;&gt;Watch&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;unwatch-btn&quot;&gt;Unwatch&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;preview-btn&quot;&gt;Preview HTML (Press Shift + ESC cancel)&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;fullscreen-btn&quot;&gt;Fullscreen (Press ESC cancel)&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;show-toolbar-btn&quot;&gt;Show toolbar&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;close-toolbar-btn&quot;&gt;Hide toolbar&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;toc-menu-btn&quot;&gt;ToC Dropdown menu&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;toc-default-btn&quot;&gt;ToC default&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div id=&quot;layout&quot; class=&quot;editor&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;test-editormd&quot;&gt;</span><br><span class="line">      &lt;textarea&gt;&lt;/textarea&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="四、js代码"><a href="#四、js代码" class="headerlink" title="四、js代码"></a><strong>四、js代码</strong></h1><p>主要就是说这个就是代码，记得make一下！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> var testEditor;</span><br><span class="line">    testEditor = editormd(&quot;test-editormd&quot;, &#123;</span><br><span class="line">            path : &quot;/static/plugins/editor-md/lib/&quot;,</span><br><span class="line">            width: &quot;60%&quot;,     //宽度</span><br><span class="line">            height: &quot;400px&quot;,  //高</span><br><span class="line">            theme: &quot;dark&quot;,//工具栏主题</span><br><span class="line">            previewTheme: &quot;dark&quot;,//预览主题</span><br><span class="line">            editorTheme: &quot;pastel-on-dark&quot;,//编辑主题</span><br><span class="line">            markdown: &quot;&quot;,</span><br><span class="line"></span><br><span class="line">            placeholder:&#x27;Markdown编辑，左边编写，右边预览&#x27;,  //默认显示的文字，这里就不解释了</span><br><span class="line">            watch : false,                // 关闭实时预览</span><br><span class="line">            syncScrolling: &quot;single&quot;,  </span><br><span class="line">            codeFold: true,</span><br><span class="line">            //toolbar  : false,             //关闭工具栏</span><br><span class="line">            //previewCodeHighlight : false, // 关闭预览 HTML 的代码块高亮，默认开启</span><br><span class="line">            </span><br><span class="line">            saveHTMLToTextarea: true,       // 保存 HTML 到 Textarea</span><br><span class="line">            searchReplace: true,</span><br><span class="line">            htmlDecode: &quot;style,script,iframe|on*&quot;,   // 开启 HTML 标签解析，为了安全性，默认不开启 </span><br><span class="line">            emoji: true,</span><br><span class="line">    taskList: true,</span><br><span class="line">    tocm: true,                // Using [TOCM]</span><br><span class="line">    tex: true,                   // 开启科学公式TeX语言支持，默认关闭</span><br><span class="line">    flowChart: true,             // 开启流程图支持，默认关闭</span><br><span class="line">    sequenceDiagram: true,       // 开启时序/序列图支持，默认关闭,</span><br><span class="line">           /*</span><br><span class="line">            &#123;</span><br><span class="line">                success : 0 | 1, //0表示上传失败;1表示上传成功</span><br><span class="line">                message : &quot;提示的信息&quot;,</span><br><span class="line">                url     : &quot;图片地址&quot; //上传成功时才返回</span><br><span class="line">            &#125;</span><br><span class="line">            */</span><br><span class="line">            imageUpload: true,</span><br><span class="line">    imageFormats: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;webp&quot;],</span><br><span class="line">    imageUploadURL: &quot;/Center/RichTextUpload&quot;,</span><br><span class="line"></span><br><span class="line">            //dialogLockScreen : false,   // 设置弹出层对话框不锁屏，全局通用，默认为true</span><br><span class="line">            //dialogShowMask : false,     // 设置弹出层对话框显示透明遮罩层，全局通用，默认为true</span><br><span class="line">    //dialogDraggable : false,    // 设置弹出层对话框不可拖动，全局通用，默认为true</span><br><span class="line">    //dialogMaskOpacity : 0.4,    // 设置透明遮罩层的透明度，全局通用，默认值为0.1</span><br><span class="line">    //dialogMaskBgColor : &quot;#000&quot;, // 设置透明遮罩层的背景颜色，全局通用，默认为#fff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         toolbarAutoFixed:true,//工具栏自动固定定位的开启与禁用</span><br><span class="line">         // toolbarIcons : function() &#123;  //自定义工具栏，后面有详细介绍</span><br><span class="line">         //     return laofaneditormd.toolbarModes[&#x27;simple&#x27;]; // full, simple, mini</span><br><span class="line">         // &#125;,</span><br><span class="line"></span><br><span class="line">onload: function () &#123;</span><br><span class="line">//console.log(&#x27;onload&#x27;, this);</span><br><span class="line">//this.fullscreen();</span><br><span class="line">//this.unwatch();</span><br><span class="line">//this.watch().fullscreen();</span><br><span class="line">//this.setMarkdown(&quot;#PHP&quot;);</span><br><span class="line">//this.width(&quot;100%&quot;);</span><br><span class="line">//this.height(480);</span><br><span class="line">//this.resize(&quot;100%&quot;, 640);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>//上面的挑有用的写上去就行</p><p>综上所述一个编辑器就诞生了，下面有几个小知识点，大家看一下，或许用得上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//跳转到行</span><br><span class="line"> $(&quot;#goto-line-btn&quot;).bind(&quot;click&quot;, function()&#123;</span><br><span class="line">     laofaneditormd.gotoLine(5);</span><br><span class="line"> &#125;);</span><br><span class="line"> //显示编辑器</span><br><span class="line"> $(&quot;#show-btn&quot;).bind(&#x27;click&#x27;, function()&#123;</span><br><span class="line">     laofaneditormd.show();</span><br><span class="line"> &#125;);</span><br><span class="line"> //隐藏编辑器</span><br><span class="line"> $(&quot;#hide-btn&quot;).bind(&#x27;click&#x27;, function()&#123;</span><br><span class="line">     laofaneditormd.hide();</span><br><span class="line"> &#125;);</span><br><span class="line"> //获取md</span><br><span class="line"> $(&quot;#get-md-btn&quot;).bind(&#x27;click&#x27;, function()&#123;</span><br><span class="line">     alert(laofaneditormd.getMarkdown());</span><br><span class="line"> &#125;);</span><br><span class="line"> //获取html</span><br><span class="line"> $(&quot;#get-html-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     alert(laofaneditormd.getHTML());</span><br><span class="line"> &#125;);                </span><br><span class="line"> //打开右侧实时预览</span><br><span class="line"> $(&quot;#watch-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.watch();</span><br><span class="line"> &#125;);                 </span><br><span class="line"> //关闭右侧实时预览</span><br><span class="line"> $(&quot;#unwatch-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.unwatch();</span><br><span class="line"> &#125;);              </span><br><span class="line"> //预览结果</span><br><span class="line"> $(&quot;#preview-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.previewing();</span><br><span class="line"> &#125;);</span><br><span class="line"> //全屏</span><br><span class="line"> $(&quot;#fullscreen-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.fullscreen();</span><br><span class="line"> &#125;);</span><br><span class="line"> //显示工具栏</span><br><span class="line"> $(&quot;#show-toolbar-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.showToolbar();</span><br><span class="line"> &#125;);</span><br><span class="line"> //关闭工具栏</span><br><span class="line"> $(&quot;#close-toolbar-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.hideToolbar();</span><br><span class="line"> &#125;);</span><br><span class="line"> //打开目录</span><br><span class="line"> $(&quot;#toc-menu-btn&quot;).click(function()&#123;</span><br><span class="line">     laofaneditormd.config(&#123;</span><br><span class="line">         tocDropdown   : true,</span><br><span class="line">         tocTitle      : &quot;目录 Table of Contents&quot;,</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"> //默认目录</span><br><span class="line"> $(&quot;#toc-default-btn&quot;).click(function() &#123;</span><br><span class="line">     laofaneditormd.config(&quot;tocDropdown&quot;, false);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h1 id="五、页面展示Markdown文档"><a href="#五、页面展示Markdown文档" class="headerlink" title="五、页面展示Markdown文档"></a><strong>五、页面展示Markdown文档</strong></h1><p>后台给我们的文档，我们要展示成转换后的样子不能一大堆符号摆在页面上是吧，也不好看呀，所以下面放上展示代码需要的东西。</p><p>1、首先引入必要JS（下面不是所有的都必要）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> &lt;link rel=&quot;stylesheet&quot; href=&quot;lib/js/editor.md-master/css/editormd.css&quot; /&gt;</span><br><span class="line">   &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://pandao.github.io/editor.md/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/jquery.min.js&quot;&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/marked.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/prettify.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/raphael.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/underscore.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/sequence-diagram.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/flowchart.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/editormd.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   //具体目录在你下载的文件里都能找到，对号入座</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2、页面的div</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;layout&quot;  class=&quot;editor&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;test-editormd&quot; &gt;</span><br><span class="line">        &lt;textarea&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">3、js代码</span><br><span class="line"></span><br><span class="line">testEditor = editormd.markdownToHTML(&quot;test-editormd&quot;, &#123;</span><br><span class="line">      markdown:$scope.apidetails.content,</span><br><span class="line">      htmlDecode      : &quot;style,script,iframe&quot;,  // you can filter tags decode</span><br><span class="line">      emoji           : true,</span><br><span class="line">      taskList        : true,</span><br><span class="line">      tex             : true,  // 默认不解析</span><br><span class="line">      flowChart       : true,  // 默认不解析</span><br><span class="line">      sequenceDiagram : true,  // 默认不解析</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、自定义工具栏"><a href="#六、自定义工具栏" class="headerlink" title="六、自定义工具栏"></a><strong>六、自定义工具栏</strong></h1><p>工具栏分为三组：full、simple、mini 这三个，可以选择，如果想更加自由选你所需，就可以用下面的代码，也可以看看官网的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">toolbarIcons : function() &#123;</span><br><span class="line">   // Or return editormd.toolbarModes[name]; // full, simple, mini</span><br><span class="line">   // Using &quot;||&quot; set icons align right.</span><br><span class="line">   return [&quot;undo&quot;, &quot;redo&quot;, &quot;|&quot;, &quot;bold&quot;, &quot;hr&quot;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>具体每一个标签代表的什么含义可以对照整个工具栏自己对一下，下面是它的源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t.toolbarModes=&#123;</span><br><span class="line">    full:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;bold&quot;,&quot;del&quot;,&quot;italic&quot;,&quot;quote&quot;,&quot;ucwords&quot;,&quot;uppercase&quot;,&quot;lowercase&quot;,&quot;|&quot;,&quot;h1&quot;,&quot;h2&quot;,&quot;h3&quot;,&quot;h4&quot;,&quot;h5&quot;,&quot;h6&quot;,&quot;|&quot;,&quot;list-ul&quot;,&quot;list-ol&quot;,&quot;hr&quot;,&quot;|&quot;,&quot;link&quot;,&quot;reference-link&quot;,&quot;image&quot;,&quot;code&quot;,&quot;preformatted-text&quot;,&quot;code-block&quot;,&quot;table&quot;,&quot;datetime&quot;,&quot;emoji&quot;,&quot;html-entities&quot;,&quot;pagebreak&quot;,&quot;|&quot;,&quot;goto-line&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;fullscreen&quot;,&quot;clear&quot;,&quot;search&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;],</span><br><span class="line">    simple:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;bold&quot;,&quot;del&quot;,&quot;italic&quot;,&quot;quote&quot;,&quot;uppercase&quot;,&quot;lowercase&quot;,&quot;|&quot;,&quot;h1&quot;,&quot;h2&quot;,&quot;h3&quot;,&quot;h4&quot;,&quot;h5&quot;,&quot;h6&quot;,&quot;|&quot;,&quot;list-ul&quot;,&quot;list-ol&quot;,&quot;hr&quot;,&quot;|&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;fullscreen&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;],</span><br><span class="line">    mini:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;typecho同款编辑器带ui界面小白易上手&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://g8d.xyz/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown折叠语法</title>
    <link href="https://g8d.xyz/2021/11/21/MarkDown%E6%8A%98%E5%8F%A0%E8%AF%AD%E6%B3%95/"/>
    <id>https://g8d.xyz/2021/11/21/MarkDown%E6%8A%98%E5%8F%A0%E8%AF%AD%E6%B3%95/</id>
    <published>2021-11-21T10:19:25.000Z</published>
    <updated>2021-11-23T10:15:44.030Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在文章中写太多内容时，进行适当的内容折叠是非常有必要的。</p><span id="more"></span><img src="https://cdn.jsdelivr.net/gh/ruiliijdhdhdh/photo@latest//img/202111212010919.png"/>MarkDown折叠语法是：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;Title&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">content!!!</span><br><span class="line">&lt;/details&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例1：</span><br><span class="line"></span><br><span class="line">注意：summary标签与正文间一定要空一行！</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;CLICK ME&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">**&lt;summary&gt;标签与正文间一定要空一行！！！**</span><br><span class="line">content!!!</span><br><span class="line">&lt;/details&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例2：</span><br><span class="line"></span><br><span class="line">在Github中写太多内容时，进行代码块内容折叠的代码如下：</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;展开查看&lt;/summary&gt;</span><br><span class="line">&lt;pre&gt;&lt;code&gt;</span><br><span class="line">System.out.println(&quot;Hello to see U!&quot;)</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>示例2：<p>在Github中写太多内容时，进行代码块内容折叠的代码如下：</p><details><summary>展开查看</summary><pre><code>System.out.println("Hello to see U!")</code></pre></details><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>可能不同的平台不同的编辑器，MarkDown折叠语法可能在使用上还是略有些区别，甚至是编辑器的限制，不让使用此语法，就会出现“MarkDown折叠语法”不生效，没有效果的问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当我们在文章中写太多内容时，进行适当的内容折叠是非常有必要的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://g8d.xyz/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>下载GitHub上单个文件(夹)</title>
    <link href="https://g8d.xyz/2021/11/20/downgit/"/>
    <id>https://g8d.xyz/2021/11/20/downgit/</id>
    <published>2021-11-20T07:28:48.000Z</published>
    <updated>2021-11-20T11:30:33.930Z</updated>
    
    <content type="html"><![CDATA[<img src="https://th.bing.com/th/id/OIP.lEetUExVDCW3Oq0Yl-CtLwHaBl?pid=ImgDet&rs=1"/><span id="more"></span><h3 id="方法一：SVN-下载单个文件夹"><a href="#方法一：SVN-下载单个文件夹" class="headerlink" title="方法一：SVN-下载单个文件夹"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9ASVN-%E4%B8%8B%E8%BD%BD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9" title="方法一：SVN-下载单个文件夹"></a>方法一：SVN-下载单个文件夹</h3><blockquote><p>个人最适应的方法，缺点是需要借助第三方工具-svn</p><p>环境：Windows 10</p></blockquote><p>​ 若想要下载<code>&#123;username&#125;</code>的<code>&#123;repo&#125;</code>里的<code>&#123;dir&#125;</code>文件夹，</p><ol><li>主分支master（现在似乎默认是main了，区别不大）：<ul><li>其浏览器路径应为<code>https://github.com/&#123;username&#125;/&#123;repo&#125;/tree/master/&#123;dir&#125;</code></li><li>修改<code>/tree/master/</code>为<code>/trunk/</code></li><li>打开<code>cmd</code>，输入指令：<code>svn checkout https://github.com/&#123;username&#125;/&#123;repo&#125;/trunk/&#123;dir&#125;</code></li><li>该<code>&#123;dir&#125;</code>将被下载至当前目录下  <img src="/medias/loading.gif" alt="示例">  <strong>示例</strong></li></ul></li><li>特定分支<ul><li>  将<code>/trunk/</code>换成<code>/branches/&#123;branch_name&#125;</code>即可</li></ul></li></ol><h3 id="方法二：高版本-Git"><a href="#方法二：高版本-Git" class="headerlink" title="方法二：高版本 Git"></a><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E9%AB%98%E7%89%88%E6%9C%AC-Git" title="方法二：高版本 Git"></a>方法二：高版本 Git</h3><blockquote><p>这个方法较为繁琐，但无需像前者一样借助其它工具</p></blockquote><p>方法：Git 的<code>Sparse Checkout</code>模式，指定文件/文件夹</p><ol><li>创建空的本地仓库，并将远程 <code>Git Server URL</code> 加入到 <code>Git Config</code>里 none <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir project_folder</span><br><span class="line">cd project_folder</span><br><span class="line">git init</span><br><span class="line">git remote add -f origin &lt;repo-url&gt;</span><br></pre></td></tr></table></figure></li><li>在 <code>Config</code> 中设置允许使用<code>Sparse Checkout</code>模式 none <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.sparsecheckout true</span><br></pre></td></tr></table></figure></li><li>在<code>.git/info/</code>目录下新建<code>sparse-checkout</code>文件（注意文件名不要错了），写入需要的文件（<strong>一行为一项</strong>） 如： none <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/source/tools/index.html</span><br><span class="line">/source/about</span><br></pre></td></tr></table></figure></li><li>以正常方式从服务器pull下来即可 none <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法三：利用-DownGit-工具"><a href="#方法三：利用-DownGit-工具" class="headerlink" title="方法三：利用 DownGit 工具"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%89%EF%BC%9A%E5%88%A9%E7%94%A8-DownGit-%E5%B7%A5%E5%85%B7" title="方法三：利用 DownGit 工具"></a>方法三：利用 <a href="http://tool.mkblog.cn/downgit/#/home">DownGit</a> 工具</h3>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://th.bing.com/th/id/OIP.lEetUExVDCW3Oq0Yl-CtLwHaBl?pid=ImgDet&amp;rs=1&quot;/&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Base64编码原理解析</title>
    <link href="https://g8d.xyz/2021/11/20/base64/"/>
    <id>https://g8d.xyz/2021/11/20/base64/</id>
    <published>2021-11-20T04:21:16.000Z</published>
    <updated>2021-11-20T04:31:36.316Z</updated>
    
    <content type="html"><![CDATA[<p>在制作v2订阅链接时经常需要使用到base64编码</p><span id="more"></span><h1 id="1-Base64-是什么"><a href="#1-Base64-是什么" class="headerlink" title="1. Base64 是什么"></a><strong>1. Base64 是什么</strong></h1><p> Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2^6=64，所以每 6 个比特为一个单元，对应某个可打印字符。3 个字节有 24 个比特，对应于 4 个 Base64 单元，即 3 个字节可由 4 个可打印字符来表示。</p><p> ——维基百科</p><p>它不是一种加解密技术，是一种简单的编解码技术。</p><p>Base64 常用于表示、传输、存储二进制数据，也可以用于将一些含有特殊字符的文本内容编码，以便传输。</p><p>比如：</p><ol><li><p>在电子邮件的传输中，Base64 可以用来将 binary 的字节序列，比如附件，编码成 ASCII 字节序列；</p></li><li><p>将一些体积不大的图片 Base64 编码后，直接内嵌到网页源码里；</p></li><li><p>将要传递给 HTTP 请求的参数做简单的转换，降低肉眼可读性；</p></li></ol><p> 注：用于 URL 的 Base64 非标准 Base64，是一种变种。</p><ol start="4"><li>网友们在论坛等公开场合习惯将邮箱地址 Base64 后再发出来，防止被爬虫抓取后发送垃圾邮件。</li></ol><h1 id="2-Base64-编码原理"><a href="#2-Base64-编码原理" class="headerlink" title="2. Base64 编码原理"></a><strong>2. Base64 编码原理</strong></h1><p>标准 Base64 里的 64 个可打印字符是 A-Za-z0-9+/，分别依次对应索引值 0-63。索引表如下：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-index.png"/><br>编码时，每 3 个字节一组，共 8bit*3=24bit，划分成 4 组，即每 6bit 代表一个编码后的索引值，划分如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-split.png"/><br>这样可能不太直观，举个例子就容易理解了。比如我们对 cat 进行编码：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-example.jpeg"/><br>可以看到 cat 编码后变成了 Y2F0。</p><p>如果待编码内容的字节数不是 3 的整数倍，那需要进行一些额外的处理。</p><p>如果最后剩下 1 个字节，那么将补 4 个 0 位，编码成 2 个 Base64 字符，然后补两个 =：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-padding2.png"/><br>如果最后剩下 2 个字节，那么将补 2 个 0 位，编码成 3 个 Base64 字符，然后补一个 =：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-padding1.png"/></p><h1 id="3-实现一个简易的-Base64-编码器"><a href="#3-实现一个简易的-Base64-编码器" class="headerlink" title="3. 实现一个简易的 Base64 编码器"></a><strong>3. 实现一个简易的 Base64 编码器</strong></h1><p>讲完原理，我们就可以动手实现一个简易的标准 Base64 编码器了，以下是我参考 Java 8 的 java.util.Base64 乱写的一个 Java 版本，仅供参考，主要功能代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class CustomBase64Encoder &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 索引表</span><br><span class="line">     */</span><br><span class="line">    private static final char[] sBase64 = &#123;</span><br><span class="line">            &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;,</span><br><span class="line">            &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;,</span><br><span class="line">            &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;,</span><br><span class="line">            &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,</span><br><span class="line">            &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;,</span><br><span class="line">            &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;,</span><br><span class="line">            &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;,</span><br><span class="line">            &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;+&#x27;, &#x27;/&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将 byte[] 进行 Base64 编码并返回字符串</span><br><span class="line">     * @param src 原文</span><br><span class="line">     * @return 编码后的字符串</span><br><span class="line">     */</span><br><span class="line">    public static String encode(byte[] src) &#123;</span><br><span class="line">        if (src == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        byte[] dst = new byte[(src.length + 2) / 3 * 4];</span><br><span class="line"></span><br><span class="line">        int index = 0;</span><br><span class="line"></span><br><span class="line">        // 每次将 3 个字节编码为 4 个字节</span><br><span class="line">        for (int i = 0; i &lt; (src.length / 3 * 3); i += 3) &#123;</span><br><span class="line">            int bits = (src[i] &amp; 0xff) &lt;&lt; 16 | (src[i + 1] &amp; 0xff) &lt;&lt; 8 | (src[i + 2] &amp; 0xff);</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 18) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 12) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[bits &amp; 0x3f];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 处理剩下的 1 个或 2 个字节</span><br><span class="line">        if (src.length % 3 == 1) &#123;</span><br><span class="line">            int bits = (src[src.length - 1] &amp; 0xff) &lt;&lt; 4;</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[bits &amp; 0x3f];</span><br><span class="line">            dst[index++] = &#x27;=&#x27;;</span><br><span class="line">            dst[index] = &#x27;=&#x27;;</span><br><span class="line">        &#125; else if (src.length % 3 == 2) &#123;</span><br><span class="line">            int bits = (src[src.length - 2] &amp; 0xff) &lt;&lt; 10 | (src[src.length - 1] &amp; 0xff) &lt;&lt; 2;</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 12) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[bits &amp; 0x3f];</span><br><span class="line">            dst[index] = &#x27;=&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return new String(dst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分源码我也上传到 GitHub 仓库 <a href="https://github.com/mzlogin/spring-practices">https://github.com/mzlogin/spring-practices</a> 的 base64test 工程里了</p><h1 id="4-其它知识点"><a href="#4-其它知识点" class="headerlink" title="4. 其它知识点"></a><strong>4. 其它知识点</strong></h1><h2 id="4-1-为什么有的编码结果带回车"><a href="#4-1-为什么有的编码结果带回车" class="headerlink" title="4.1 为什么有的编码结果带回车"></a><strong>4.1 为什么有的编码结果带回车</strong></h2><p>在电子邮件中，根据 RFC 822 规定，每 76 个字符需要加上一个回车换行，所以有些编码器实现，比如 sun.misc.BASE64Encoder.encode，是带回车的，还有 java.util.Base64.Encoder.RFC2045，是带回车换行的，每行 76 个字符。</p><h2 id="4-2-Base64-的变种"><a href="#4-2-Base64-的变种" class="headerlink" title="4.2 Base64 的变种"></a><strong>4.2 Base64 的变种</strong></h2><p>除了标准 Base64 之外，还有一些其它的 Base64 变种。</p><p>比如在 URL 的应用场景中，因为标准 Base64 索引表中的 / 和 + 会被 URLEncoder 转义成 %XX 形式，但 % 是 SQL 中的通配符，直接用于数据库操作会有问题。此时可以采用 URL Safe 的编码器，索引表中的 /+ 被换成 -_，比如 java.util.Base64.Encoder.RFC4648_URLSAFE 就是这样的实现。</p><h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a><strong>5. 参考链接</strong></h1><p><a href="https://zh.wikipedia.org/zh-hans/Base64">https://zh.wikipedia.org/zh-hans/Base64</a><br><a href="https://www.liaoxuefeng.com/wiki/897692888725344/949441536192576">https://www.liaoxuefeng.com/wiki/897692888725344/949441536192576</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在制作v2订阅链接时经常需要使用到base64编码&lt;/p&gt;</summary>
    
    
    
    
    <category term="v2ray" scheme="https://g8d.xyz/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>CloudFlare 缓存全站</title>
    <link href="https://g8d.xyz/2021/11/19/CloudFlare-%E7%BC%93%E5%AD%98%E5%85%A8%E7%AB%99/"/>
    <id>https://g8d.xyz/2021/11/19/CloudFlare-%E7%BC%93%E5%AD%98%E5%85%A8%E7%AB%99/</id>
    <published>2021-11-18T16:43:31.000Z</published>
    <updated>2021-11-18T16:45:47.290Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/install-cloudflare-1.png"/>CloudFlare 默认只对静态资源进行缓存。动态资源是默认不缓存的。如果你的内容基本是静态的或者不在意实时更新的话，可以使用 CloudFlare 的页面规则设置缓存所有内容。免费用户可以设置 3 条页面规则，Pro 用户可以使用 30 条规则。<span id="more"></span><img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Snipaste_2021-10-29_19-07-33.png"/>如果要全域都走这条规则的话，就使用 * 表示全部，比如 *.ednovas.xyz/* 就是代表所有的 ednovas.xyz 前缀后缀的域名都要走这个规则<img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Snipaste_2021-10-29_19-08-52.png"/>还可以加上一条 Edge Cache TTL，此项为 cloudflare 多久去检查你的服务器并更新<img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Snipaste_2021-10-29_19-09-59.png"/>如果有的时候进不去后台，可以设置个 Cache Level 的 bypass 规则，并且设置其为置顶规则<img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Snipaste_2021-10-29_19-13-18.png"/>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/install-cloudflare-1.png&quot;/&gt;
CloudFlare 默认只对静态资源进行缓存。动态资源是默认不缓存的。如果你的内容基本是静态的或者不在意实时更新的话，可以使用 CloudFlare 的页面规则设置缓存所有内容。免费用户可以设置 3 条页面规则，Pro 用户可以使用 30 条规则。</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows11 中安装 WSA (安卓子系统)</title>
    <link href="https://g8d.xyz/2021/11/19/wsa/"/>
    <id>https://g8d.xyz/2021/11/19/wsa/</id>
    <published>2021-11-18T16:36:31.000Z</published>
    <updated>2021-11-18T16:42:51.420Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Windows-11-android-sideloading.webp"/><span id="more"></span>首先你得打开 windows 里面的功能，在 windows 菜单里面搜索启用.... 功能然后打开里面的这两个功能<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@fbd84daf694bc3c341f4a67c387fde02e92fc5a6/2021/10/23/fc239b9e839fce2255a2c5a3d58f57ca.png"/>重启之后下载需要的包商店下载链接 https://www.microsoft.com/store/productId/9P3395VX91NR安装包抓包地址 https://store.rg-adguard.net/在抓包地址右边选择 Slow 通道 (因为 Slow 通道对应的是 Beta 通道，其他 Fast,RP,Retail 分别对应 Dev, 预览，正式版)然后在地址栏里面输入商店下载地址<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@8dd2873eac46c72a2e068fc1e111bc36e7ac36ee/2021/10/23/6e17ce2332480b48c65701599e6f129c.png"/>找到最下面的那个最大的包，我这里名字为 "MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle"如果版本更新可能会变，不过都差不多，把它下载下来如果你双击它，你会发现无法安装这个时候我们需要用管理员运行 Powershell 来安装win+X 运行 Powershell<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@d5c10c25afb416a0c37e06b0c4a330497c48d9ad/2021/10/23/de4a05fddc9621828c3f8b7c63023d81.png"/>在里面输入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-appxpackage &quot;这里填你下载的安装包的绝对路径&quot;</span><br></pre></td></tr></table></figure>比如我的就是<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-appxpackage &quot;D:\Downloads\Microsoft Edge\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral___8wekyb3d8bbwe.Msixbundle&quot;</span><br></pre></td></tr></table></figure>回车执行然后就可以 enjoy 了<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@4bee2cfec873eb34502cd370422d9cbc94559b72/2021/10/23/36f79476f2ecd91ba609db80023925f9.png"/>很多小伙伴装了 WSA 都发现没有桌面，这就意味着你只能用 adb 来进行和子系统的交互十分的麻烦，这里我推荐一个工具，[秋之盒](https://www.atmb.top/)**我使用的是 canary 金丝雀版本**进入 WSA 界面打开开发人员模式启用它，进入管理开发人员设置<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@578098c98de446dabdd6739571a5e9777e9afadf/2021/10/23/740ba46d103856a0a5575f8ba092f631.png"/>打开 usb 调试<p>回到 WSA 界面，刷新和复制 IP<br>进入秋之盒<br><img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@ac1923a448e632aee5e7b0147ee37a811b86a1b7/2021/10/23/35b60326e485e438db3e1d2c4c480306.png"/></p><p>在这里输入你复制的 IP</p><p>安装一个然后你就能对 WSA 做你想做的事情了，比如可以安装一个应用商店，我这里推荐大家安装一个酷安<br>听说有人在 wsa 里面成功安装了谷歌框架，大家也可以试试</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Windows-11-android-sideloading.webp&quot;/&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>青龙2.10+XDD-Plus+nvjdc短信验证登录对接xdd-plus</title>
    <link href="https://g8d.xyz/2021/11/15/qinglong/"/>
    <id>https://g8d.xyz/2021/11/15/qinglong/</id>
    <published>2021-11-15T10:55:42.000Z</published>
    <updated>2021-11-15T11:29:04.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><strong>一、准备工作</strong></h1><p>1.一台电脑（手机也可以，自行找ssh链接工具）</p><p>2.购买服务器，并开放服务器端口，这里以阿里云服务器为例。其它服务器自行百度，这里就不过多叙述。</p><img src="https://img-blog.csdnimg.cn/3a6a13ff5f794dcc9be281907f0f2c76.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCm57uV5Li25qKm5b2x,size_20,color_FFFFFF,t_70,g_se,x_16"/><span id="more"></span><img src="https://img-blog.csdnimg.cn/c2ae6ef788344755a1dfc3a37881e089.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCm57uV5Li25qKm5b2x,size_20,color_FFFFFF,t_70,g_se,x_16"/><p>3.连接服务器</p><h1 id="二、开始搭建"><a href="#二、开始搭建" class="headerlink" title="二、开始搭建"></a><strong>二、开始搭建</strong></h1><p><strong>1.安装docke并设置开机启动</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum check-update</span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl status docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h1 id="2-拉取青龙面板"><a href="#2-拉取青龙面板" class="headerlink" title="2.拉取青龙面板"></a><strong>2.拉取青龙面板</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  --name ql \</span><br><span class="line">  --hostname ql \</span><br><span class="line">  --restart always \</span><br><span class="line">  -p 5700:5700 \</span><br><span class="line">  -v $PWD/ql/config:/ql/config \</span><br><span class="line">  -v $PWD/ql/log:/ql/log \</span><br><span class="line">  -v $PWD/ql/db:/ql/db \</span><br><span class="line">  -v $PWD/ql/scripts:/ql/scripts \</span><br><span class="line">  -v $PWD/ql/jbot:/ql/jbot \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure><p> 端口号可自己方法：</p><p>-p 5700:5700 端口号为5700</p><p>-p xxxx:5700 端口号为xxxx</p><p>注：改的端口号一定要在安全组中放行该端口，不然访问不到</p><h1 id="3-登录青龙面板"><a href="#3-登录青龙面板" class="headerlink" title="3.登录青龙面板"></a><strong>3.登录青龙面板</strong></h1><p>在浏览器中输入 服务器ip:端口号        端口号为上一步你自己设置的端口号</p><p>例如：123.123.123.123:5700</p><p>进入青龙面板的登陆页面，开始安装</p><h1 id="4-拉取定时任务脚本仓库"><a href="#4-拉取定时任务脚本仓库" class="headerlink" title="4.拉取定时任务脚本仓库"></a><strong>4.拉取定时任务脚本仓库</strong></h1><p>这里推荐两个仓库：</p><p>faker2仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql&quot;</span><br></pre></td></tr></table></figure><p>smiek2221仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://ghproxy.com/github.com/smiek2221/scripts.git &quot;jd_|gua_&quot; &quot;&quot; &quot;ZooFaker_Necklace.js|JDJRValidator_Pure.js|sign_graphics_validate.js&quot;</span><br></pre></td></tr></table></figure><p><strong>青龙面板相关依赖及部分脚本依赖不能偷懒，稍微等一等有点慢</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it QL bash -c &quot;npm install -g typescript&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install axios date-fns&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install crypto -g&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install jsdom&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install png-js&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install -g npm&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;pnpm i png-js&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;pip3 install requests&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;apk add python3 zlib-dev gcc jpeg-dev python3-dev musl-dev freetype-dev&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;cd /ql/scripts/ &amp;&amp; apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; npm i &amp;&amp; npm i -S ts-node typescript @types/node date-fns axios png-js canvas --build-from-source&quot;</span><br></pre></td></tr></table></figure><h1 id="5-应用设置配置"><a href="#5-应用设置配置" class="headerlink" title="5.应用设置配置"></a><strong>5.应用设置配置</strong></h1><p>为下一步的xdd-plus对接青龙做出准备</p><h1 id="6-搭建xdd-plus所需环境"><a href="#6-搭建xdd-plus所需环境" class="headerlink" title="6.搭建xdd-plus所需环境"></a><strong>6.搭建xdd-plus所需环境</strong></h1><pre><code> 6.1安装gcc      <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>6.2下载go安装包 ，这里我们安装到usr/local目录 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local &amp;&amp; wget https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz -O go1.16.7.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>6.3解压go安装包 tar -xvzf go1.16.7.linux-amd64.tar.gz6.4手动设置环境变量路径/etc/profile <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export GO111MODULE=on</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/usr/local/go/path</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure> 复制上方代码添加到profile文件末尾6.5执行source <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>6.6检测一下看看有没有安装成功 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure>6.7安装git <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"> </span><br><span class="line"> rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class="line"> </span><br><span class="line">  yum install -y git</span><br></pre></td></tr></table></figure></code></pre><h1 id="7-安装xdd-plus"><a href="#7-安装xdd-plus" class="headerlink" title="7.安装xdd-plus"></a><strong>7.安装xdd-plus</strong></h1><pre><code>    7.1拉取xdd-plus的库    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~ &amp;&amp; git clone https://ghproxy.com/https://github.com/764763903a/xdd-plus.git</span><br></pre></td></tr></table></figure>    7.2编译xdd     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd xdd-plus</span><br><span class="line">go build</span><br></pre></td></tr></table></figure>    7.3给与xdd最高权限     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 xdd</span><br></pre></td></tr></table></figure>    7.4运行xdd（要确保你在xdd-plus目录下）     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xdd</span><br></pre></td></tr></table></figure>     等程序跑个半分钟Ctrl+c退出    7.5WinSCP中手动修改root/xdd-plus/conf/config.yaml文件</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mode: parallel  #模式 balance(均衡模式)、parallel(平行模式)</span><br><span class="line">containers:</span><br><span class="line">  - address: http://123.123.123.123:5700 #这里是你青龙面板的地址</span><br><span class="line">    username: 青龙面板的账号 #登陆青龙面板的账号</span><br><span class="line">    password: 青龙面板的密码 #登录青龙面板的密码</span><br><span class="line">    cid: Client ID #刚刚在青龙面板获取到的Client ID</span><br><span class="line">    secret: Client Secret #刚刚在青龙面板获取到的Client Secret</span><br><span class="line">    weigth: 1 #权重 balance模式下权重越高分得的ck越多，默认1</span><br><span class="line">    mode: parallel #模式 balance(均衡模式)、parallel(平行模式)</span><br><span class="line">    limit: 9999 #限制容器ck数目</span><br><span class="line">AtTime: 8 #填写1-12之间的数  填错自负默认为10  10点容易出现高峰超时。</span><br><span class="line">IsHelp: true  #填写true或者false  false</span><br><span class="line">IsOldV4: #填写true或者false  false是否新版或者旧版V4</span><br><span class="line">Wskey: true # 填空默认禁用wskey转换 需要的填true</span><br><span class="line">IsAddFriend: #填写true或者false  false</span><br><span class="line">Lim: #填写1-N 代表限制次数</span><br><span class="line">Tyt: #填写1-N 代表推一推需要的互助值，默认为8</span><br><span class="line">Later: #延时防止黑IP自己设置 默认60 不怕黑的改为1即可 单位是秒</span><br><span class="line">ApiToken: #nvjdc短信接入token参数，自己设置</span><br><span class="line">theme: /root/xdd-plus/theme/admin.html  #自定义主题，支持本地、网络路径 </span><br><span class="line">static: ./static #静态文件 便于自定义二维码页面时，引入css、js等文件</span><br><span class="line">master: #xdd-plus后台密码，并从井号开始把这一段文字全部删除</span><br><span class="line">database: /root/xdd-plus/.xdd.db </span><br><span class="line">qywx_key: #企业微信推送key</span><br><span class="line">daily_push: #定时任务</span><br><span class="line">resident: #均衡模式下所有容器共同的账号pin，有多个用&#x27;&amp;&#x27;拼接。不建议填写。</span><br><span class="line">user_agent:</span><br><span class="line">telegram_bot_token:</span><br><span class="line">telegram_user_id:</span><br><span class="line">TGURL: #填写TG代理地址参考https://www.kejiwanjia.com/server/5221.html#3worker</span><br><span class="line">qquid: 管理员QQ #接收通知的qq号，管理员QQ号码</span><br><span class="line">qqgid: QQ群号 #监听的群</span><br><span class="line">qbot_public_mode: true #qq机器人群聊模式，默认私聊模式</span><br><span class="line">default_priority: #新用户默认优先级</span><br><span class="line">no_ghproxy: true #更新资源是否不使用代理</span><br><span class="line">daily_asset_push_cron: 0 21 * * * #日常资产推送时间 可以不填</span><br><span class="line">repos:</span><br><span class="line">  - git: https://github.com/shufflewzc/faker2.git</span><br></pre></td></tr></table></figure><p>修改完之后Ctrl+s保存文件退出，回到命令行在次运行上一步7.4</p><p>出现二维码，扫码绑定你的机器人qq，等一会后向你的机器人发消息测试。</p><p>7.6然后Ctrl+c，为防止机器人被杀死我们后台挂机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xdd -d</span><br></pre></td></tr></table></figure><p> 我们的xdd-plus配置到此结束</p><h1 id="8-nvjdc短信验证登录对接xdd-plus"><a href="#8-nvjdc短信验证登录对接xdd-plus" class="headerlink" title="8.nvjdc短信验证登录对接xdd-plus"></a><strong>8.nvjdc短信验证登录对接xdd-plus</strong></h1><pre><code>     8.1先cd回根目录     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>    8.2首先安装unzip    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget unzip -y</span><br></pre></td></tr></table></figure>    8.3然后创建一个目录放配置以及chromium    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir nolanjdc &amp;&amp; cd nolanjdc</span><br></pre></td></tr></table></figure>     8.4拉取nvjdc对接xdd-plus专用的配置文件     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.jsdelivr.net/gh/yanyuwangluo/tuku@main/Config.json</span><br></pre></td></tr></table></figure>    8.5创建chromium文件夹并进入    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p  .local-chromium/Linux-884014 &amp;&amp; cd .local-chromium/Linux-884014</span><br></pre></td></tr></table></figure>    8.6下载chromium并删除chromium压缩包    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.huaweicloud.com/chromium-browser-snapshots/Linux_x64/884014/chrome-linux.zip &amp;&amp; unzip chrome-linux.zip  &amp;&amp;  rm  -f chrome-linux.zip</span><br></pre></td></tr></table></figure>     8.7回到刚刚创建的目录     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/nolanjdc</span><br></pre></td></tr></table></figure>    8.8拉取nvjdc项目镜像    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nolanhzy/nvjdc:1.0</span><br></pre></td></tr></table></figure>    8.9启动项目容器（5703就是你nvjdc的端口号）    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run   --name nolanjdc -p 5703:80 -d  -v  &quot;$(pwd)&quot;/Config.json:/app/Config/Config.json:ro \-v &quot;$(pwd)&quot;/.local-chromium:/app/.local-chromium  \-it --privileged=true  nolanhzy/nvjdc:1.0</span><br></pre></td></tr></table></figure>     8.10查看日志     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f nolanjdc</span><br></pre></td></tr></table></figure></code></pre><p>出现表示NETJDC started成功，然后Ctrl+c退出日志即可<br>         8.11修改nvjdc对接xdd-plus的配置文件</p><p>配置文件路径/root/nolanjdc/Config.json</p><p>编辑好后保存重启容器（修改配置文件后需要重启）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart nolanjdc</span><br></pre></td></tr></table></figure><p> 到这一步已经可以全部正常使用了 </p><p>后面做一些补充 </p><p>（可忽略）公告处可以公告处可通过html+css编写后转义替换添加更多功能，可进交流群。</p><p> 删除容器和镜像（后面的0.8是版本号跟随自己需求更改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f nolanjdc &amp;&amp; docker rmi -f nolanhzy/nvjdc:1.0</span><br></pre></td></tr></table></figure><p>更新：更新前删除容器和镜像，然后继续执行8.7到8.10就好</p><p>卸载nvjdc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f nolanjdc &amp;&amp; docker rmi -f nolanhzy/nvjdc:1.0 &amp;&amp; rm -rf /root/nolanjdc </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、准备工作&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;1.一台电脑（手机也可以，自行找ssh链接工具）&lt;/p&gt;
&lt;p&gt;2.购买服务器，并开放服务器端口，这里以阿里云服务器为例。其它服务器自行百度，这里就不过多叙述。&lt;/p&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/3a6a13ff5f794dcc9be281907f0f2c76.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCm57uV5Li25qKm5b2x,size_20,color_FFFFFF,t_70,g_se,x_16&quot;/&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用 Cloudflare Pages 托管静态网站</title>
    <link href="https://g8d.xyz/2021/10/31/Cloudflare-Pages/"/>
    <id>https://g8d.xyz/2021/10/31/Cloudflare-Pages/</id>
    <published>2021-10-31T09:45:34.000Z</published>
    <updated>2021-10-31T14:09:00.814Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.misterma.com/img-admin/uploads/16290271822437.png" />Cloudflare Pages 是一个静态网站托管服务，功能和 Github Pages 差不多，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。Cloudflare 是全球最大的几个 CDN 服务商之一，速度应该会比 Github Pages 好一些，而且 Cloudflare Pages 一个账户可以创建多个网站。<span id="more"></span>最近我准备把 MWordStar 的帮助文档迁移到 Cloudflare Pages ，这样我的服务器就可以少管理一个网站，服务器出问题也不会影响主题帮助文档的访问。这里就简单写一下 Cloudflare Pages 的使用。<p>关联 Github 存储库<br>直接访问 <a href="https://pages.cloudflare.com/">https://pages.cloudflare.com/</a> ，没有账号的可以按照提示注册，有账号的可以直接登录。</p><p>Cloudflare Pages 的官网首页没有中文，但部署和设置页面是有中文的。登录后点击 创建项目 ，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16290187581512.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>点击 连接 Github 账户 ：<br><img src="https://www.misterma.com/img-admin/uploads/16290189752064.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>这里会弹出 Github 的授权页面，选择 Install &amp; Authorize 允许 Cloudflare 访问 Github 账户，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16290192466333.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>然后会显示 Github 存储库，也包括非公开的存储库，选择要部署的存储库，点击 开始设置 ：<br><img src="https://www.misterma.com/img-admin/uploads/16290194687453.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>设置构建命令和存放构建的页面的目录：<br><img src="https://www.misterma.com/img-admin/uploads/16290198291377.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>Cloudflare 克隆存储库后会自动执行 npm install 之类的命令下载所需的依赖，然后执行构建命令，然后把构建完成的文件放到网站目录。</p><p>点击 保存并部署 后 Cloudflare Pages 就会开始构建和部署，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16290202797579.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>同时下方也会输出日志：<br><img src="https://www.misterma.com/img-admin/uploads/16290205378681.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>部署完成后点击 继续处理项目 就可以看到部署的网站了，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16290207787046.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>默认的域名是 项目名称.pages.dev 。</p><p>设置域名<br>点击 自定义域 ：<br><img src="https://www.misterma.com/img-admin/uploads/16290210479376.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>输入要绑定的域名：<br><img src="https://www.misterma.com/img-admin/uploads/16290255602829.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>如果你用的是 Cloudflare 的 DNS 的话，Cloudflare可以一键设置 CNAME。如果不是的话就需要手动设置 CNAME，登录域名管理后台，添加一条 CNAME 指向默认的 pages.dev 域名。</p><p>我使用的是 Cloudflare 的 DNS，可以自动设置 CNAME：<br><img src="https://www.misterma.com/img-admin/uploads/16290256742490.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>设置完成后需要一段时间才会生效。</p><p>以上就是 Cloudflare Pages 的设置过程。免费的 Cloudflare Pages 账户每月最多只能构建 500 次，对于个人博客或小网站来说已经足够。</p><p>目前 Cloudflare Pages 只能通过 Github 来部署，不能直接上传 HTML。</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://www.misterma.com/img-admin/uploads/16290271822437.png&quot; /&gt;
Cloudflare Pages 是一个静态网站托管服务，功能和 Github Pages 差不多，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。Cloudflare 是全球最大的几个 CDN 服务商之一，速度应该会比 Github Pages 好一些，而且 Cloudflare Pages 一个账户可以创建多个网站。</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>CloudFlare Workers 反代任意网站和挂载单页代码</title>
    <link href="https://g8d.xyz/2021/10/31/CloudFlare-Workers/"/>
    <id>https://g8d.xyz/2021/10/31/CloudFlare-Workers/</id>
    <published>2021-10-30T16:44:10.000Z</published>
    <updated>2021-10-31T14:08:55.159Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gitee.com/liuhao03/tuchuang/raw/master/202110192343045.png"/><strong>介绍</strong>CloudFlare Workers是一个支持jsproxy的无服务器函数服务，提供全球CDN支持，免费用户有每天10万请求额度；CloudFlare官网：<a href="https://dash.cloudflare.com">https://dash.cloudflare.com</a>记录下一些简单的使用方法，以后再陆续更新；<span id="more"></span><strong>Workers 单页挂载代码</strong><pre><code class="lang-php">addEventListener('fetch', event =&gt; &#123;  event.respondWith(handleRequest(event.request))&#125;)<p>// HTML代码<br>let html = <code>&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt;   &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;&amp;lt;div&amp;gt;Hello world!&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</code>;</p><p>/**</p><ul><li>Respond to the request</li><li>@param {Request} request</li><li>/<br>async function handleRequest(request) {<br>return new Response(html, {<br>  headers: {<pre><code>&#39;Content-Type&#39;: &#39;text/html; charset=UTF-8&#39;</code></pre>  },<br>  status: 200<br>})<br>}</code></pre><br><strong>Workers 反代任意网站</strong><pre><code class="lang-php">// Website you intended to retrieve for users.const upstream = 'sunpma.com'</li></ul><p>// Custom pathname for the upstream website.<br>const upstream_path = ‘/‘</p><p>// Website you intended to retrieve for users using mobile devices.<br>const upstream_mobile = ‘sunpma.com’</p><p>// Countries and regions where you wish to suspend your service.<br>const blocked_region = [‘KP’, ‘SY’, ‘PK’, ‘CU’]</p><p>// IP addresses which you wish to block from using your service.<br>const blocked_ip_address = [‘0.0.0.0’, ‘127.0.0.1’]</p><p>// Whether to use HTTPS protocol for upstream address.<br>const https = true</p><p>// Whether to disable cache.<br>const disable_cache = false</p><p>// Replace texts.<br>const replace_dict = &#123;<br>    ‘$upstream’: ‘$custom_domain’,<br>    ‘//sunpma.com’: ‘’<br>&#125;</p><p>addEventListener(‘fetch’, event =&gt; &#123;<br>    event.respondWith(fetchAndApply(event.request));<br>&#125;)</p><p>async function fetchAndApply(request) &#123;<br>    const region = request.headers.get(‘cf-ipcountry’).toUpperCase();<br>    const ip_address = request.headers.get(‘cf-connecting-ip’);<br>    const user_agent = request.headers.get(‘user-agent’);</p><pre><code>let response = null;let url = new URL(request.url);let url_hostname = url.hostname;if (https == true) &#123;    url.protocol = &#39;https:&#39;;&#125; else &#123;    url.protocol = &#39;http:&#39;;&#125;if (await device_status(user_agent)) &#123;    var upstream_domain = upstream;&#125; else &#123;    var upstream_domain = upstream_mobile;&#125;url.host = upstream_domain;if (url.pathname == &#39;/&#39;) &#123;    url.pathname = upstream_path;&#125; else &#123;    url.pathname = upstream_path + url.pathname;&#125;if (blocked_region.includes(region)) &#123;    response = new Response(&#39;Access denied: WorkersProxy is not available in your region yet.&#39;, &#123;        status: 403    &#125;);&#125; else if (blocked_ip_address.includes(ip_address)) &#123;    response = new Response(&#39;Access denied: Your IP address is blocked by WorkersProxy.&#39;, &#123;        status: 403    &#125;);&#125; else &#123;    let method = request.method;    let request_headers = request.headers;    let new_request_headers = new Headers(request_headers);    new_request_headers.set(&#39;Host&#39;, upstream_domain);    new_request_headers.set(&#39;Referer&#39;, url.protocol + &#39;//&#39; + url_hostname);    let original_response = await fetch(url.href, &#123;        method: method,        headers: new_request_headers    &#125;)    connection_upgrade = new_request_headers.get(&quot;Upgrade&quot;);    if (connection_upgrade &amp;amp;&amp;amp; connection_upgrade.toLowerCase() == &quot;websocket&quot;) &#123;        return original_response;    &#125;    let original_response_clone = original_response.clone();    let original_text = null;    let response_headers = original_response.headers;    let new_response_headers = new Headers(response_headers);    let status = original_response.status;        if (disable_cache) &#123;        new_response_headers.set(&#39;Cache-Control&#39;, &#39;no-store&#39;);    &#125;    new_response_headers.set(&#39;access-control-allow-origin&#39;, &#39;*&#39;);    new_response_headers.set(&#39;access-control-allow-credentials&#39;, true);    new_response_headers.delete(&#39;content-security-policy&#39;);    new_response_headers.delete(&#39;content-security-policy-report-only&#39;);    new_response_headers.delete(&#39;clear-site-data&#39;);        if (new_response_headers.get(&quot;x-pjax-url&quot;)) &#123;        new_response_headers.set(&quot;x-pjax-url&quot;, response_headers.get(&quot;x-pjax-url&quot;).replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname));    &#125;        const content_type = new_response_headers.get(&#39;content-type&#39;);    if (content_type != null &amp;amp;&amp;amp; content_type.includes(&#39;text/html&#39;) &amp;amp;&amp;amp; content_type.includes(&#39;UTF-8&#39;)) &#123;        original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname);    &#125; else &#123;        original_text = original_response_clone.body    &#125;        response = new Response(original_text, &#123;        status,        headers: new_response_headers    &#125;)&#125;return response;</code></pre><p>}</p><p>async function replace_response_text(response, upstream_domain, host_name) {<br>    let text = await response.text()</p><pre><code>var i, j;for (i in replace_dict) &#123;    j = replace_dict[i]    if (i == &#39;$upstream&#39;) &#123;        i = upstream_domain    &#125; else if (i == &#39;$custom_domain&#39;) &#123;        i = host_name    &#125;    if (j == &#39;$upstream&#39;) &#123;        j = upstream_domain    &#125; else if (j == &#39;$custom_domain&#39;) &#123;        j = host_name    &#125;    let re = new RegExp(i, &#39;g&#39;)    text = text.replace(re, j);&#125;return text;</code></pre><p>}</p><p>async function device_status(user_agent_info) {<br>    var agents = [“Android”, “iPhone”, “SymbianOS”, “Windows Phone”, “iPad”, “iPod”];<br>    var flag = true;<br>    for (var v = 0; v &lt; agents.length; v++) {<br>        if (user_agent_info.indexOf(agents[v]) &gt; 0) {<br>            flag = false;<br>            break;<br>        }<br>    }<br>    return flag;<br>}</code></pre><br>替换掉其中的sunpma.com为你需要反代的网址即可；</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://gitee.com/liuhao03/tuchuang/raw/master/202110192343045.png&quot;/&gt;
&lt;strong&gt;介绍&lt;/strong&gt;
CloudFlare Workers是一个支持jsproxy的无服务器函数服务，提供全球CDN支持，免费用户有每天10万请求额度；
CloudFlare官网：&lt;a href=&quot;https://dash.cloudflare.com&quot;&gt;https://dash.cloudflare.com&lt;/a&gt;
记录下一些简单的使用方法，以后再陆续更新；</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>V2RAY一键部署脚本</title>
    <link href="https://g8d.xyz/2021/10/31/V2RAY/"/>
    <id>https://g8d.xyz/2021/10/31/V2RAY/</id>
    <published>2021-10-30T16:43:10.000Z</published>
    <updated>2021-10-31T12:40:19.290Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gitee.com/liuhao03/tuchuang/raw/master/202110192358637.png"/>此安装脚本除了可以安装V2以外，亦可以安装SS，MTP，Socks5，简单好用；<span id="more"></span><strong>一键安装命令：</strong>Debian/Ubuntu<pre><code class="lang-php">apt-get updateapt-get install curl -ybash &lt;(curl -s -L https://git.io/v2ray.sh)</code></pre>Centos<pre><code class="lang-php">yum updateyum install curl -ybash &lt;(curl -s -L https://git.io/v2ray.sh)</code></pre>根据提示选择需要的选项安装即可；管理面板命令：<ul>     <li>v2ray</li></ul><strong>安装过程</strong><pre><code class="lang-php"> 1. 安装<ol start="2"><li>卸载</li></ol><p>请选择 [1-2]:1</p><p>请选择 V2Ray 传输协议 [1-32]</p><ol><li>TCP</li><li>TCP_HTTP</li><li>WebSocket</li><li>WebSocket + TLS</li><li>HTTP/2</li><li>mKCP</li><li>mKCP_utp</li><li>mKCP_srtp</li><li>mKCP_wechat-video</li><li>mKCP_dtls</li><li>mKCP_wireguard</li><li>QUIC</li><li>QUIC_utp</li><li>QUIC_srtp</li><li>QUIC_wechat-video</li><li>QUIC_dtls</li><li>QUIC_wireguard</li><li>TCP_dynamicPort</li><li>TCP_HTTP_dynamicPort</li><li>WebSocket_dynamicPort</li><li>mKCP_dynamicPort</li><li>mKCP_utp_dynamicPort</li><li>mKCP_srtp_dynamicPort</li><li>mKCP_wechat-video_dynamicPort</li></ol><p> ….准备安装了咯..看看有毛有配置正确了…</p><p>———- 安装信息 ————-</p><p> V2Ray 传输协议 = TCP</p><p> V2Ray 端口 = 64057</p><p> 是否配置 Shadowsocks = 未配置</p><p>———- END ————-</p><p>按 Enter 回车键 继续….或按 Ctrl + C 取消.</code></pre><br><strong>安装结果</strong></p><pre><code class="lang-php">---------- V2Ray 配置信息 ------------- 地址 (Address) = xx.xx.xx.xx 端口 (Port) = 64057 用户ID (User ID / UUID) = 35b4eee6-d90b-4e9f-bab9-c1266f2ad8c0 额外ID (Alter Id) = 233 传输协议 (Network) = tcp 伪装类型 (header type) = none---------- END -------------提示: 输入 v2ray url 可生成 vmess URL 链接 / 输入 v2ray qr 可生成二维码链接</code></pre><p><strong>管理脚本</strong></p><pre><code class="lang-php">## V2Ray 版本: v4.21.3  /  V2Ray 状态: 正在运行 ##  1. 查看 V2Ray 配置  2. 修改 V2Ray 配置  3. 下载 V2Ray 配置 / 生成配置信息链接 / 生成二维码链接  4. 查看 Shadowsocks 配置 / 生成二维码链接  5. 修改 Shadowsocks 配置  6. 查看 MTProto 配置 / 修改 MTProto 配置  7. 查看 Socks5 配置 / 修改 Socks5 配置  8. 启动 / 停止 / 重启 / 查看日志  9. 更新 V2Ray / 更新 V2Ray 管理脚本 10. 卸载 V2Ray 11. 其他温馨提示...如果你不想执行选项...按 Ctrl + C 即可退出请选择菜单 [1-11]:</code></pre>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://gitee.com/liuhao03/tuchuang/raw/master/202110192358637.png&quot;/&gt;
此安装脚本除了可以安装V2以外，亦可以安装SS，MTP，Socks5，简单好用；</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用 Vim 编辑 Markdown 时直接粘贴图片</title>
    <link href="https://g8d.xyz/2021/05/20/Vim-Markdown/"/>
    <id>https://g8d.xyz/2021/05/20/Vim-Markdown/</id>
    <published>2021-05-20T03:45:48.000Z</published>
    <updated>2021-11-21T16:03:53.259Z</updated>
    
    <content type="html"><![CDATA[<p>我习惯使用 Vim 编辑 Markdown 文件，一直存在一个痛点就是粘贴图片很不方便。</p><span id="more"></span><h1 id="前后对比"><a href="#前后对比" class="headerlink" title="前后对比"></a><strong>前后对比</strong></h1><p>我以前常用的操作流程：</p><ol><li>复制图片/截图；</li><li>在保存图片对话框里一层层点选保存路径，输入文件名保存；</li><li>回到 Vim 里，手动输入引用图片的表达式。<br>第 2 步和第 3 步是比较痛苦的，尤其是文件路径比较深的时候，可能要点选好几次。</li></ol><p>最近偶然发现的一个外国小伙写的插件 <a href="https://github.com/ferrine/md-img-paste.vim">md-img-paste.vim</a>，能比较好地解决这个问题。现在的操作流程：</p><ol><li>复制图片/截图；</li><li>在 Vim 里输入图片相对路径，自动保存图片并插入引用图片的表达式。</li></ol><p>注：也可以直接回车，会按默认规则生成文件名。</p><p>效果演示：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/blog-assets/md-img-paste-example.gif"/></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a><strong>使用方法</strong></h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h1><p>这个插件没有其它依赖，使用自己习惯的插件管理方式安装就好。</p><p>比如我使用 <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a>，在 vimrc 里添加如下内容，然后 :so $MYVIMRC 再 :PluginInstall 就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &#x27;ferrine/md-img-paste.vim&#x27;</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h1><p>插件没有给粘贴剪贴板里的图片的操作绑定默认快捷键，需要自己绑定一下，比如我是绑定到 &lt;leader&gt;i：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autocmd FileType markdown nmap &lt;buffer&gt;&lt;silent&gt; &lt;leader&gt;i :call mdip#MarkdownClipboardImage()&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>另外还有两个可选配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let g:mdip_imgdir = &#x27;.&#x27;</span><br><span class="line">&quot; let g:mdip_imgname = &#x27;image&#x27;</span><br></pre></td></tr></table></figure><ol><li>g:mdip_imgdir 对应图片保存路径前缀。我设置为了 .，然后总是输入相对当前文件的路径；</li><li>g:mdip_imgname 对应图片保存时的缺省文件名前缀，即粘贴图片时，如果不输入文件名直接回车，将保存为 &lt;前缀&gt;_日期-时间.png 名称的文件。<br>我的完整 Vim 配置文件托管在 <a href="https://github.com/mzlogin/config-files/blob/master/_vimrc">GitHub</a>，供参考。</li></ol><p>It’s done, enjoy it.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我习惯使用 Vim 编辑 Markdown 文件，一直存在一个痛点就是粘贴图片很不方便。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://g8d.xyz/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署为知笔记（国内gitbook）</title>
    <link href="https://g8d.xyz/2021/04/12/wiznote/"/>
    <id>https://g8d.xyz/2021/04/12/wiznote/</id>
    <published>2021-04-12T07:47:49.000Z</published>
    <updated>2021-11-12T08:18:02.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.2002000.xyz/imgs/2021/06/fe66b9023ec35d9b.png" alt="请输入图片描述"></p><p><strong>软件特色</strong></p><ul><li>一键收集微信、网页、微博 保存碎片信息 批量导入文档</li><li>文字、清单、手写 图片、拍照、语音、附件 一次记录永久保存</li><li>轻量级图文编辑工具 内置Markdown功能 写出漂亮的文档</li><li>资料永久保存在云端 修改后的笔记会保存历史版本 无需担心资料丢失</li><li>群组、多级文件夹、标签 让资料井井有条</li><li>关键词全文搜索 快捷方式定位文件夹和笔记 快速找到所需资料<span id="more"></span></li></ul><p>  <strong>前言</strong><br>官网:<a href="https://www.wiz.cn/zh-cn/">WizNote</a></p><p>官方安装教程:<a href="https://www.wiz.cn/zh-cn/docker">WizNote</a></p><p><strong>安装</strong><br>安装Docker</p><p>curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> -o get-docker.sh</p><p>sh get-docker.sh<br>启动为知笔记服务端<br>执行</p><p>cd ~<br>mkdir wizdata<br>然后执行</p><p>docker run –name wiz –restart=always -it -d -v  ~/wizdata:/wiz/storage -v  /etc/localtime:/etc/localtime -p 80:80 -p 9269:9269/udp  wiznote/wizserver<br>将其中的-p 80:80的一个80改为你想要的端口,例如-p 8080:80 或者改为-p 10003:80,这样下面的配置文件就不用改了</p><p>当然,如果你不想配置HTTPS而且本地没有其他HTTP服务器你可以直接梭哈</p><p>配置HTTPS<br>由于现在一直在用Apache,就只po出一个Apache的配置文件了</p><p>&lt;VirtualHost *:80&gt;<br>    ServerAdmin <a href="mailto:&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#109;&#x6f;&#x65;&#x63;&#x2e;&#x74;&#x6f;&#x70;">&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#109;&#x6f;&#x65;&#x63;&#x2e;&#x74;&#x6f;&#x70;</a><br>    DocumentRoot “/www/wwwroot/域名”<br>    ServerName 域名<br>    #errorDocument 404 /404.html<br>    ErrorLog “/www/wwwlogs/wiz.5777.tk-error_log”<br>    CustomLog “/www/wwwlogs/wiz.5777.tk-access_log” combined<br>    <Location /><br>    ProxyPass <a href="http://localhost:10003/">http://localhost:10003/</a><br>    ProxyPassReverse <a href="http://localhost:10003/">http://localhost:10003/</a><br>    </Location></p><pre><code>#DENY FILES &lt;Files ~ (\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)$&gt;   Order allow,deny   Deny from all&lt;/Files&gt;</code></pre></VirtualHost><VirtualHost *:443>    ServerAdmin admin@moec.top    DocumentRoot "/www/wwwroot/域名/"    ServerName 域名    #errorDocument 404 /404.html    ErrorLog "/www/wwwlogs/域名-error_log"    CustomLog "/www/wwwlogs/域名-access_log" combined <pre><code>&lt;Location /&gt;ProxyPass http://localhost:10003/ProxyPassReverse http://localhost:10003/&lt;/Location&gt;#SSLSSLEngine OnSSLCertificateFile /www/server/panel/vhost/cert/---/fullchain.pemSSLCertificateKeyFile /www/server/panel/vhost/cert/---/privkey.pemSSLCipherSuite EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5SSLProtocol All -SSLv2 -SSLv3 -TLSv1SSLHonorCipherOrder On#DENY FILES &lt;Files ~ (\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)$&gt;   Order allow,deny   Deny from all&lt;/Files&gt;</code></pre></VirtualHost>按照你的配置配置后,重载你的Apache即可<p>安装完成<br>访问你配置的域名即可</p><p>默认账号:密码 <a href="mailto:&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#x77;&#105;&#122;&#46;&#99;&#x6e;">&#x61;&#100;&#109;&#105;&#x6e;&#x40;&#x77;&#105;&#122;&#46;&#99;&#x6e;</a>:123456<br><img src="https://img.2002000.xyz/imgs/2021/06/fe66b9023ec35d9b.png" alt="请输入图片描述"></p><p>然后点击头像,访问管理后台<br><img src="https://img.2002000.xyz/imgs/2021/06/cc0b16a6eb3d0ba3.png" alt="请输入图片描述"></p><p>访问用户管理即可更改管理员<br><img src="https://img.2002000.xyz/imgs/2021/06/99d22340ab592e6d.png" alt="请输入图片描述"></p><p>桌面客户端<br><a href="https://www.wiz.cn/zh-cn/download.html">桌面客户端</a></p><p><a href="https://www.wiz.cn/zh-cn/wiznote-lite">WizNote Lite (支持Markdown实时渲染)</a></p><p>客户端截图:<br><img src="https://img.2002000.xyz/imgs/2021/06/c9be9368435f9960.png" alt="请输入图片描述"></p><p>体验:</p><p>有一些BUG,不过能用.webp<br>如外链图片无法加载</p><p>更新<br>docker stop wiz<br>docker rm wiz<br>docker pull wiznote/wizserver:latest<br>备份<br>备份非常的简单,只需要备份~/wizdata这个文件夹即可</p><p>*@master-node:~/wizdata# ll<br>total 36<br>drwxr-xr-x  2 root  root  4096 Jun  6 08:30 config<br>drwxr-xr-x  3 root  root  4096 Jun  6 08:28 data_root<br>drwxrwxrwx 12 mysql mysql 4096 Jun  6 08:18 db<br>drwxrwxrwx  2 root  root  4096 Jun  6 08:23 index<br>drwxrwxrwx  3 root  root  4096 Jun  6 08:18 logs<br>drwxr-xr-x  3 root  root  4096 Jun  6 08:29 override_files<br>drwxr-xr-x  2 root  root  4096 Jun  6 08:46 wiz-abstract<br>drwxr-xr-x  2 root  root  4096 Jun  6 08:23 wiz-gather-dev<br>drwxr-xr-x  3 root  root  4096 Jun  6 08:46 wizserver-temp<br>里面包含了所有的数据</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.2002000.xyz/imgs/2021/06/fe66b9023ec35d9b.png&quot; alt=&quot;请输入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件特色&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一键收集微信、网页、微博 保存碎片信息 批量导入文档&lt;/li&gt;
&lt;li&gt;文字、清单、手写 图片、拍照、语音、附件 一次记录永久保存&lt;/li&gt;
&lt;li&gt;轻量级图文编辑工具 内置Markdown功能 写出漂亮的文档&lt;/li&gt;
&lt;li&gt;资料永久保存在云端 修改后的笔记会保存历史版本 无需担心资料丢失&lt;/li&gt;
&lt;li&gt;群组、多级文件夹、标签 让资料井井有条&lt;/li&gt;
&lt;li&gt;关键词全文搜索 快捷方式定位文件夹和笔记 快速找到所需资料</summary>
    
    
    
    
    <category term="docker" scheme="https://g8d.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源</title>
    <link href="https://g8d.xyz/2021/03/20/jsDelivr/"/>
    <id>https://g8d.xyz/2021/03/20/jsDelivr/</id>
    <published>2021-03-20T03:51:24.000Z</published>
    <updated>2021-11-20T04:20:05.301Z</updated>
    
    <content type="html"><![CDATA[<p>挺久以前就有网友给我的 GitHub Pages 博客模板提 Issue，说希望能增加 CDN 用于加速静态资源的加载，由于懒，一直没有动。</p><span id="more"></span><p>最近偶尔要打开自己博客看下 Wiki 的时候，要等挺久，比较痛苦，碰巧昨天晚上看到这样一篇帖子：GitHub 图床的正确用法，通过 jsDelivr CDN 全球加速，感觉很适合我的需求场景，于是决定趁这几天休假将这个改造一下。</p><h1 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a><strong>先看效果</strong></h1><p>以下改造前后的加载情况都是在 Edge 浏览器禁用缓存后录制的，录制时间段很接近，从本地访问两个 GitHub Pages 服务的原始响应速度应该类似。</p><h1 id="改造前加载"><a href="#改造前加载" class="headerlink" title="改造前加载"></a><strong>改造前加载</strong></h1><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/github/cdn-before.png"/>注：由于改造前没有保留加载图，所以这是截的一个使用相同模板的朋友的首页加载情况。<p>可以看到耗时最长的两个请求时间达到了 12 秒左右，而且很多资源的加载时间在 1 秒以上，页面完成加载时间长达 15 秒多……估计一般的访客是没这个耐心等待的。</p><h1 id="改造后加载"><a href="#改造后加载" class="headerlink" title="改造后加载"></a><strong>改造后加载</strong></h1><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/github/cdn-after.png"/>这样一对比效果还是很明显的。改造过后耗时最长的是两个没办法走 CDN 的请求，而走 CDN 的那些资源加载时间基本都没超过 60 毫秒，页面完成加载时间缩短到了 3 秒以内。<p>当然，因为页面自身还是在 GitHub Pages 托管，有时候首个请求还是会挺久才返回。</p><p>改造后的效果可以打开 <a href="https://mazhuang.org/">https://mazhuang.org</a> 体验。</p><h1 id="方案考虑"><a href="#方案考虑" class="headerlink" title="方案考虑"></a><strong>方案考虑</strong></h1><p>优化独立博客的加载速度有一些不同的思路，对应不同的方案：</p><ol><li>优化博客代码，精简需要加载的资源；</li><li>将博客部署到国内访问快的服务器上；</li><li>部署到国内的代码托管平台，比如 Gitee 和 Coding 等；</li><li>采用 CDN 加速；<br>其中 2 和 3 我不想考虑，还是期望只在 GitHub 上管理博客，所以 1 和 4 是优化方向，本文对应的就是 4 的部分。</li></ol><p>而采用 CDN 加速的方案，可以考虑</p><ol><li>将公共库改为直接引用公共 CDN 链接；</li><li>自己编写和修改的静态资源自己去托管在一个 CDN 服务上。</li></ol><p> 有一些 CDN 服务商提供一定的免费额度，可以按喜好选用，或者选择付费服务。这里我没有纠结，看完文首提到的那篇文章，去看了下 jsDelivr 的介绍后觉得靠谱：它原生支持使用 GitHub 项目里的资源，什么都不用配置，更重要的是免费，在国内有节点，而且速度还不错（官网上也把 works in China 作为一个卖点的），遂决定直接用它。</p><h1 id="jsDelivr-支持的-GitHub-资源的方式"><a href="#jsDelivr-支持的-GitHub-资源的方式" class="headerlink" title="jsDelivr 支持的 GitHub 资源的方式"></a><strong>jsDelivr 支持的 GitHub 资源的方式</strong></h1><p>jsDelivr 对 GitHub 的支持是作为重要特性来宣传的，官网的介绍链接：<a href="https://www.jsdelivr.com/features#gh">https://www.jsdelivr.com/features#gh</a> 以下是一些认为需要了解的知识的小结：</p><p>这里以我托管博客的 GitHub 仓库为例，地址是 <a href="https://github.com/mzlogin/mzlogin.github.io%EF%BC%8C%E9%82%A3%E5%AE%83%E9%87%8C%E9%9D%A2%E7%9A%84%E8%B5%84%E6%BA%90%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BB%A5">https://github.com/mzlogin/mzlogin.github.io，那它里面的资源可以直接以</a> <a href="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/</a> + 仓库里的文件路径 来访问。</p><p>比如仓库里有一个 js 文件 assets/js/main.js，那么它可以用 CDN 链接 <a href="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/assets/js/main.js">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/assets/js/main.js</a> 来访问。</p><p>另外还支持一些高级用法，比如：</p><ol><li>指定 release 版本号/提交 sha1/分支名称，例如指定获取该仓库的名称为 1.2.0 或 v1.2.0 的 release 版本资源：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js</span><br></pre></td></tr></table></figure>如果指定版本为 1 或者 1.2，那它会自动匹配到这个范围内的最新版本号。</li></ol><p> 也可以不指定版本或者指定版本为 latest，这样总是使用最新版本的资源。</p><ol start="2"><li>压缩资源，在 js/css 文件后缀前面加上 .min：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.min.js</span><br></pre></td></tr></table></figure></li><li>合并多个文件，用 combine/file1,file2,file3 格式的链接：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/combine/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.min.js,gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/simple-jekyll-search.min.js</span><br></pre></td></tr></table></figure>压缩资源、合并文件的 CDN 链接在第一次有人访问时可能比较慢，后面再有人访问就快了。</li></ol><h2 id="其它知识点："><a href="#其它知识点：" class="headerlink" title="其它知识点："></a>其它知识点：</h2><ol><li>可以通过 <a href="https://cdn.jsdelivr.net/combine/gh/mzlogin/mzlogin.github.io[@">https://cdn.jsdelivr.net/combine/gh/mzlogin/mzlogin.github.io[@</a>&lt;版本号&gt;]/[&lt;文件夹&gt;/] 这样的路径浏览缓存文件列表；</li><li>可以访问 <a href="https://purge.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js">https://purge.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js</a> 来清除指定文件的缓存；（将引用的 CDN 链接里的 cdn 改成 purge 就是了）</li><li>可以访问 <a href="https://data.jsdelivr.com/v1/package/gh/mzlogin/mzlogin.github.io">https://data.jsdelivr.com/v1/package/gh/mzlogin/mzlogin.github.io</a> 来查看 CDN 上的 tags 和 versions 列表，更多数据接口参数参见 <a href="https://github.com/jsdelivr/data.jsdelivr.com%E3%80%82">https://github.com/jsdelivr/data.jsdelivr.com。</a></li></ol><h1 id="改造步骤"><a href="#改造步骤" class="headerlink" title="改造步骤"></a><strong>改造步骤</strong></h1><p>下面是记录具体改造博客模板的步骤：</p><p>在 _config.yml 文件中添加控制开关：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 对 css 和 js 资源的 cdn 加速配置</span><br><span class="line">cdn:</span><br><span class="line">    jsdelivr:</span><br><span class="line">        enabled: true</span><br></pre></td></tr></table></figure><p>修改 _layouts 里的文件，给名为 assets_base_url 的变量赋值，用它来代表加载静态资源的根路径：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% assign assets_base_url = site.url %&#125;</span><br><span class="line">&#123;% if site.cdn.jsdelivr.enabled %&#125;</span><br><span class="line">    &#123;% assign assets_base_url = &quot;https://cdn.jsdelivr.net/gh/&quot; | append: site.repository | append: &#x27;@master&#x27; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><br>修改以前直接用  拼接的静态资源引用链接，替换为 ，比如 _includes/header.html 里：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; site.url &#125;&#125;/assets/css/posts/index.css&quot;&gt;</span><br><span class="line">+ &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; assets_base_url &#125;&#125;/assets/css/posts/index.css&quot;&gt;</span><br></pre></td></tr></table></figure><br>这样万一哪天 CDN 出了点什么状况，我们也可以很方便地通过一个开关就切回自已的资源链接恢复服务。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;挺久以前就有网友给我的 GitHub Pages 博客模板提 Issue，说希望能增加 CDN 用于加速静态资源的加载，由于懒，一直没有动。&lt;/p&gt;</summary>
    
    
    
    
    <category term="jsDelivr" scheme="https://g8d.xyz/tags/jsDelivr/"/>
    
  </entry>
  
  <entry>
    <title>使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源（二）</title>
    <link href="https://g8d.xyz/2021/03/10/jsDelivr-2/"/>
    <id>https://g8d.xyz/2021/03/10/jsDelivr-2/</id>
    <published>2021-03-10T04:13:47.000Z</published>
    <updated>2021-11-20T04:20:14.298Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一篇 使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源，在那之后，又陆续想到并实施了几点利用 jsDelivr 进一步加速静态资源加载的措施，新起一篇作为记录和分享。</p><span id="more"></span><p>继上一轮改造过后，比较拖页面加载速度的主要有三点：</p><ol><li>页面首个请求响应时间；</li><li>图片资源加载时间；</li><li>站内搜索引用的 JSON 资源加载时间。</li></ol><p>第 1 点在页面仍然托管在 GitHub Pages 的前提下，似乎没有什么好办法能产生质的飞跃；本篇主要改善了第 2 点和第 3 点。</p><h1 id="0x01-图片资源加速"><a href="#0x01-图片资源加速" class="headerlink" title="0x01 图片资源加速"></a><strong>0x01 图片资源加速</strong></h1><p>这里所说的图片主要是指文章里引用的图片。</p><p>我一直将图片放在博客源码根目录的 images 文件夹下，引用图片的习惯写法是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![after use cdn](/images/posts/github/cdn-after.png)</span><br></pre></td></tr></table></figure><p>如果想将这个图片地址替换为 jsDelivr 的地址，需要做的就是将 /images 替换为 <a href="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images</a></p><p>一处一处替换行不行？当然也行，但后面写新文章时要引用图片，还得手动写这一长串，不方便；万一 jsDeliver 出状况，也不好一键切换回来。有没有一劳永逸的方法？当然也有，我们从 Jekyll 的 layout 机制来想办法。</p><p>Jekyll 的 layout 可以理解为页面模板，它是可以继承的，比如我的博客的所有页面模板有一个共同的祖先模板 _layouts/default.html，模板里可以使用 Liquid 语法对内容进行处理，我们可以利用这一点，来自动完成批量替换的工作。</p><p>关键代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% assign assets_base_url = site.url %&#125;</span><br><span class="line">&#123;% if site.cdn.jsdelivr.enabled %&#125;</span><br><span class="line">&#123;% assign assets_base_url = &quot;https://cdn.jsdelivr.net/gh/&quot; | append: site.repository | append: &#x27;@master&#x27; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% assign assets_images_url = &#x27;src=&quot;&#x27; | append: assets_base_url | append: &quot;/images&quot; %&#125;</span><br><span class="line">&#123;% include header.html %&#125;</span><br><span class="line">    &#123;&#123; content | replace: &#x27;src=&quot;/images&#x27;, assets_images_url &#125;&#125;</span><br><span class="line">&#123;% include footer.html %&#125;</span><br></pre></td></tr></table></figure><p>大意就是，如果打开了启用 jsDelivr 加速的开关，就将 content 里的 src=”/images” 替换为 src=”<a href="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images&quot;%EF%BC%8C%E5%90%A6%E5%88%99%E6%9B%BF%E6%8D%A2%E4%B8%BA">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images&quot;，否则替换为</a> src=”<a href="https://mazhuang.org/images&quot;">https://mazhuang.org/images&quot;</a></p><p>以上便达成了我们的目的</p><h1 id="0x02-站内搜索引用的-JSON-资源加速"><a href="#0x02-站内搜索引用的-JSON-资源加速" class="headerlink" title="0x02 站内搜索引用的 JSON 资源加速"></a><strong>0x02 站内搜索引用的 JSON 资源加速</strong></h1><p>我是使用 <a href="https://github.com/christian-fei/Simple-Jekyll-Search">Simple-Jekyll-Search</a> 这个 JavaScript 库来实现站内搜索的，它的搜索数据是来自一个动态生成的 JSON 文件。</p><p>这个 JSON 文件编译前长这样：</p><p><a href="https://github.com/mzlogin/mzlogin.github.io/blob/master/assets/search_data.json">https://github.com/mzlogin/mzlogin.github.io/blob/master/assets/search_data.json</a></p><p>Jekyll 编译后长这样：</p><p><a href="https://mazhuang.org/assets/search_data.json">https://mazhuang.org/assets/search_data.json</a></p><p>这样的资源是没有办法直接通过替换网址来用 jsDelivr 加速的，因为 jsDelivr 上缓存的是编译前的文件，而我们需要的是编译后的。</p><p>那我们就想办法：</p><p>将博客源码编译；<br>将编译结果保存到另一个分支；<br>通过 jsDelivr 引用新分支上的这个文件。<br>这些步骤可以通过 GitHub 去年推出的新特性 <a href="https://github.com/features/actions">Actions</a> 来完成，在我们每一次向博客源码仓库 push 代码时自动触发。</p><p>关键步骤如下：</p><ol><li>在 GitHub 新建一个 Personal access Token：</li></ol><p> Settings –&gt; Developer settings –&gt; Personal access tokens –&gt; Generate new token –&gt; 填写 note，勾选 public_repo，生成之后复制 token 值备用。</p><ol start="2"><li><p>在博客源码仓库的 Settings –&gt; Secrets –&gt; New secret，Name 填 ACCESS_TOKEN，Value 填第 1 步里复制的 token 值；</p></li><li><p>在博客源码根目录下新建文件 .github/workflows/ci.yml，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">name: Build and Deploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v2.3.1</span><br><span class="line">        with: </span><br><span class="line">          persist-credentials: false</span><br><span class="line"></span><br><span class="line">      - name: Set Ruby 2.7</span><br><span class="line">        uses: actions/setup-ruby@v1</span><br><span class="line">        with:</span><br><span class="line">          ruby-version: 2.7</span><br><span class="line"></span><br><span class="line">      - name: Install and Build</span><br><span class="line">        run: |</span><br><span class="line">          gem install bundler</span><br><span class="line">          bundle install</span><br><span class="line">          bundle exec jekyll build</span><br><span class="line">           </span><br><span class="line">      - name: Deploy</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@3.6.2</span><br><span class="line">        with:</span><br><span class="line">          ACCESS_TOKEN: $</span><br><span class="line">          BRANCH: built</span><br><span class="line">          FOLDER: _site</span><br><span class="line">          CLEAN: true</span><br></pre></td></tr></table></figure><p>大意就是在向 master 分支 push 代码时，自动执行 checkout、初始化 ruby 环境、安装 Jekyll 并编译博客源码的工作，最后将编译生成的 _site 目录里的内容推送到 built 分支。对 GitHub Actions 感兴趣的同学可以自行参考官方说明学习</p></li><li><p>修改引用 JSON 文件的地方，比如我的 _includes/sidebar-search.html 里的写法由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json: &#x27;https://mazhuang.org/assets/search_data.json&#x27;,</span><br></pre></td></tr></table></figure><p>改为了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.cdn.jsdelivr.enabled and site.url contains &#x27;mazhuang.org&#x27; %&#125;</span><br><span class="line">  json: &#x27;https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@built/assets/search_data.json&#x27;,</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  json: &#x27;&#123;&#123; site.url &#125;&#125;/assets/search_data.json&#x27;,</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>将以上更改推送到源码仓库，等待处理完成即可。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写过一篇 使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源，在那之后，又陆续想到并实施了几点利用 jsDelivr 进一步加速静态资源加载的措施，新起一篇作为记录和分享。&lt;/p&gt;</summary>
    
    
    
    
    <category term="jsDelivr" scheme="https://g8d.xyz/tags/jsDelivr/"/>
    
  </entry>
  
  <entry>
    <title>B2+CF+ShareX,实现无成本图床和便捷上传</title>
    <link href="https://g8d.xyz/2021/02/02/shareX/"/>
    <id>https://g8d.xyz/2021/02/02/shareX/</id>
    <published>2021-02-02T13:51:26.000Z</published>
    <updated>2021-11-02T13:53:42.373Z</updated>
    
    <content type="html"><![CDATA[<h1 class="wp-block-zibllblock-biaoti title-theme" id="wznav_0">准备</h1>1.一个cloudflare账号 https://dash.cloudflare.com/2.一个B2账号 https://www.backblaze.com/b2/cloud-storage.html3.windows软件ShareX<span id="more"></span><h1 class="wp-block-zibllblock-biaoti title-theme" id="wznav_1">步骤</h1>1.注册B2账号,点击进入B2 Cloud Storage,点击Buckets创建一个BUcket,设为public,并上传一个图片,记录下下图要用的域名<figure class="wp-block-image size-large"><img src="https://dlcu.cf/yymqCaPBK1.png" data-src="https://dlcu.cf/yymqCaPBK1.png" alt="" class=" lazyloaded" /></figure>2.点击App keys,添加一个新的key,bucket就选你刚创建的那个,记录下你的密钥,之后要在ShareX中用<figure class="wp-block-image size-large"><img src="https://dlcu.cf/lq4iZxMbyV.png" data-src="https://dlcu.cf/lq4iZxMbyV.png" alt="" class=" lazyloaded" /></figure>3.打开cf,cname一下上图要记的域名,小云朵点亮<figure class="wp-block-image size-large"><img src="https://dlcu.cf/zZ9ctKUmmD.png" data-src="https://dlcu.cf/zZ9ctKUmmD.png" alt="" class=" lazyloaded" /></figure>4.加一条页面缓存规则.<figure class="wp-block-image size-large"><img src="https://dlcu.cf/MzfvOqqD3w.png" data-src="https://dlcu.cf/MzfvOqqD3w.png" alt="" class=" lazyloaded" /></figure>5.创建一个workers,粘贴下列代码,记得b2domain和bucket的值改成自己的<div class="enlighter-default enlighter-v-standard enlighter-t-bootstrap4 enlighter-hover enlighter-linenumbers enlighter-overflow-scroll"><div class="enlighter"><div class=""><div><span class="enlighter-s0">'use strict'</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text">const b2Domain = </span><span class="enlighter-s0">'img.domain.com'</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // configure this as per instructions above</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const b2Bucket = </span><span class="enlighter-s0">'bucket-name'</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // configure this as per instructions above</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const b2UrlPath = `/file/$</span><span class="enlighter-g1">{</span><span class="enlighter-text">b2Bucket</span><span class="enlighter-g1">}</span><span class="enlighter-text">/`;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-m0">addEventListener</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'fetch'</span><span class="enlighter-text">, event =</span><span class="enlighter-g1">&gt;</span><span class="enlighter-text"> </span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">return</span><span class="enlighter-text"> event.</span><span class="enlighter-m3">respondWith</span><span class="enlighter-g1">(</span><span class="enlighter-m0">fileReq</span><span class="enlighter-g1">(</span><span class="enlighter-text">event</span><span class="enlighter-g1">))</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-g1">})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-c0"></span></div></div><div class=""><div><span class="enlighter-c0">// define the file extensions we wish to add basic access control headers to</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const corsFileTypes = </span><span class="enlighter-g1">[</span><span class="enlighter-s0">'png'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'jpg'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'gif'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'jpeg'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'webp'</span><span class="enlighter-g1">]</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-c0"></span></div></div><div class=""><div><span class="enlighter-c0">// backblaze returns some additional headers that are useful for debugging, but unnecessary in production. We can remove these to save some size</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const removeHeaders = </span><span class="enlighter-g1">[</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'x-bz-content-sha1'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'x-bz-file-id'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'x-bz-file-name'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'x-bz-info-src_last_modified_millis'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'X-Bz-Upload-Timestamp'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'Expires'</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-g1">]</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text">const expiration = </span><span class="enlighter-n1">31536000</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // override browser cache for images - 1 year</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-c0"></span></div></div><div class=""><div><span class="enlighter-c0">// define a function we can re-use to fix headers</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const fixHeaders = </span><span class="enlighter-k1">function</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, status, headers</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> let newHdrs = </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">Headers</span><span class="enlighter-g1">(</span><span class="enlighter-text">headers</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // add basic cors headers for images</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">corsFileTypes.</span><span class="enlighter-m3">includes</span><span class="enlighter-g1">(</span><span class="enlighter-text">url.</span><span class="enlighter-m3">pathname</span><span class="enlighter-text">.</span><span class="enlighter-m3">split</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'.'</span><span class="enlighter-g1">)</span><span class="enlighter-text">.</span><span class="enlighter-m3">pop</span><span class="enlighter-g1">())){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'Access-Control-Allow-Origin'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'*'</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // override browser cache for files when 200</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">status === </span><span class="enlighter-n1">200</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'Cache-Control'</span><span class="enlighter-text">, </span><span class="enlighter-s0">"public, max-age="</span><span class="enlighter-text"> + expiration</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-k1">else</span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // only cache other things for 5 minutes</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'Cache-Control'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'public, max-age=300'</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // set ETag for efficient caching where possible</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> const ETag = newHdrs.</span><span class="enlighter-m3">get</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'x-bz-content-sha1'</span><span class="enlighter-g1">)</span><span class="enlighter-text"> </span><span class="enlighter-g0">||</span><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">get</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'x-bz-info-src_last_modified_millis'</span><span class="enlighter-g1">)</span><span class="enlighter-text"> </span><span class="enlighter-g0">||</span><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">get</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'x-bz-file-id'</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">ETag</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'ETag'</span><span class="enlighter-text">, ETag</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // remove unnecessary headers</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> removeHeaders.</span><span class="enlighter-m3">forEach</span><span class="enlighter-g1">(</span><span class="enlighter-text">header =</span><span class="enlighter-g1">&gt;</span><span class="enlighter-text"> </span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">delete</span><span class="enlighter-g1">(</span><span class="enlighter-text">header</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">return</span><span class="enlighter-text"> newHdrs;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-g1">}</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text">async </span><span class="enlighter-k1">function</span><span class="enlighter-text"> </span><span class="enlighter-m0">fileReq</span><span class="enlighter-g1">(</span><span class="enlighter-text">event</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> const cache = caches.</span><span class="enlighter-m3">default</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // Cloudflare edge caching</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> const url = </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">URL</span><span class="enlighter-g1">(</span><span class="enlighter-text">event.</span><span class="enlighter-m3">request</span><span class="enlighter-text">.</span><span class="enlighter-m3">url</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">url.</span><span class="enlighter-m3">host</span><span class="enlighter-text"> === b2Domain </span><span class="enlighter-g0">&amp;&amp;</span><span class="enlighter-text"> !url.</span><span class="enlighter-m3">pathname</span><span class="enlighter-text">.</span><span class="enlighter-m3">startsWith</span><span class="enlighter-g1">(</span><span class="enlighter-text">b2UrlPath</span><span class="enlighter-g1">)){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> url.</span><span class="enlighter-m3">pathname</span><span class="enlighter-text"> = b2UrlPath + url.</span><span class="enlighter-m3">pathname</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> let response = await cache.</span><span class="enlighter-m3">match</span><span class="enlighter-g1">(</span><span class="enlighter-text">url</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // try to find match for this request in the edge cache</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">response</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // use cache found on Cloudflare edge. Set X-Worker-Cache header for helpful debug</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> let newHdrs = </span><span class="enlighter-m0">fixHeaders</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, response.</span><span class="enlighter-m3">status</span><span class="enlighter-text">, response.</span><span class="enlighter-m3">headers</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'X-Worker-Cache'</span><span class="enlighter-text">, </span><span class="enlighter-s0">"true"</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">return</span><span class="enlighter-text"> </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">Response</span><span class="enlighter-g1">(</span><span class="enlighter-text">response.</span><span class="enlighter-m3">body</span><span class="enlighter-text">, </span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> status: response.</span><span class="enlighter-m3">status</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> statusText: response.</span><span class="enlighter-m3">statusText</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> headers: newHdrs</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // no cache, fetch image, apply Cloudflare lossless compression</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> response = await </span><span class="enlighter-m0">fetch</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, </span><span class="enlighter-g1">{</span><span class="enlighter-text">cf: </span><span class="enlighter-g1">{</span><span class="enlighter-text">polish: </span><span class="enlighter-s0">"lossless"</span><span class="enlighter-g1">}})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> let newHdrs = </span><span class="enlighter-m0">fixHeaders</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, response.</span><span class="enlighter-m3">status</span><span class="enlighter-text">, response.</span><span class="enlighter-m3">headers</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">response.</span><span class="enlighter-m3">status</span><span class="enlighter-text"> === </span><span class="enlighter-n1">200</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> response = </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">Response</span><span class="enlighter-g1">(</span><span class="enlighter-text">response.</span><span class="enlighter-m3">body</span><span class="enlighter-text">, </span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> status: response.</span><span class="enlighter-m3">status</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> statusText: response.</span><span class="enlighter-m3">statusText</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> headers: newHdrs</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-k1">else</span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> response = </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">Response</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'File not found!'</span><span class="enlighter-text">, </span><span class="enlighter-g1">{</span><span class="enlighter-text"> status: </span><span class="enlighter-n1">404</span><span class="enlighter-text"> </span><span class="enlighter-g1">})</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> event.</span><span class="enlighter-m3">waitUntil</span><span class="enlighter-g1">(</span><span class="enlighter-text">cache.</span><span class="enlighter-m3">put</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, response.</span><span class="enlighter-m3">clone</span><span class="enlighter-g1">()))</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">return</span><span class="enlighter-text"> response;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-g1">}</span></div></div></div></div>6.workers里添加路由,使访问你的域名时,先走workers<figure class="wp-block-image size-large"><img src="https://dlcu.cf/GnuGH0pVbn.png" data-src="https://dlcu.cf/GnuGH0pVbn.png" alt="" class=" lazyloaded" /></figure>访问一下你的图片文件比如说一开始是https://f000.backblazeb2.com/file/backblaze1489498/wallhaven-md2x8m.jpg现在用https://dlcu.cf/wallhaven-md2x8m.jpg就可以访问了<p>7.配置ShareX.</p><p>这个感觉没啥好说的,主页面–目标–上传目标设置–backblaze b2,填上就行了</p><figure class="wp-block-image size-large"><img src="https://dlcu.cf/O6FVrPQlmZ.png" data-src="https://dlcu.cf/O6FVrPQlmZ.png" alt="" class=" lazyloaded" /></figure><h1 class="wp-block-zibllblock-biaoti title-theme" id="wznav_2">结束</h1>这个的好处就是方便了上传,自己在电脑前,截一下图直接上传,或者复制一下直接上传还有就是可以用自己的域名,再说的话就是数据自己也能找回.]]></content>
    
    
    <summary type="html">&lt;h1 class=&quot;wp-block-zibllblock-biaoti title-theme&quot; id=&quot;wznav_0&quot;&gt;准备&lt;/h1&gt;
1.一个cloudflare账号 https://dash.cloudflare.com/
2.一个B2账号 https://www.backblaze.com/b2/cloud-storage.html
3.windows软件ShareX</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>在多台服务器上部署哪吒探针 vps监控</title>
    <link href="https://g8d.xyz/2021/01/08/nezha/"/>
    <id>https://g8d.xyz/2021/01/08/nezha/</id>
    <published>2021-01-08T14:03:05.000Z</published>
    <updated>2021-11-20T11:23:25.372Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://inkup.cn/usr/uploads/2021/10/38754080.png"></p><span id="more"></span>开源地址：[https://github.com/naiba/nezha](https://github.com/naiba/nezha)  预览地址：[https://server.inkup.cn](https://server.inkup.cn)<p><strong>功能特性</strong></p><ul><li>  计划任务：备份脚本、服务重启，等定期运维任务。</li><li>  报警通知：CPU、内存、硬盘、带宽、流量实时监控。</li><li>  服务监控：HTTP、SSL证书、ping、TCP 端口等。</li><li>  自定义代码：改LOGO、改色调、加统计代码等。</li></ul><p><a href="https://github.com/naiba/nezha">详情见文档</a></p><p>部署教程<br><strong>一· 设置域名解析</strong><br>可以直接用 ip+端口 方式访问，为了安全及后期维护迁移方便，强烈建议设置用域名访问。准备两个域名，用本站域名举例：</p><ul><li>  域名1： a.moththe.com 作为面板访问域名，套 CDN（保护源站IP不泄露）。</li><li>域名2： b.moththe.com 不套CDN，指向面板服务器 IP，作为客户端与面板连接使用。<br>  两个域名都解析到部署面板服务器的IP。</li></ul><p><strong>二. 创建 GitHub OAuth Apps</strong><br>需要有Github账号，没有的话先注册一个。这一步让Github账号用作面板后台登录验证。</p><ol><li>创建 OAuth Apps<br> 打开 <a href="https://github.com/settings/developers">Github Developer settings</a> ，点击 New OAuth App 按钮</li></ol><p><img src="https://inkup.cn/usr/uploads/2021/10/4211366071.png" alt="请输入图片描述" title="请输入图片描述"></p><ol><li><p>填写站点名称和 URL 信息<br> 请参考图片填写，把 a.moththe.com 更换成自己面板域名，填写好以后点击 Register application 。</p><p> https://套CDN的域名<br> https://套CDN的域名/oauth2/callback</p></li></ol><p><img src="https://inkup.cn/usr/uploads/2021/10/4233705968.png" alt="请输入图片描述" title="请输入图片描述"></p><ol><li>获取 <em>OAuth Apps</em> 的 <em>Client ID</em> 和 <em>Client secret</em><br> 参照下图创建 client id 和 clients secret 并记下来。</li></ol><p><img src="https://inkup.cn/usr/uploads/2021/10/3344270305.png" alt="请输入图片描述" title="请输入图片描述"><br><strong>三. 部署哪吒探针面板端</strong></p><ol><li><p>放行对应端口<br> 放行8008、5555两个端口，这是默认的，如果你安装中改为其他端口，防火墙放行相应的端口。</p></li><li><p>一键安装脚本<br> 键入后按提示安装面板端，依次输入上面步骤获取的 Client ID ， Client secret 等相关信息。</p><p> curl -L <a href="https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh">https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh</a>  -o nezha.sh &amp;&amp; chmod +x nezha.sh<br> sudo ./nezha.sh</p></li></ol><p><img src="https://inkup.cn/usr/uploads/2021/10/279377451.png" alt="请输入图片描述" title="请输入图片描述"><br><strong>四. 设置域名访问</strong></p><ol><li>设置反向代理<br> 在宝塔面板中新建站点，我这里是套CDN的域名，然后设置反代。</li></ol><p><img src="https://inkup.cn/usr/uploads/2021/10/243714898.png" alt="请输入图片描述" title="请输入图片描述"><br>反代配置文件</p><pre><code>location /&#123;    proxy_pass http://127.0.0.1:8008;    proxy_set_header Host $host;&#125;location /ws&#123;    proxy_pass http://127.0.0.1:8008;    proxy_http_version 1.1;    proxy_set_header Upgrade $http_upgrade;    proxy_set_header Connection &quot;Upgrade&quot;;    proxy_set_header Host $host;&#125;</code></pre><ol><li>配置 SSL 证书<br> 直接在宝塔面板中一键获取 Let’s Encrypt 免费证书。如果域名托管在 Cloudflare，也可以使用CF生成的免费长期证书，填在面板中使用。然后开启强制 HTTPS 即可。</li></ol><p>现在就可以直接通过域名访问哪吒探针了，现在我们来配置被监控的服务器。</p><p><strong>五. 部署哪吒探针客户端（被监控）</strong></p><ol><li>在哪吒面板中生成客户端连接密钥<br> 打开哪吒面板，点击登录后台，通过GitHub账号验证后进入管理后台，添加服务器，创建好以后记下生成的密钥</li></ol><p><img src="https://inkup.cn/usr/uploads/2021/10/1695118959.png" alt="请输入图片描述" title="请输入图片描述"></p><ol><li><p>一键安装客户端<br> 键入后按提示 安装监控Agent ，依次输入 域名2(我这里是不套CDN的域名），上一步骤中生成的连接密钥等相关信息。</p><p> curl -L <a href="https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh">https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh</a>  -o nezha.sh &amp;&amp; chmod +x nezha.sh<br> sudo ./nezha.sh</p></li></ol><p><img src="https://inkup.cn/usr/uploads/2021/10/2649339818.png" alt="请输入图片描述" title="请输入图片描述"><br>有多台被监控机器时，按照此步骤在控制面板添加服务器。其他功能可自行在哪吒面板后台摸索。</p><p><strong><em>常见问题</em></strong><br>1· 打开显示断开实时链接<br>可以关闭CDN再试试。</p><p>2· Centos8 中部署客户端或者面板端，一直显示离线<br>请关闭SElinux，打开配置文件 vi /etc/selinux/config ，将 SELINUX=enforcing 改为 SELINUX=disabled ，重启机器 reboot ，然后键入安装脚本选择 重启Agent 。</p><p>3· 修改服务器信息后变成离线<br>在安装客户端(被监控)的服务器上执行 systemctl restart nezha-agent 重启程序。</p><p>4· 启动nezha-agent还是一直显示离线<br>检查配置有没有写对 cat /etc/systemd/system/nezha-agent.service | grep ExecStart 。</p><p>5· 如何进行数据迁移、备份恢复？<br>数据储存在 /opt/nezha 文件夹中，迁移数据时打包这个文件夹，到新环境解压。然后执行一键脚本安装即可。</p><p>6· 首页服务器随机闪烁掉线？<br>执行 ntpdate 0.pool.ntp.org 同步一下面板部署所在的服务器的时间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://inkup.cn/usr/uploads/2021/10/38754080.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://g8d.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 服务器使用 Rclone 挂载 OneDrive</title>
    <link href="https://g8d.xyz/2021/01/01/onedrive/"/>
    <id>https://g8d.xyz/2021/01/01/onedrive/</id>
    <published>2021-01-01T14:06:50.000Z</published>
    <updated>2021-11-20T11:23:05.140Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过挂载 Google Drive 的过程，因为我的 Google Drive 空间不大，而 OneDrive 有 5T 的空间，所以准备把 OneDrive 挂载上去使用。OneDrive 的挂载方法和 Google Drive 大部分是差不多的，但 OneDrive 的授权要麻烦一些。</p><p>这里简单记录一下我配置的过程。<span id="more"></span>**下载安装**  使用脚本下载安装 Rclone：<pre><code>curl https://rclone.org/install.sh | sudo bash</code></pre><p>初始化配置<br>安装完成后输入：</p><pre><code>rclone config</code></pre><p>可以看到：</p><pre><code>2021/04/14 07:14:46 NOTICE: Config file &quot;/root/.config/rclone/rclone.conf&quot; not found - using defaults</code></pre><p>No remotes found - make a new one<br>n) New remote<br>s) Set configuration password<br>q) Quit config</p><p>输入 n 新建配置。</p><p>name 可以随便输入，</p><p>然后会出现挂载的服务类型，如下：</p><pre><code>Type of storage to configure.</code></pre><p>Enter a string value. Press Enter for the default (“”).<br>Choose a number from below, or type in your own value<br>1 / 1Fichier<br>“fichier”<br>2 / Alias for an existing remote<br>“alias”<br>3 / Amazon Drive<br>“amazon cloud drive”<br>4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS<br>“s3”<br>5 / Backblaze B2<br>“b2”<br>6 / Box<br>“box”<br>7 / Cache a remote<br>“cache”<br>8 / Citrix Sharefile<br>“sharefile”<br>9 / Compress a remote<br>“compress”<br>10 / Dropbox<br>“dropbox”<br>11 / Encrypt/Decrypt a remote<br>“crypt”<br>12 / Enterprise File Fabric<br>“filefabric”<br>13 / FTP Connection<br>“ftp”<br>14 / Google Cloud Storage (this is not Google Drive)<br>“google cloud storage”<br>15 / Google Drive<br>“drive”<br>16 / Google Photos<br>“google photos”<br>17 / Hadoop distributed file system<br>“hdfs”<br>18 / Hubic<br>“hubic”<br>19 / In memory object storage system.<br>“memory”<br>20 / Jottacloud<br>“jottacloud”<br>21 / Koofr<br>“koofr”<br>22 / Local Disk<br>“local”<br>23 / Mail.ru Cloud<br>“mailru”<br>24 / Mega<br>“mega”<br>25 / Microsoft Azure Blob Storage<br>“azureblob”<br>26 / Microsoft OneDrive<br>“onedrive”<br>27 / OpenDrive<br>“opendrive”<br>28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)<br>“swift”<br>29 / Pcloud<br>“pcloud”<br>30 / Put.io<br>“putio”<br>31 / QingCloud Object Storage<br>“qingstor”<br>32 / SSH/SFTP Connection<br>“sftp”<br>33 / Sugarsync<br>“sugarsync”<br>34 / Tardigrade Decentralized Cloud Storage<br>“tardigrade”<br>35 / Transparently chunk/split large files<br>“chunker”<br>36 / Union merges the contents of several upstream fs<br>“union”<br>37 / Webdav<br>“webdav”<br>38 / Yandex Disk<br>“yandex”<br>39 / Zoho<br>“zoho”<br>40 / http Connection<br>“http”<br>41 / premiumize.me<br>“premiumizeme”<br>42 / seafile<br>“seafile”</p><p>直接输入序号，比如我挂载的是 OneDrive 就可以输入 26 ，</p><p>client_id 可以直接回车默认，</p><p>client_secret 也可以直接回车默认，</p><p>然后会出现 OneDrive 区域选择，如下：</p><pre><code>Choose national cloud region for OneDrive.</code></pre><p>Enter a string value. Press Enter for the default (“global”).<br>Choose a number from below, or type in your own value<br>1 / Microsoft Cloud Global<br>“global”<br>2 / Microsoft Cloud for US Government<br>“us”<br>3 / Microsoft Cloud Germany<br>“de”<br>4 / Azure and Office 365 operated by 21Vianet in China<br>“cn”</p><p>可以直接输入 1 选择全球，</p><p>然后是选择是否进行高级配置，如下：</p><pre><code>dit advanced config? (y/n)</code></pre><p>y) Yes<br>n) No (default)</p><p>可以输入 n ，</p><p>接着是自动配置选择，如下：</p><pre><code>Remote config</code></pre><p>Use auto config?</p><ul><li>  Say Y if not sure</li><li>Say N if you are working on a remote or headless machine<br>  y) Yes (default)</li></ul><p>n) No</p><p>可以输入 n ，</p><p>这里需要获取授权码：</p><pre><code>For this to work, you will need rclone available on a machine that has</code></pre><p>a web browser available.</p><p>For more help and alternate methods see: <a href="https://rclone.org/remote_setup/">https://rclone.org/remote_setup/</a></p><p>Execute the following on the machine with the web browser (same rclone<br>version recommended):</p><pre><code>rclone authorize &quot;onedrive&quot;</code></pre><p>Then paste the result below:</p><p>授权码需要在本地电脑上获取，访问 <a href="https://rclone.org/downloads/">https://rclone.org/downloads/</a> 根据你的电脑系统版本下载对应的 Rclone。</p><p>下载完成后解压，进入存放 Rclone 的目录，以 Win10 为例，打开 Powershell ，我的 Rclone 放在 E:下载rclone-v1.55.0-windows-amd64 ，我可以输入：</p><pre><code>cd E:\下载\rclone-v1.55.0-windows-amd64</code></pre><p>在存放 Rclone 的目录可以看到 rclone.exe 的可执行程序，输入：</p><pre><code>./rclone authorize &quot;onedrive&quot;</code></pre><p>浏览器应该会自动打开，如果浏览器没有打开可以根据提示复制地址访问。如果浏览器登录了 OneDrive 的话会直接显示授权确认信息，如果没有登录的话会弹出登录页面，登录 OneDrive 后也会显示授权确认信息，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16184932694425.jpeg" alt="请输入图片描述" title="请输入图片描述"></p><p>选择 接受 后在本地命令行会显示一串 JSON 格式的授权信息，复制授权信息包括首尾的 {} ，到 Linux 终端粘贴。</p><p>然后是选择 OneDrive 的类型，如下：</p><pre><code>Choose a number from below, or type in an existing value</code></pre><p>1 / OneDrive Personal or Business<br>“onedrive”<br>2 / Root Sharepoint site<br>“sharepoint”<br>3 / Sharepoint site name or URL (e.g. mysite or <a href="https://contoso.sharepoint.com/sites/mysite">https://contoso.sharepoint.com/sites/mysite)</a>)<br>“url”<br>4 / Search for a Sharepoint site<br>“search”<br>5 / Type in driveID (advanced)<br>“driveid”<br>6 / Type in SiteID (advanced)<br>“siteid”<br>7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)<br>“path”</p><p>可以输入 1 ，</p><p>然后会显示找到的 OneDrive 账户，如下：</p><p>Found 1 drives, please select the one you want to use:<br>0: OneDrive (business) id=b!b_xnJJqyBMSVPjgvhvbP8XmJ_M_dMjhzrbhnaWknnbKqNBm8MTqM3kvEtW67P</p><pre><code>Found drive &#39;root&#39; of type &#39;business&#39;, URL: https://xxx-my.sharepoint.com/personal/changbin_xxx_onmicrosoft_com/Documents</code></pre><p>Is that okay?<br>y) Yes (default)<br>n) No</p><p>确认无误后输入 y ，</p><p>接着会显示你选择的配置信息，确认无误后输入 y 保存配置。</p><p>挂载<br>输入：</p><pre><code>rclone mount configName:OneDriveLocation dir --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000</code></pre><p>其中的 configName 就是配置名称，OneDriveLocation 就是要挂载的 OneDrive 目录，dir 就是要挂载到的本地目录。</p><p>例如我要把一个名为 OneDrive 的配置挂载到本地的 /OneDrive 目录，我可以这样写：</p><pre><code>rclone mount OneDrive:/ /OneDrive --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000</code></pre><p>我这里挂载的是整个 OneDrive 网盘，所以我写的是 OneDrive 的根目录 / 。</p><p>挂载完成后不会显示任何内容，可以再开一个终端，输入 df -h 查看磁盘空间，如下：</p><pre><code>Filesystem         Size  Used Avail Use% Mounted on</code></pre><p>devtmpfs 1.5G 0 1.5G 0% /dev<br>tmpfs 1.5G 0 1.5G 0% /dev/shm<br>tmpfs 1.5G 153M 1.4G 11% /run<br>tmpfs 1.5G 0 1.5G 0% /sys/fs/cgroup<br>/dev/vda1 57G 26G 29G 48% /<br>tmpfs 301M 0 301M 0% /run/user/0<br>OneDrive 5.0T 1.1T 4.0T 21% /OneDrive</p><p>挂载完成后进入挂载的目录就可以看到 OneDrive 的文件了，上传文件可以直接拷贝到挂载目录，下载也是直接拷贝到本地目录。</p><p>挂载出错<br>如果在挂载的时候出现了类似下面的提示：</p><pre><code>2021/03/04 18:58:16 Fatal error: failed to mount FUSE fs: fusermount: exec: &quot;fusermount&quot;: executable file not found in $PATH</code></pre><p>需要安装 fuse。</p><p>CentOS/Fedora 安装 fuse：</p><p>yum install -y fuse<br>Ubuntu/Debian 安装 fuse：</p><p>apt install -y fuse</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写过挂载 Google Drive 的过程，因为我的 Google Drive 空间不大，而 OneDrive 有 5T 的空间，所以准备把 OneDrive 挂载上去使用。OneDrive 的挂载方法和 Google Drive 大部分是差不多的，但 OneDrive 的授权要麻烦一些。&lt;/p&gt;&lt;p&gt;这里简单记录一下我配置的过程。</summary>
    
    
    
    
    <category term="Linux" scheme="https://g8d.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 中嵌入HTML实现其他功能</title>
    <link href="https://g8d.xyz/2020/11/20/Markdown-3/"/>
    <id>https://g8d.xyz/2020/11/20/Markdown-3/</id>
    <published>2020-11-20T07:12:51.000Z</published>
    <updated>2021-11-21T10:29:15.036Z</updated>
    
    <content type="html"><![CDATA[<p>自从几年前开始在 GitHub 玩耍，接触到 Markdown 之后，就一发不可收拾，在各种文档编辑上，有条件用 Markdown 的尽量用，不能用的创造条件也要用——README、博客、公众号、接口文档等等全都是，比如当前这篇文章就是用 Markdown 编辑而成。</p><span id="more"></span><p>这几年也发现越来越多的网站和程序提供了对 Markdown 的支持，从最初接触的 GitHub、Jekyll，到简书、掘金、CSDN 等等，由此也从别人做得好的文档中，学到了一些『奇技淫巧』，所以本文不是对 Markdown 基础语法的介绍，而是一些相对高级、能将 Markdown 玩出更多花样的小技巧。</p><p><em>注：如下技巧大多是利用 Markdown 兼容部分 HTML 标签的特性来完成，不一定在所有网站和软件里都完全支持，主要以 GitHub 支持为准。</em></p><h2 id="在表格单元格里换行"><a href="#在表格单元格里换行" class="headerlink" title="在表格单元格里换行"></a>在表格单元格里换行</h2><p>借助于 HTML 里的 <code>&lt;br /&gt;</code> 实现。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| Header1 | Header2                          |</span><br><span class="line">|---------|----------------------------------|</span><br><span class="line">| item 1  | 1. one&lt;br /&gt;2. two&lt;br /&gt;3. three | </span><br></pre></td></tr></table></figure><p>示例效果：</p><table><thead><tr><th>Header1</th><th>Header2</th></tr></thead><tbody><tr><td>item 1</td><td>1. one</td></tr><tr><td>2. two</td><td></td></tr><tr><td>3. three</td><td></td></tr></tbody></table><h2 id="图文混排"><a href="#图文混排" class="headerlink" title="图文混排"></a>图文混排</h2><p>使用 <code>&lt;img&gt;</code> 标签来贴图，然后指定 <code>align</code> 属性。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">这是一个示例图片。</span><br><span class="line"></span><br><span class="line">图片显示在 N 段文字的右边。</span><br><span class="line"></span><br><span class="line">N 与图片高度有关。</span><br><span class="line"></span><br><span class="line">刷屏行。</span><br><span class="line"></span><br><span class="line">刷屏行。</span><br><span class="line"></span><br><span class="line">到这里应该不会受影响了，本行应该延伸到了图片的正下方，所以我要足够长才能确保不同的屏幕下都看到效果。 </span><br></pre></td></tr></table></figure><p>示例效果：</p><p><img src="https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png"></p><p>这是一个示例图片。</p><p>图片显示在 N 段文字的右边。</p><p>N 与图片高度有关。</p><p>刷屏行。</p><p>刷屏行。</p><p>到这里应该不会受影响了，本行应该延伸到了图片的正下方，所以我要足够长才能确保不同的屏幕下都看到效果。</p><h2 id="控制图片大小和位置"><a href="#控制图片大小和位置" class="headerlink" title="控制图片大小和位置"></a>控制图片大小和位置</h2><p>标准的 Markdown 图片标记 <code>![]()</code> 无法指定图片的大小和位置，只能依赖默认的图片大小，默认居左。</p><p>而有时候源图太大想要缩小一点，或者想将图片居中，就仍需要借助 HTML 的标签来实现了。图片居中可以使用 <code>&lt;div&gt;</code> 标签加 <code>align</code> 属性来控制，图片宽高则用 <code>width</code> 和 <code>height</code> 来控制。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**图片默认显示效果：**</span><br><span class="line"></span><br><span class="line">![](/images/posts/markdown/demo.png)</span><br><span class="line"></span><br><span class="line">**加以控制后的效果：**</span><br><span class="line"></span><br><span class="line">&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;65&quot; height=&quot;75&quot; src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot;/&gt;&lt;/div&gt; </span><br></pre></td></tr></table></figure><p>示例效果：</p><p><strong>图片默认显示效果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/markdown/demo.png"></p><p><strong>加以控制后的效果：</strong></p><p><img src="https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png"></p><h2 id="格式化表格"><a href="#格式化表格" class="headerlink" title="格式化表格"></a>格式化表格</h2><p>表格在渲染之后很整洁好看，但是在文件源码里却可能是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|Header1|Header2|</span><br><span class="line">|---|---|</span><br><span class="line">|a|a|</span><br><span class="line">|ab|ab|</span><br><span class="line">|abc|abc| </span><br></pre></td></tr></table></figure><p>不知道你能不能忍，反正我是不能忍。</p><p>好在广大网友们的智慧是无穷的，在各种编辑器里为 Markdown 提供了表格格式化功能，比如我使用 Vim 编辑器，就有 <a href="https://github.com/dhruvasagar/vim-table-mode">vim-table-mode</a> 插件，它能帮我自动将表格格式化成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Header1 | Header2 |</span><br><span class="line">|---------|---------|</span><br><span class="line">| a       | a       |</span><br><span class="line">| ab      | ab      |</span><br><span class="line">| abc     | abc     | </span><br></pre></td></tr></table></figure><p>是不是看着舒服多了？</p><p>如果你不使用 Vim，也没有关系，比如 Atom 编辑器的 <a href="https://atom.io/packages/markdown-table-formatter">markdown-table-formatter</a> 插件，Sublime Text 3 的 <a href="https://github.com/bitwiser73/MarkdownTableFormatter">MarkdownTableFormatter</a> 等等，都提供了类似的解决方案。</p><h2 id="使用-Emoji"><a href="#使用-Emoji" class="headerlink" title="使用 Emoji"></a>使用 Emoji</h2><p>这个是 GitHub 对标准 Markdown 标记之外的扩展了，用得好能让文字生动一些。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我和我的小伙伴们都笑了。:smile: </span><br></pre></td></tr></table></figure><p>示例效果：</p><p>我和我的小伙伴们都笑了。<img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png" alt=":smile:" title=":smile:"></p><p>更多可用 Emoji 代码参见 <a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">https://www.webpagefx.com/tools/emoji-cheat-sheet/</a>。</p><h2 id="行首缩进"><a href="#行首缩进" class="headerlink" title="行首缩进"></a>行首缩进</h2><p>直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，<code>&amp;ensp;</code> 代表半角空格，<code>&amp;emsp;</code> 代表全角空格。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;&amp;emsp;春天来了，又到了万物复苏的季节。 </span><br></pre></td></tr></table></figure><p>示例效果：</p><p>  春天来了，又到了万物复苏的季节。</p><h2 id="展示数学公式"><a href="#展示数学公式" class="headerlink" title="展示数学公式"></a>展示数学公式</h2><p>如果是在 GitHub Pages，可以参考 <a href="http://wanguolin.github.io/mathmatics_rending/">http://wanguolin.github.io/mathmatics_rending/</a> 使用 MathJax 来优雅地展示数学公式（非图片）。</p><p>如果是在 GitHub 项目的 README 等地方，目前我能找到的方案只能是贴图了，以下是一种比较方便的贴图方案：</p><ol><li>在 <a href="https://www.codecogs.com/latex/eqneditor.php">https://www.codecogs.com/latex/eqneditor.php</a> 网页上部的输入框里输入 LaTeX 公式，比如 <code>$$x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$</code>；</li><li>在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 <code>https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24</code>； <img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/markdown/latex-img.png"></li><li>在文档需要的地方使用以上 URL 贴图，比如 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24) </span><br></pre></td></tr></table></figure> 示例效果： <img src="https://latex.codecogs.com/png.latex?$$x=%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D$$"></li></ol><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>在 GitHub 和 GitLab 等网站，除了可以使用有序列表和无序列表外，还可以使用任务列表，很适合要列出一些清单的场景。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**购物清单**</span><br><span class="line"></span><br><span class="line">- [ ] 一次性水杯</span><br><span class="line">- [x] 西瓜</span><br><span class="line">- [ ] 豆浆</span><br><span class="line">- [x] 可口可乐</span><br><span class="line">- [ ] 小茗同学 </span><br></pre></td></tr></table></figure><p>示例效果：</p><p><strong>购物清单</strong></p><ul><li>  [ ] 一次性水杯</li><li>  [x] 西瓜</li><li>  [ ] 豆浆</li><li>  [x] 可口可乐</li><li>  [ ] 小茗同学</li></ul><h2 id="自动维护目录"><a href="#自动维护目录" class="headerlink" title="自动维护目录"></a>自动维护目录</h2><p>有时候维护一份比较长的文档，希望能够自动根据文档中的标题生成目录（Table of Contents），并且当标题有变化时自动更新目录，能减轻工作量，也不易出错。</p><p>如果你使用 Vim 编辑器，那可以使用我维护的插件 <a href="https://github.com/mzlogin/vim-markdown-toc">vim-markdown-toc</a> 来帮你完美地解决此事：</p><p><img src="https://raw.githubusercontent.com/mzlogin/vim-markdown-toc/master/screenshots/english.gif"></p><p>插件地址：<a href="https://github.com/mzlogin/vim-markdown-toc">https://github.com/mzlogin/vim-markdown-toc</a></p><p>如果你使用其它编辑器，一般也能找到对应的解决方案，比如 Atom 编辑器的 <a href="https://atom.io/packages/markdown-toc">markdown-toc</a> 插件，Sublime Text 的 <a href="https://packagecontrol.io/packages/MarkdownTOC">MarkdownTOC</a> 插件等。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自从几年前开始在 GitHub 玩耍，接触到 Markdown 之后，就一发不可收拾，在各种文档编辑上，有条件用 Markdown 的尽量用，不能用的创造条件也要用——README、博客、公众号、接口文档等等全都是，比如当前这篇文章就是用 Markdown 编辑而成。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://g8d.xyz/tags/Markdown/"/>
    
  </entry>
  
</feed>
