<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饼干博客</title>
  
  
  <link href="https://g8d.xyz/atom.xml" rel="self"/>
  
  <link href="https://g8d.xyz/"/>
  <updated>2022-01-29T05:04:46.030Z</updated>
  <id>https://g8d.xyz/</id>
  
  <author>
    <name>饼干</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>申请hax免费VPS配合cf和x-ui搭建免费节点及自动续费</title>
    <link href="https://g8d.xyz/2022/01/29/hax/"/>
    <id>https://g8d.xyz/2022/01/29/hax/</id>
    <published>2022-01-29T04:55:26.000Z</published>
    <updated>2022-01-29T05:04:46.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hax这个网站提供了免费的ipv6 vps，还提供了免费的网络虚拟空间服务，本篇文章就来分享白嫖hax IPV6 vps的方法，和连接方法</p><span id="more"></span><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>打开<a href="https://hax.co.id/">官网</a>点击右上角的“Register”</p><p>在TG上打开<a href="https://t.me/HaxTG_bot">HaxTG_bot</a>输入/gitid获取自己的telegram id，复制到网页中，点击”Submit”按钮<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128102231623.png" alt="image-20220128102231623"></p><p>等会会在telegarm上收到bot发来的验证码，输入验证码，然后设置账号密码，登录账号</p><p>登录之后，点击右上角的“VPS”-“Create VPS”<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128102508528.png" alt="image-20220128102508528"></p><p>参考图上，然后点击“CREATE VPS”</p><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128102925335.png" alt="image-20220128102925335"></p><p>点击”VPS Info”，等几分钟后刷新网页，这样就代表成功了<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128103153106.png" alt="image-20220128103153106"></p><h2 id="连接VPS"><a href="#连接VPS" class="headerlink" title="连接VPS"></a>连接VPS</h2><h3 id="有ipv6"><a href="#有ipv6" class="headerlink" title="有ipv6"></a>有ipv6</h3><p>复制ipv6地址后打开ssh工具，我以Xshell举例，在主机那一栏填ipv6地址</p><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128103405285.png" alt="image-20220128103405285"></p><p>然后点击“用户身份验证”，如图</p><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128103551007.png" alt="image-20220128103551007"></p><p>这样就代表OK了</p><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128103645096.png" alt="image-20220128103645096"></p><h3 id="没有ipv6"><a href="#没有ipv6" class="headerlink" title="没有ipv6"></a>没有ipv6</h3><h4 id="Web-Terminal"><a href="#Web-Terminal" class="headerlink" title="Web Terminal"></a>Web Terminal</h4><p>打开<a href="https://ssh.hax.co.id/">ssh.hax.co.id</a></p><p>输入自己VPS的ipv6地址，用户名root和VPS密码，点击”Connect”<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128104007453.png" alt="image-20220128104007453"></p><p>这样就成功了</p><h4 id="ipv4转发"><a href="#ipv4转发" class="headerlink" title="ipv4转发"></a>ipv4转发</h4><p>打开开Hax的<a href="https://hax.co.id/ipv6-to-ipv4/">IPV4 to IPV6</a>页面，如图</p><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128104311093.png" alt="image-20220128104311093"></p><p>然后点击蓝色的按钮，如果出现了这样，就代表转发的端口被占用了，需要换一个<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128104413923.png" alt="image-20220128104413923"></p><p>通过不断的换，，如果这样，就代表成功了，这个仅7天内有效<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128104741567.png" alt="image-20220128104741567"></p><p>如图</p><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128105142575.png" alt="image-20220128105142575"></p><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128105202469.png" alt="image-20220128105202469"></p><p>这样就成功了<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128105336668.png" alt="image-20220128105336668"></p><h1 id="使用hax，cf和x-ui搭建免费节点"><a href="#使用hax，cf和x-ui搭建免费节点" class="headerlink" title="使用hax，cf和x-ui搭建免费节点"></a>使用hax，cf和x-ui搭建免费节点</h1><p>发表于2022-01-28|更新于2022-01-28|<a href="/categories/Free/">Free</a></p><p>|阅读量:</p><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>上期我们申请到了hax免费的VPS，那么现在就教大家来搭建节点，如果没有ipv6的话就可以放弃了，估计是用不了</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><p>·一个域名，hax vps，一台能上网的设备</p><h2 id="搭建节点"><a href="#搭建节点" class="headerlink" title="搭建节点"></a>搭建节点</h2><h3 id="配置cf"><a href="#配置cf" class="headerlink" title="配置cf"></a>配置cf</h3><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128151451860.png" alt="image-20220128151451860"></p><p>ipv6地址填hax的，切记代理状态一定要打开，这是让cf来接管我们的流量，另外在进入SSL/TLS里的概述，将加密方式改为完全，如图所示<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128151740935.png" alt="image-20220128151740935"></p><p>然后申请证书，如图所示，然后点击创建就有了，切记要复制下来<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128152028348.png" alt="image-20220128152028348"></p><h3 id="vPS操作"><a href="#vPS操作" class="headerlink" title="vPS操作"></a>vPS操作</h3><h4 id="搭建x-ui"><a href="#搭建x-ui" class="headerlink" title="搭建x-ui"></a>搭建x-ui</h4><p>输入以下命令</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br></pre></td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128152236501.png"></p><p>这样就代表成功了</p><p>接着在浏览器地址栏输入 [ipv6地址]:54321进入x-ui的界面ipv6地址替换自己hax的地址，切记，别开代理，默认用户名和密码都是admin，现在就进入了面板<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128152744588.png" alt="image-20220128152744588"></p><h4 id="配置节点"><a href="#配置节点" class="headerlink" title="配置节点"></a>配置节点</h4><p>进入x-ui面板后点击入站列表，点击蓝色的加号，协议选择vmess，操作如下，然后点击添加<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128153235656.png" alt="image-20220128153235656"></p><p>然后点击查看复制链接，直接复制到v2ray客户端里<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128153355311.png"></p><h3 id="测速"><a href="#测速" class="headerlink" title="测速"></a>测速</h3><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/second2022-01-28-15-40-05.png" alt="2022-01-28-15-40-05"></p><h1 id="续费"><a href="#续费" class="headerlink" title="续费"></a>续费</h1><h2 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h2><p><a href="https://hax.co.id/vps-renew/">网址</a>进去以后输入下hax的官网 hax.co.id 把下面那个框框勾上就行，然后通过人机验证，然后在点击Renew VPS按钮，这样就成功了，如果失败了，就刷新下网页重新来<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128181452788.png" alt="image-20220128181452788"></p><h2 id="自动"><a href="#自动" class="headerlink" title="自动"></a><a href="#%E8%87%AA%E5%8A%A8" title="自动"></a>自动</h2><p>此教程需要github账号且能顺利运行github actions</p><p>进入<a href="https://github.com/">github的网页</a>新建仓库<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128181736736.png" alt="image-20220128181736736"></p><p>如图所示<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128181908511.png" alt="image-20220128181908511"></p><p>点击actions按钮，在点击“configure”</p><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128182026747.png" alt="image-20220128182026747"></p><p>然后全选左边的代码，把这一串代码粘贴进去</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">name: 'Hax Auto Renew'</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  workflow_dispatch:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron: '0 13 */1 * *'</span><br><span class="line">jobs:</span><br><span class="line">  hax_renew:</span><br><span class="line">    runs-on: windows-2022</span><br><span class="line">    </span><br><span class="line">    steps:</span><br><span class="line">      - name: 'Renewing Hax VPS ....' </span><br><span class="line">        run: |</span><br><span class="line">          cmd /c curl -sSL -O https://github.com/CoiaPrant/Hax_extend/raw/main/HaxAutoReNew.exe</span><br><span class="line">          cmd /c HaxAutoReNew.exe -user "USERNAME" -password "PASSWORD"</span><br><span class="line"></span><br></pre></td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128182412863.png" alt="image-20220128182412863"></p><p>如上图，然后再点击actions按钮，依次点击<img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128182852967.png" alt="image-20220128182852967"></p><p>再点击all workflows按钮，这样就代表成功运行了，就静静等待，我也不知道能不能成功续期 <img src="https://cdn.jsdelivr.net/gh/imkcpblog/chuang@main/secondimage-20220128182953447.png" alt="image-20220128182953447"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hax这个网站提供了免费的ipv6 vps，还提供了免费的网络虚拟空间服务，本篇文章就来分享白嫖hax IPV6 vps的方法，和连接方法&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2022.01.29</title>
    <link href="https://g8d.xyz/2022/01/28/v2/"/>
    <id>https://g8d.xyz/2022/01/28/v2/</id>
    <published>2022-01-28T15:00:00.000Z</published>
    <updated>2022-01-28T15:41:06.391Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e44c4b398abc9fcdfed932c76a5cdb0de469c54ee7d999ae7e198fc0e6ee661e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码在TG群</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">该文章已加密, 请输入密码查看。</summary>
    
    
    
    
    <category term="v2ray" scheme="https://g8d.xyz/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>icarus个性化配置</title>
    <link href="https://g8d.xyz/2021/11/26/icarus/"/>
    <id>https://g8d.xyz/2021/11/26/icarus/</id>
    <published>2021-11-26T13:36:43.000Z</published>
    <updated>2021-11-27T10:01:23.425Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客所选取的主题是 <a href="https://github.com/AlphaLxy/hexo-theme-icarus">Icarus</a> ，并做了一些个性化的修改，很多修改都可以直观的看到。</p></blockquote><span id="more"></span><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a><a href="#%E5%B8%83%E5%B1%80" title="布局"></a>布局</h2><h3 id="文章页面两栏布局"><a href="#文章页面两栏布局" class="headerlink" title="文章页面两栏布局"></a><a href="#%E6%96%87%E7%AB%A0%E9%A1%B5%E9%9D%A2%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80" title="文章页面两栏布局"></a>文章页面两栏布局</h3><p>主题默认是双栏布局，在阅读文章时显得有些拥挤。可以通过配置的方式把所有文章变为两栏布局，在<code>_config.post.yml</code>把需要的<code>widget</code>显示在一边即可，可以参考<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/#%E5%B8%83%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">官方文档</a>。</p><p>但两栏整体宽度跟三栏不同，因此强制指定为三栏布局，并且修改相应的宽度，这样所有的页面侧边栏宽度保持一致。</p><figure class="highlight plaintext"><figcaption><span>layout/layout.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">             &lt;Head site=&#123;site&#125; config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br><span class="line">-            &lt;body class=&#123;`is-$&#123;columnCount&#125;-column`&#125;&gt;</span><br><span class="line">+            &lt;body class=&#123;`is-3-column`&#125;&gt;</span><br><span class="line">                 &lt;Navbar config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>layout/layout.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                                 &#x27;is-12&#x27;: columnCount === 1,</span><br><span class="line">-                                &#x27;is-8-tablet is-8-desktop is-8-widescreen&#x27;: columnCount === 2,</span><br><span class="line">+                                &#x27;is-8-tablet is-8-desktop is-9-widescreen&#x27;: columnCount === 2,</span><br><span class="line">                                 &#x27;is-8-tablet is-8-desktop is-6-widescreen&#x27;: columnCount === 3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>layout/common/widgets.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> function getColumnSizeClass(columnCount) &#123;</span><br><span class="line">     switch (columnCount) &#123;</span><br><span class="line">         case 2:</span><br><span class="line">-            return &#x27;is-4-tablet is-4-desktop is-4-widescreen&#x27;;</span><br><span class="line">+            return &#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;;</span><br><span class="line">         case 3:</span><br><span class="line">             return &#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>并优化在不同屏幕小大下的宽度</p><figure class="highlight plaintext"><figcaption><span>include/style/responsive.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> +widescreen()</span><br><span class="line">+    .is-3-column .container</span><br><span class="line">+        max-width: $widescreen - $gap</span><br><span class="line">+        width: $widescreen - $gap</span><br><span class="line">+</span><br><span class="line">     .is-1-column .container, .is-2-column .container</span><br><span class="line">         max-width: $desktop - 2 * $gap</span><br><span class="line">         width: $desktop - 2 * $gap</span><br><span class="line"></span><br><span class="line"> +fullhd()</span><br><span class="line">+    .is-3-column .container</span><br><span class="line">+        max-width: $fullhd - 2 * $gap</span><br><span class="line">+        width: $fullhd - 2 * $gap</span><br><span class="line">+</span><br><span class="line">     .is-2-column .container</span><br><span class="line">         max-width: $widescreen - 2 * $gap</span><br><span class="line">         width: $widescreen - 2 * $gap</span><br></pre></td></tr></table></figure><h3 id="优化文章标题布局"><a href="#优化文章标题布局" class="headerlink" title="优化文章标题布局"></a>优化文章标题布局</h3><p>标题移动到文章信息上方，增加更新时间，并增加了icon</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">diff: layout/common/article.jsx</span><br><span class="line">                 &lt;article class=&#123;`card-content article$&#123;&#x27;direction&#x27; in page ? &#x27; &#x27; + page.direction : &#x27;&#x27;&#125;`&#125; role=&quot;article&quot;&gt;</span><br><span class="line">                     &#123;/* Metadata */&#125;</span><br><span class="line">+                    &#123;/* Title */&#125;</span><br><span class="line">+                    &lt;h1 className=&quot;title is-size-3 is-size-4-mobile has-text-weight-normal&quot;&gt;</span><br><span class="line">+                        &#123;index ?</span><br><span class="line">+                            &lt;a className=&quot;has-link-black-ter&quot; href=&#123;url_for(page.link || page.path)&#125;&gt;</span><br><span class="line">+                                &lt;i className=&quot;fas fa-angle-double-right&quot;&gt;&lt;/i&gt;&#123;page.title&#125;</span><br><span class="line">+                            &lt;/a&gt; :</span><br><span class="line">+                            [&lt;i className=&quot;fas fa-angle-double-right&quot;&gt;&lt;/i&gt;, page.title]</span><br><span class="line">+                        &#125;</span><br><span class="line">+                    &lt;/h1&gt;</span><br><span class="line">                     &#123;page.layout !== &#x27;page&#x27; ? &lt;div class=&quot;article-meta is-size-7 is-uppercase level is-mobile&quot;&gt;</span><br><span class="line">                         &lt;div class=&quot;level-left&quot;&gt;</span><br><span class="line">                             &#123;/* Creation Date */&#125;</span><br><span class="line">-                            &#123;page.date &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML=&#123;&#123;</span><br><span class="line">-                                __html: _p(&#x27;article.created_at&#x27;, `&lt;time dateTime=&quot;$&#123;date_xml(page.date)&#125;&quot; title=&quot;$&#123;new Date(page.date).toLocaleString()&#125;&quot;&gt;$&#123;date(</span><br><span class="line">page.date)&#125;&lt;/time&gt;`)</span><br><span class="line">-                            &#125;&#125;&gt;&lt;/span&gt;&#125;</span><br><span class="line">+                            &#123;page.date &amp;&amp; &lt;span class=&quot;level-item&quot;&gt;</span><br><span class="line">+                                &lt;i className=&quot;far fa-calendar-alt&quot;&gt;&amp;nbsp;&lt;/i&gt;</span><br><span class="line">+                                &lt;time dateTime=&#123;date_xml(page.date)&#125; title=&#123;date_xml(page.date)&#125;&gt;&#123;date(page.date)&#125;&lt;/time&gt;</span><br><span class="line">+                            &lt;/span&gt;&#125;</span><br><span class="line">                             &#123;/* Last Update Date */&#125;</span><br><span class="line">-                            &#123;page.updated &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML=&#123;&#123;</span><br><span class="line">-                                __html: _p(&#x27;article.updated_at&#x27;, `&lt;time dateTime=&quot;$&#123;date_xml(page.updated)&#125;&quot; title=&quot;$&#123;new Date(page.updated).toLocaleString()&#125;&quot;&gt;$</span><br><span class="line">&#123;date(page.updated)&#125;&lt;/time&gt;`)</span><br><span class="line">-                            &#125;&#125;&gt;&lt;/span&gt;&#125;</span><br><span class="line">+                            &#123;shouldShowUpdated &amp;&amp; &lt;span class=&quot;level-item is-hidden-mobile&quot;&gt;</span><br><span class="line">+                                &lt;i class=&quot;far fa-calendar-check&quot;&gt;&amp;nbsp;&lt;/i&gt;</span><br><span class="line">+                                &lt;time dateTime=&#123;date_xml(page.updated)&#125; title=&#123;date_xml(page.updated)&#125;&gt;&#123;date(page.updated)&#125;&lt;/time&gt;</span><br><span class="line">+                            &lt;/span&gt;&#125;</span><br><span class="line">                             &#123;/* author */&#125;</span><br><span class="line">                             &#123;page.author ? &lt;span class=&quot;level-item&quot;&gt; &#123;page.author&#125; &lt;/span&gt; : null&#125;</span><br></pre></td></tr></table></figure><p>其中时间直接使用日期</p><figure class="highlight plaintext"><figcaption><span>source/js/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-    if (typeof moment === &#x27;function&#x27;) &#123;</span><br><span class="line">-        $(&#x27;.article-meta time&#x27;).each(function() &#123;</span><br><span class="line">-            $(this).text(moment($(this).attr(&#x27;datetime&#x27;)).fromNow());</span><br><span class="line">-        &#125;);</span><br><span class="line">-    &#125;</span><br></pre></td></tr></table></figure><h3 id="优化文章结尾布局"><a href="#优化文章结尾布局" class="headerlink" title="优化文章结尾布局"></a>优化文章结尾布局</h3><p>在文章结尾增加一个 hr，并修改 tags 展示。在预览时（主页）也显示 tags，并且将 Read More 按钮放置在右边。</p><figure class="highlight plaintext"><figcaption><span>layout/common/article.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">                     &#123;/* Licensing block */&#125;</span><br><span class="line">                     &#123;!index &amp;&amp; article &amp;&amp; article.licenses &amp;&amp; Object.keys(article.licenses)</span><br><span class="line">                         ? &lt;ArticleLicensing.Cacheable page=&#123;page&#125; config=&#123;config&#125; helper=&#123;helper&#125; /&gt; : null&#125;</span><br><span class="line">+                    &lt;hr style=&quot;height:1px;margin:1rem 0&quot;/&gt;</span><br><span class="line">+                    &lt;div className=&quot;level is-mobile is-flex&quot;&gt;</span><br><span class="line">                     &#123;/* Tags */&#125;</span><br><span class="line">-                    &#123;!index &amp;&amp; page.tags &amp;&amp; page.tags.length ? &lt;div class=&quot;article-tags is-size-7 mb-4&quot;&gt;</span><br><span class="line">-                        &lt;span class=&quot;mr-2&quot;&gt;#&lt;/span&gt;</span><br><span class="line">-                        &#123;page.tags.map(tag =&gt; &#123;</span><br><span class="line">-                            return &lt;a class=&quot;link-muted mr-2&quot; rel=&quot;tag&quot; href=&#123;url_for(tag.path)&#125;&gt;&#123;tag.name&#125;&lt;/a&gt;;</span><br><span class="line">+                    &#123;page.tags &amp;&amp; page.tags.length ? &lt;div class=&quot;article-tags is-size-7 is-uppercase&quot;&gt;</span><br><span class="line">+                        &lt;i class=&quot;fas fa-tags has-text-grey&quot;&gt;&lt;/i&gt;&amp;nbsp;</span><br><span class="line">+                        &#123;page.tags.map((tag, index) =&gt; &#123;</span><br><span class="line">+                            return &lt;a class=&quot;link-muted&quot; rel=&quot;tag&quot; href=&#123;url_for(tag.path)&#125;&gt;&#123;tag.name&#125;&#123;index !== page.tags.length-1? &#x27;, &#x27;:&#x27;&#x27;&#125;&lt;/a&gt;;</span><br><span class="line">                         &#125;)&#125;</span><br><span class="line">                     &lt;/div&gt; : null&#125;</span><br><span class="line">                     &#123;/* &quot;Read more&quot; button */&#125;</span><br><span class="line">-                    &#123;index &amp;&amp; page.excerpt ? &lt;a class=&quot;article-more button is-small is-size-7&quot; href=&#123;`$&#123;url_for(page.link || page.path)&#125;#more`&#125;&gt;&#123;__(&#x27;article.more&#x27;)&#125;&lt;/a&gt; : null&#125;</span><br><span class="line">+                    &#123;index &amp;&amp; page.excerpt ? &lt;a class=&quot;article-more button is-small is-size-7&quot; href=&#123;`$&#123;url_for(page.link || page.path)&#125;#more`&#125;&gt;&lt;i class=&quot;fas fa-book-reader has-text-grey&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&#123;__(&#x27;article.more&#x27;)&#125;&lt;/a&gt; : null&#125;</span><br><span class="line">+                    &lt;/div&gt;</span><br><span class="line">                     &#123;/* Share button */&#125;</span><br></pre></td></tr></table></figure><h3 id="优化个人信息布局"><a href="#优化个人信息布局" class="headerlink" title="优化个人信息布局"></a>优化个人信息布局</h3><p>减少头像大小，头像下方计数的地方增加链接，follow前增加icon。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff: layout/widget/profile.jsx</span><br><span class="line">-                    &lt;div class=&quot;level-item has-text-centered is-marginless&quot;&gt;</span><br><span class="line">+                    &lt;a class=&quot;level-item has-text-centered is-marginless&quot; href=&#123;counter.category.url&#125;&gt;</span><br><span class="line">                         &lt;div&gt;</span><br><span class="line">                             &lt;p class=&quot;heading&quot;&gt;&#123;counter.category.title&#125;&lt;/p&gt;</span><br><span class="line">-                            &lt;a href=&#123;counter.category.url&#125;&gt;</span><br><span class="line">+                            &lt;div&gt;</span><br><span class="line">                                 &lt;p class=&quot;title&quot;&gt;&#123;counter.category.count&#125;&lt;/p&gt;</span><br><span class="line">-                            &lt;/a&gt;</span><br><span class="line">+                            &lt;/div&gt;</span><br><span class="line">                         &lt;/div&gt;</span><br><span class="line">-                    &lt;/div&gt;</span><br><span class="line">+                    &lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="优化移动端显示"><a href="#优化移动端显示" class="headerlink" title="优化移动端显示"></a>优化移动端显示</h3><p>在移动端，隐藏 archive 和 tags。</p><figure class="highlight plaintext"><figcaption><span>source/js/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     &#125;</span><br><span class="line">+</span><br><span class="line">+    $(&#x27;div.container div.card[data-type=tags]&#x27;).addClass(&#x27;is-hidden-mobile&#x27;);</span><br><span class="line">+    $(&#x27;div.container div.card[data-type=archives]&#x27;).addClass(&#x27;is-hidden-mobile&#x27;);</span><br><span class="line"> &#125;(jQuery, window.moment, window.ClipboardJS, window.IcarusThemeSettings));</span><br></pre></td></tr></table></figure><h3 id="目录粘性定位"><a href="#目录粘性定位" class="headerlink" title="目录粘性定位"></a>目录粘性定位</h3><p>原来只支持侧边栏整体粘性定位，为了阅读体验，只针对目录开启粘性定位，增加 column-left is-sticky 类，并调整样式</p><figure class="highlight plaintext"><figcaption><span>source/js/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     if ($toc.length &gt; 0) &#123;</span><br><span class="line">+        $toc.addClass(&#x27;column-left is-sticky&#x27;);</span><br><span class="line">         const $mask = $(&#x27;&lt;div&gt;&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>include/style/widget.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+#toc</span><br><span class="line">+    max-height: calc(100vh - 22px)</span><br><span class="line">+    overflow-y: scroll</span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="增加默认缩略图"><a href="#增加默认缩略图" class="headerlink" title="增加默认缩略图"></a>增加默认缩略图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">diff: layout/layout.jsx</span><br><span class="line">         const &#123; site, config, page, helper, body &#125; = this.props;</span><br><span class="line"></span><br><span class="line">+        site.posts &amp;&amp; site.posts.filter(p =&gt; !p.thumbnail).forEach(p =&gt; p.thumbnail = &#x27;/img/thumbnail.svg&#x27;);</span><br><span class="line">+</span><br><span class="line">         const language = page.lang || page.language || config.language;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>layout/archive.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         const &#123; url_for, __, date_xml, date &#125; = helper;</span><br><span class="line"></span><br><span class="line">+        page.posts &amp;&amp; page.posts.filter(p =&gt; !p.thumbnail).forEach(p =&gt; p.thumbnail = &#x27;/img/thumbnail.svg&#x27;);</span><br><span class="line">+</span><br><span class="line">         const language = page.lang || page.language || config.language;</span><br></pre></td></tr></table></figure><h3 id="增加许可协议"><a href="#增加许可协议" class="headerlink" title="增加许可协议"></a>增加许可协议</h3><p>新版已经支持许可协议，直接配置即可，参考<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/#%E6%96%87%E7%AB%A0%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE">官方文档</a>。</p><h3 id="增加标题自动计数"><a href="#增加标题自动计数" class="headerlink" title="增加标题自动计数"></a>增加标题自动计数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">diff: include/style/article.styl</span><br><span class="line">+.article &#123;counter-reset:section&#125;</span><br><span class="line">+.article h2&#123;counter-reset:sub-section&#125;</span><br><span class="line">+.article h3&#123;counter-reset:composite&#125;</span><br><span class="line">+.article h4&#123;counter-reset:detail&#125;</span><br><span class="line">+.article h2:before&#123;content:counter(section) &quot; &quot;;counter-increment:section&#125;</span><br><span class="line">+.article h3:before&#123;content:counter(section) &quot;.&quot; counter(sub-section) &quot; &quot;;counter-increment:sub-section&#125;</span><br><span class="line">+.article h4:before&#123;content:counter(section) &quot;.&quot; counter(sub-section) &quot;.&quot; counter(composite) &quot; &quot;;counter-increment:composite&#125;</span><br></pre></td></tr></table></figure><h3 id="默认显示目录"><a href="#默认显示目录" class="headerlink" title="默认显示目录"></a>默认显示目录</h3><p>新版支持直接配置，在_config.yml增加toc: true即可。</p><h3 id="页面footer显示一组icon"><a href="#页面footer显示一组icon" class="headerlink" title="页面footer显示一组icon"></a>页面footer显示一组icon</h3><p>默认情况下一个icon对应一个链接，但例如 CC BY-NC-SA 4.0 需要四个图标一组。因此修改代码，使得配置 link.icon 可以是一个数组，效果可以参考页面底部。</p><figure class="highlight plaintext"><figcaption><span>layout/common/footer.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                                 const link = links[name];</span><br><span class="line">                                 return &lt;p class=&quot;control&quot;&gt;</span><br><span class="line">                                     &lt;a class=&#123;`button is-transparent $&#123;link.icon ? &#x27;is-large&#x27; : &#x27;&#x27;&#125;`&#125; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&#123;name&#125; href=&#123;link.url&#125;&gt;</span><br><span class="line">-                                        &#123;link.icon ? &lt;i class=&#123;link.icon&#125;&gt;&lt;/i&gt; : name&#125;</span><br><span class="line">+                                        &#123;link.icon ?</span><br><span class="line">+                                            (Array.isArray(link.icon) ?</span><br><span class="line">+                                                link.icon.map(i =&gt; [&lt;i className=&#123;i&#125;&gt;&lt;/i&gt;, &#x27;\u00A0&#x27;]) :</span><br><span class="line">+                                                &lt;i className=&#123;link.icon&#125;&gt;&lt;/i&gt;</span><br><span class="line">+                                        ) : name&#125;</span><br><span class="line">                                     &lt;/a&gt;</span><br><span class="line">                                 &lt;/p&gt;;</span><br><span class="line">                             &#125;)&#125;</span><br></pre></td></tr></table></figure><p>忽略校验的schema</p><figure class="highlight plaintext"><figcaption><span>include/schema/common/footer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-            &quot;$ref&quot;: &quot;/misc/poly_links.json&quot;,</span><br></pre></td></tr></table></figure><p><code>_config.yml</code> 中配置如下</p><figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">    links:</span><br><span class="line">        CC BY-NC-SA 4.0:</span><br><span class="line">            icon:</span><br><span class="line">              - fab fa-creative-commons</span><br><span class="line">              - fab fa-creative-commons-by</span><br><span class="line">              - fab fa-creative-commons-nc</span><br><span class="line">              - fab fa-creative-commons-sa</span><br><span class="line">            url: &#x27;https://creativecommons.org/licenses/by-nc-sa/4.0/&#x27;</span><br></pre></td></tr></table></figure><h3 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h3><p>参考valine官方的<a href="https://valine.js.org/quickstart.html">快速开始文档</a>，创建<code>LeanCloud</code>应用，修改<code>_config.icarus.yml</code>中<code>comment</code>的配置项，填入对应的<code>app_id</code>和<code>app_key</code>即可</p><figure class="highlight plaintext"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">    type: valine</span><br><span class="line">    app_id: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">    app_key: xxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">    placeholder: &quot;&quot;                 # 可选填</span><br><span class="line">    avatar: mm                      # 可选填</span><br><span class="line">    avatar_force: false             # 可选填</span><br><span class="line">    meta: [&quot;nick&quot;, &quot;mail&quot;, &quot;link&quot;]  # 可选填</span><br><span class="line">    page_size: 10                   # 可选填</span><br><span class="line">    lang: zh-CN                     # 可选填</span><br><span class="line">    visitor: false                  # 可选填</span><br><span class="line">    highlight: true                 # 可选填</span><br><span class="line">    record_ip: false                # 可选填</span><br><span class="line">    server_urls:                    # 可选填</span><br><span class="line">    emoji_cdn:                      # 可选填</span><br><span class="line">    emoji_maps:                     # 可选填</span><br><span class="line">    enable_qq: false                # 可选填</span><br><span class="line">    required_fields: []             # 可选填</span><br></pre></td></tr></table></figure><h3 id="给文章添加分享功能"><a href="#给文章添加分享功能" class="headerlink" title="给文章添加分享功能"></a>给文章添加分享功能</h3><p>直接在<code>_config.icarus.yml</code>中修改插件为<code>sharejs</code>即可</p><figure class="highlight plaintext"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Share plugin configurations</span><br><span class="line"># https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/</span><br><span class="line">share:</span><br><span class="line">    type: sharejs</span><br><span class="line">    # URL to the ShareThis share plugin script</span><br><span class="line">#    install_url: &#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="为博客添加nest动态线条特效"><a href="#为博客添加nest动态线条特效" class="headerlink" title="为博客添加nest动态线条特效"></a>为博客添加nest动态线条特效</h3><p>在<code>themes\icarus\layout\layout.jsx</code>的<code>body</code>中添加如下代码，CDN可根据自己使用的修改</p><figure class="highlight plaintext"><figcaption><span>themes\icarus\layout\layout.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; color=&quot;30,144,255&quot; opacity=&#x27;0.5&#x27; zIndex=&quot;-1&quot; count=&quot;150&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>除了通过CDN加载，也可以下载到本地使用，详见官方文档</p><h3 id="页脚添加网站运行时间"><a href="#页脚添加网站运行时间" class="headerlink" title="页脚添加网站运行时间"></a>页脚添加网站运行时间</h3><p>网上找到的都是<code>ejs</code>的写法，其实<code>jsx</code>的写法也很简单，只要把<code>js</code>的代码嵌入<code>jsx</code>中就可以了。在<code>themes\icarus\layout\common\head.jsx</code>中找到要添加运行时间的位置，比如在不蒜子前面添加，代码如下</p><figure class="highlight plaintext"><figcaption><span>themes\icarus\layout\common\head.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&quot;is-size-7&quot;&gt;</span><br><span class="line">&lt;span dangerouslySetInnerHTML=&#123;&#123; __html: `&amp;copy; $&#123;siteYear&#125; $&#123;author || siteTitle&#125;` &#125;&#125;&gt;&lt;/span&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;Powered by &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;&amp;nbsp;&amp;&amp;nbsp;</span><br><span class="line">&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Icarus&lt;/a&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">+&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">+&lt;script dangerouslySetInnerHTML=&#123;&#123;</span><br><span class="line">+__html: `</span><br><span class="line">+var now = new Date();</span><br><span class="line">+function createtime() &#123;</span><br><span class="line">+var grt= new Date(&quot;2/27/2020 16:23:00&quot;);//此处修改你的建站时间或者网站上线时间</span><br><span class="line">+now.setTime(now.getTime()+250);</span><br><span class="line">+days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">+hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">+if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">+mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">+seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">+snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">+document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;| 本站已运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">+document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">+&#125;</span><br><span class="line">+setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">+`,</span><br><span class="line">+&#125;&#125;</span><br><span class="line">+  /&gt;</span><br><span class="line">&#123;showVisitorCounter ? &lt;br /&gt; : null&#125;</span><br><span class="line">&#123;showVisitorCounter ? &lt;span id=&quot;busuanzi_container_site_uv&quot;</span><br><span class="line">dangerouslySetInnerHTML=&#123;&#123; __html: visitorCounterTitle &#125;&#125;&gt;&lt;/span&gt; : null&#125;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="修改页脚不蒜子，增加总访问量统计"><a href="#修改页脚不蒜子，增加总访问量统计" class="headerlink" title="修改页脚不蒜子，增加总访问量统计"></a>修改页脚不蒜子，增加总访问量统计</h3><p>在<code>render()</code>中添加变量<code>visitCountTitle</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">        const &#123;</span><br><span class="line">            logo,</span><br><span class="line">            logoUrl,</span><br><span class="line">            siteUrl,</span><br><span class="line">            siteTitle,</span><br><span class="line">            siteYear,</span><br><span class="line">            author,</span><br><span class="line">            links,</span><br><span class="line">            showVisitorCounter,</span><br><span class="line">            visitorCounterTitle,</span><br><span class="line">+           visitCounterTitle</span><br><span class="line">        &#125; = this.props;</span><br><span class="line">        ……</span><br><span class="line">        ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在原来不蒜子的位置新增总访问量统计的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&quot;is-size-7&quot;&gt;</span><br><span class="line">&lt;span dangerouslySetInnerHTML=&#123;&#123; __html: `&amp;copy; $&#123;siteYear&#125; $&#123;author || siteTitle&#125;` &#125;&#125;&gt;&lt;/span&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;Powered by &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;&amp;nbsp;&amp;&amp;nbsp;</span><br><span class="line">&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Icarus&lt;/a&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script dangerouslySetInnerHTML=&#123;&#123;</span><br><span class="line">        __html: `</span><br><span class="line">        var now = new Date();</span><br><span class="line">        function createtime() &#123;</span><br><span class="line">            var grt= new Date(&quot;2/27/2020 16:23:00&quot;);//此处修改你的建站时间或者网站上线时间</span><br><span class="line">            now.setTime(now.getTime()+250);</span><br><span class="line">            days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">            hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">            if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">            mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">            seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">            snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">            document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;| 本站已运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">            document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">        `,</span><br><span class="line">&#125;&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&#123;showVisitorCounter ? &lt;br /&gt; : null&#125;</span><br><span class="line">&#123;showVisitorCounter ? &lt;span id=&quot;busuanzi_container_site_uv&quot;</span><br><span class="line">dangerouslySetInnerHTML=&#123;&#123; __html: visitorCounterTitle &#125;&#125;&gt;&lt;/span&gt; : null&#125;</span><br><span class="line">+&#123;showVisitorCounter ? &lt;span&gt; | &lt;/span&gt; : null&#125;</span><br><span class="line">+&#123;showVisitorCounter ? &lt;span id=&quot;busuanzi_container_site_pv&quot;</span><br><span class="line">+dangerouslySetInnerHTML=&#123;&#123; __html: visitCounterTitle &#125;&#125;&gt;&lt;/span&gt; : null&#125;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>在<code>module.exports</code>中添加<code>visitCounterTitle</code>的返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">return &#123;</span><br><span class="line">logo,</span><br><span class="line">    logoUrl: url_for(logo),</span><br><span class="line">    siteUrl: url_for(&#x27;/&#x27;),</span><br><span class="line">    siteTitle: title,</span><br><span class="line">    siteYear: date(new Date(), &#x27;YYYY&#x27;),</span><br><span class="line">    author,</span><br><span class="line">    links,</span><br><span class="line">    showVisitorCounter: plugins &amp;&amp; plugins.busuanzi === true,</span><br><span class="line">    visitorCounterTitle: _p(&#x27;plugin.visitor_count&#x27;, &#x27;&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;0&lt;/span&gt;&#x27;),</span><br><span class="line">+    visitCounterTitle: _p(&#x27;plugin.visit_count_total&#x27;, &#x27;&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;0&lt;/span&gt;&#x27;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在\themes\icarus\languages\zh-CN.yml中的plugin添加visit_count_total字段</p><figure class="highlight plaintext"><figcaption><span>\themes\icarus\languages\zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugin:</span><br><span class="line">    backtotop: &#x27;回到顶端&#x27;</span><br><span class="line">    visit_count: &#x27;%s次访问&#x27;</span><br><span class="line">    visitor_count: &#x27;共%s个访客&#x27;</span><br><span class="line">+   visit_count_total: &#x27;总访问量%s&#x27;</span><br></pre></td></tr></table></figure><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="修改-logo-和-favicon"><a href="#修改-logo-和-favicon" class="headerlink" title="修改 logo 和 favicon"></a>修改 logo 和 favicon</h3><p>用 Python 设计 Logo，并微调样式。</p><h3 id="按钮背景颜色增加渐变"><a href="#按钮背景颜色增加渐变" class="headerlink" title="按钮背景颜色增加渐变"></a>按钮背景颜色增加渐变</h3><figure class="highlight plaintext"><figcaption><span>include/style/widget.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> .widget</span><br><span class="line">     .menu-list</span><br><span class="line">         li</span><br><span class="line">             ul</span><br><span class="line">                 margin-right: 0</span><br><span class="line">+        a</span><br><span class="line">+            transition: background-color 0.3s ease-in-out</span><br><span class="line">         .level</span><br><span class="line">             margin-bottom: 0</span><br></pre></td></tr></table></figure><h3 id="card-增加浮动效果"><a href="#card-增加浮动效果" class="headerlink" title="card 增加浮动效果"></a>card 增加浮动效果</h3><p><code>:hover</code> 时增大阴影，并增加动画属性 <code>ease-in-out</code>。</p><figure class="highlight plaintext"><figcaption><span>include/style/card.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> .card</span><br><span class="line">     overflow: visible</span><br><span class="line">     border-radius: $card-radius</span><br><span class="line">+    &amp;:hover</span><br><span class="line">+        box-shadow: 0 6px 15px rgba(0,0,0,0.15), 0 0 1px rgba(0,0,0,0.1)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>source/js/animation.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     setTimeout(() =&gt; &#123;</span><br><span class="line">         $(&#x27;body &gt; .navbar, body &gt; .section, body &gt; .footer&#x27;).forEach(element =&gt; &#123;</span><br><span class="line">             element.style.opacity = &#x27;1&#x27;;</span><br><span class="line">-            element.style.transition = &#x27;opacity 0.3s ease-out, transform 0.3s ease-out&#x27;;</span><br><span class="line">+            element.style.transition = &#x27;opacity 0.3s ease-out, transform 0.3s ease-out, box-shadow 0.3s ease-in-out&#x27;;</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>source/js/animation.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                     element.style.transform = &#x27;&#x27;;</span><br><span class="line">-                    element.style.transition = &#x27;opacity 0.3s ease-out, transform 0.3s ease-out&#x27;;</span><br><span class="line">+                    element.style.transition = &#x27;opacity 0.3s ease-out, transform 0.3s ease-out, box-shadow 0.3s ease-in-out&#x27;;</span><br><span class="line">                 &#125;, i * 100);</span><br></pre></td></tr></table></figure><h3 id="修改tag的颜色"><a href="#修改tag的颜色" class="headerlink" title="修改tag的颜色"></a>修改tag的颜色</h3><figure class="highlight plaintext"><figcaption><span>include/style/widget.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">     .tags</span><br><span class="line">         .tag:first-child</span><br><span class="line">-            background: $primary</span><br><span class="line">-            color: $primary-invert</span><br><span class="line">+            background: whitesmoke</span><br><span class="line">+            color: #4a4a4a</span><br><span class="line"></span><br><span class="line">         .tag:last-child</span><br><span class="line">-            background: $light-grey</span><br><span class="line">+            background: #e7e7e7</span><br><span class="line">             color: $white-invert</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><code>2020-12-04</code> 基于 4.1.1 版本重新改动。<br><code>2021-09-06</code> 合并 4.4.0，官方也支持文章 licenses配置多个图标，不过目前还是自己实现的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里只列举了部分改动，详细的差异可以查看 <a href="https://github.com/ppoffice/hexo-theme-icarus/compare/4.4.0...AlphaLxy:master">diff</a>。</p><p>本文会持续更新，保持跟最新的博客效果一致，希望能给你自定义主题一些帮助。</p><p>如果有其他想法或者意见，可以在下方留言。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客所选取的主题是 &lt;a href=&quot;https://github.com/AlphaLxy/hexo-theme-icarus&quot;&gt;Icarus&lt;/a&gt; ，并做了一些个性化的修改，很多修改都可以直观的看到。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>打字机效果:Typed.js</title>
    <link href="https://g8d.xyz/2021/11/26/Typed/"/>
    <id>https://g8d.xyz/2021/11/26/Typed/</id>
    <published>2021-11-26T12:29:59.000Z</published>
    <updated>2021-11-26T12:40:07.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Type.js是一个轻量级的插件, 用于实现页面文字的打字机效果. 它使用起来非常简单, 只需要几行代码就能实现高大上的打字机效果. </p></blockquote><span id="more"></span><h1 id="一-使用Type-js"><a href="#一-使用Type-js" class="headerlink" title="一.使用Type.js"></a><strong>一.使用Type.js</strong></h1><h2 id="1-引入Type-js"><a href="#1-引入Type-js" class="headerlink" title="1. 引入Type.js"></a>1. 引入Type.js</h2><ul><li>方法1: ES6模块化引入官方推荐<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> //npm下载</span><br><span class="line">npm install typed.js</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在js文件中用模块的方式引入</span><br><span class="line">import Typed from &#x27;typed.js&#x27;;</span><br></pre></td></tr></table></figure>采用该方法导入type.js需要使用Babel, 否则浏览器不能识别ES6的语法. 如果只是练手, 推荐使用下面的方法.</li><li>方法2: 常规导入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  //script标签导入</span><br><span class="line">&lt;script src=&quot;./typed.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//cdn导入</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/typed.js/2.0.5/typed.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-实例化对象"><a href="#2-实例化对象" class="headerlink" title="2. 实例化对象"></a>2. 实例化对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;element&quot;&gt;&lt;/span&gt; //目标容器</span><br></pre></td></tr></table></figure>如果想加入鼠标闪烁效果, 引入一下样式 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .typed-cursor&#123; opacity: 1; -webkit-animation: blink 0.7s infinite; -moz-animation: blink 0.7s infinite; animation: blink 0.7s infinite; &#125; @keyframes blink&#123; 0% &#123; opacity:1; &#125; 50% &#123; opacity:0; &#125; 100% &#123; opacity:1; &#125; &#125; @-webkit-keyframes blink&#123; 0% &#123; opacity:1; &#125; 50% &#123; opacity:0; &#125; 100% &#123; opacity:1; &#125; &#125; @-moz-keyframes blink&#123; 0% &#123; opacity:1; &#125; 50% &#123; opacity:0; &#125; 100% &#123; opacity:1; &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="3-效果演示"><a href="#3-效果演示" class="headerlink" title="3. 效果演示"></a>3. 效果演示</h2><img src="https://anjingblog.com/zb_users/upload/2020/07/typed%E6%BC%94%E7%A4%BA.webp"/></li></ul><h1 id="二-其他配置参数"><a href="#二-其他配置参数" class="headerlink" title="二.其他配置参数"></a><em><strong>二.其他配置参数</strong></em></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">var typed = new Typed(&quot;.element&quot;, &#123;</span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;array&#125; strings strings to be typed</span><br><span class="line">   * @property &#123;string&#125; stringsElement ID of element containing string children</span><br><span class="line">   */</span><br><span class="line">  strings: [&#x27;These are the default values...&#x27;, &#x27;You know what you should do?&#x27;, &#x27;Use your own!&#x27;, &#x27;Have a great day!&#x27;],</span><br><span class="line">  stringsElement: null,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;number&#125; typeSpeed type speed in milliseconds</span><br><span class="line">   */</span><br><span class="line">  typeSpeed: 0,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;number&#125; startDelay time before typing starts in milliseconds</span><br><span class="line">   */</span><br><span class="line">  startDelay: 0,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;number&#125; backSpeed backspacing speed in milliseconds</span><br><span class="line">   */</span><br><span class="line">  backSpeed: 0,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;boolean&#125; smartBackspace only backspace what doesn&#x27;t match the previous string</span><br><span class="line">   */</span><br><span class="line">  smartBackspace: true,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;boolean&#125; shuffle shuffle the strings</span><br><span class="line">   */</span><br><span class="line">  shuffle: false,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;number&#125; backDelay time before backspacing in milliseconds</span><br><span class="line">   */</span><br><span class="line">  backDelay: 700,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;boolean&#125; fadeOut Fade out instead of backspace</span><br><span class="line">   * @property &#123;string&#125; fadeOutClass css class for fade animation</span><br><span class="line">   * @property &#123;boolean&#125; fadeOutDelay Fade out delay in milliseconds</span><br><span class="line">   */</span><br><span class="line">  fadeOut: false,</span><br><span class="line">  fadeOutClass: &#x27;typed-fade-out&#x27;,</span><br><span class="line">  fadeOutDelay: 500,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;boolean&#125; loop loop strings</span><br><span class="line">   * @property &#123;number&#125; loopCount amount of loops</span><br><span class="line">   */</span><br><span class="line">  loop: false,</span><br><span class="line">  loopCount: Infinity,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;boolean&#125; showCursor show cursor</span><br><span class="line">   * @property &#123;string&#125; cursorChar character for cursor</span><br><span class="line">   * @property &#123;boolean&#125; autoInsertCss insert CSS for cursor and fadeOut into HTML &lt;head&gt;</span><br><span class="line">   */</span><br><span class="line">  showCursor: true,</span><br><span class="line">  cursorChar: &#x27;|&#x27;,</span><br><span class="line">  autoInsertCss: true,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;string&#125; attr attribute for typing</span><br><span class="line">   * Ex: input placeholder, value, or just HTML text</span><br><span class="line">   */</span><br><span class="line">  attr: null,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;boolean&#125; bindInputFocusEvents bind to focus and blur if el is text input</span><br><span class="line">   */</span><br><span class="line">  bindInputFocusEvents: false,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @property &#123;string&#125; contentType &#x27;html&#x27; or &#x27;null&#x27; for plaintext</span><br><span class="line">   */</span><br><span class="line">  contentType: &#x27;html&#x27;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * All typing is complete</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onComplete: (self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * Before each string is typed</span><br><span class="line">   * @param &#123;number&#125; arrayPos</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  preStringTyped: (arrayPos, self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * After each string is typed</span><br><span class="line">   * @param &#123;number&#125; arrayPos</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onStringTyped: (arrayPos, self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * During looping, after last string is typed</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onLastStringBackspaced: (self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * Typing has been stopped</span><br><span class="line">   * @param &#123;number&#125; arrayPos</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onTypingPaused: (arrayPos, self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * Typing has been started after being stopped</span><br><span class="line">   * @param &#123;number&#125; arrayPos</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onTypingResumed: (arrayPos, self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * After reset</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onReset: (self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * After stop</span><br><span class="line">   * @param &#123;number&#125; arrayPos</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onStop: (arrayPos, self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * After start</span><br><span class="line">   * @param &#123;number&#125; arrayPos</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onStart: (arrayPos, self) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * After destroy</span><br><span class="line">   * @param &#123;Typed&#125; self</span><br><span class="line">   */</span><br><span class="line">  onDestroy: (self) =&gt; &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="【参考资料】"><a href="#【参考资料】" class="headerlink" title="【参考资料】"></a>【参考资料】</h2><p>Type.js官网: <a href="http://www.mattboldt.com/demos/typed-js/">http://www.mattboldt.com/demos/typed-js/</a><br>Github文档地址:<a href="https://github.com/mattboldt/typed.js/">https://github.com/mattboldt/typed.js/</a><br>CDN地址:<a href="http://www.bootcdn.cn/typed.js/">http://www.bootcdn.cn/typed.js/</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Type.js是一个轻量级的插件, 用于实现页面文字的打字机效果. 它使用起来非常简单, 只需要几行代码就能实现高大上的打字机效果. &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Cloudflare Worker 无服务器追查 Git 仓库代码泄露</title>
    <link href="https://g8d.xyz/2021/11/24/Cloudflare-Worker-%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%BD%E6%9F%A5-Git-%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    <id>https://g8d.xyz/2021/11/24/Cloudflare-Worker-%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%BD%E6%9F%A5-Git-%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E6%B3%84%E9%9C%B2/</id>
    <published>2021-11-24T14:45:45.000Z</published>
    <updated>2021-11-26T15:39:30.002Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大部分 Git 平台，如 Github、Gitlab 等，会在打开仓库时自动渲染 README.md，而我们利用这一特性，通过对 README.md 中的图片访问日志加以记录，可以实现追查代码泄露的目的。</p></blockquote><span id="more"></span><p>如果你还没有 Cloudflare 账号，<a href="https://dash.cloudflare.com/sign-up">可以申请一个</a>。<br>登录 Cloudflare 后，进入 Workers 页面，点击 KV。<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-1.png"><br>添加一个 Cloudflare KV，起名 ref，用于记录访问记录。<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-2.png"><br>创建 Cloudflare Worker，起名 img，用于记录请求信息，并转发图片资源请求。<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-3.png"><br>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&#x27;fetch&#x27;, (event) =&gt; &#123;</span><br><span class="line">  event.respondWith(handleRequest(event.request));</span><br><span class="line">&#125;);</span><br><span class="line">async function handleRequest(request) &#123;</span><br><span class="line">  let response;</span><br><span class="line">  if (request.url.slice(-4).toLowerCase() === &#x27;.png&#x27;) &#123;</span><br><span class="line">    const ref = request.headers.get(&#x27;referer&#x27;);</span><br><span class="line">    if (ref) &#123;</span><br><span class="line">      const time = new Date().toLocaleString(&#x27;zh-CN&#x27;, &#123; timeZone: &#x27;Asia/Shanghai&#x27; &#125;);</span><br><span class="line">      const ip = request.headers.get(&#x27;CF-Connecting-IP&#x27;);</span><br><span class="line">      const ua = request.headers.get(&#x27;User-Agent&#x27;);</span><br><span class="line">      const key = `Referer: $&#123;ref&#125;`;</span><br><span class="line">      const val = `时间: $&#123;time&#125;\nIP: $&#123;ip&#125;\nUA: $&#123;ua&#125;`;</span><br><span class="line">      await REF.put(key, val, &#123; expirationTtl: 60 * 60 * 24 * 365 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const redirect = new Request(&#x27;https://cdn.jsdelivr.net/gh/imaegoo/image/1x1_ffffff00.png&#x27;);</span><br><span class="line">    response = await fetch(redirect);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    response = new Response(&#x27;not found&#x27;, &#123; status: 404 &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 KV ref 的命名空间绑定到 Worker img。<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-4.png"><br>在仓库的 <code>README.md</code> 中插入图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://img.imaegoo.workers.dev/image.png)</span><br></pre></td></tr></table></figure><p>到 KV ref 中查看效果<br><img src="https://www.imaegoo.com//gallery/2021/git-tracking-image-5.png"><br><img src="https://img.imaegoo.workers.dev/image.png"><br>利用同样的思路和方法，我们还可以追查网站文章未经授权的转载，试试看！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;大部分 Git 平台，如 Github、Gitlab 等，会在打开仓库时自动渲染 README.md，而我们利用这一特性，通过对 README.md 中的图片访问日志加以记录，可以实现追查代码泄露的目的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>Markdown编辑器Editor.md集成使用教程</title>
    <link href="https://g8d.xyz/2021/11/21/Markdown-Editor/"/>
    <id>https://g8d.xyz/2021/11/21/Markdown-Editor/</id>
    <published>2021-11-21T10:24:21.000Z</published>
    <updated>2021-11-26T15:39:56.199Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>typecho同款编辑器带ui界面小白易上手</p></blockquote><span id="more"></span><img src="https://cdn.jsdelivr.net/gh/ruiliijdhdhdh/photo@latest//img/202111212009163.png"/><h1 id="一、下载插件"><a href="#一、下载插件" class="headerlink" title="一、下载插件"></a><strong>一、下载插件</strong></h1><p> 项目地址：<a href="http://pandao.github.io/editor.md/">http://pandao.github.io/editor.md/</a></p><h1 id="二、引用插件"><a href="#二、引用插件" class="headerlink" title="二、引用插件"></a><strong>二、引用插件</strong></h1><p> 下载安装包后放在相应的目录中并引用；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;lib/js/editor.md-master/css/editormd.css&quot; /&gt;</span><br><span class="line">//依赖jquery</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;lib/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;lib/js/editor.md-master/editormd.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">//需要这三个文件，自己对应好目录哦</span><br></pre></td></tr></table></figure><h1 id="三、在自己的页面中加上对应的id"><a href="#三、在自己的页面中加上对应的id" class="headerlink" title="三、在自己的页面中加上对应的id"></a><strong>三、在自己的页面中加上对应的id</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btns&quot;&gt;</span><br><span class="line">         &lt;button id=&quot;goto-line-btn&quot;&gt;Goto line 90&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;show-btn&quot;&gt;Show editor&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;hide-btn&quot;&gt;Hide editor&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;get-md-btn&quot;&gt;Get Markdown&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;get-html-btn&quot;&gt;Get HTML&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;watch-btn&quot;&gt;Watch&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;unwatch-btn&quot;&gt;Unwatch&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;preview-btn&quot;&gt;Preview HTML (Press Shift + ESC cancel)&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;fullscreen-btn&quot;&gt;Fullscreen (Press ESC cancel)&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;show-toolbar-btn&quot;&gt;Show toolbar&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;close-toolbar-btn&quot;&gt;Hide toolbar&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;toc-menu-btn&quot;&gt;ToC Dropdown menu&lt;/button&gt;</span><br><span class="line">         &lt;button id=&quot;toc-default-btn&quot;&gt;ToC default&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div id=&quot;layout&quot; class=&quot;editor&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;test-editormd&quot;&gt;</span><br><span class="line">      &lt;textarea&gt;&lt;/textarea&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="四、js代码"><a href="#四、js代码" class="headerlink" title="四、js代码"></a><strong>四、js代码</strong></h1><p>主要就是说这个就是代码，记得make一下！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> var testEditor;</span><br><span class="line">    testEditor = editormd(&quot;test-editormd&quot;, &#123;</span><br><span class="line">            path : &quot;/static/plugins/editor-md/lib/&quot;,</span><br><span class="line">            width: &quot;60%&quot;,     //宽度</span><br><span class="line">            height: &quot;400px&quot;,  //高</span><br><span class="line">            theme: &quot;dark&quot;,//工具栏主题</span><br><span class="line">            previewTheme: &quot;dark&quot;,//预览主题</span><br><span class="line">            editorTheme: &quot;pastel-on-dark&quot;,//编辑主题</span><br><span class="line">            markdown: &quot;&quot;,</span><br><span class="line"></span><br><span class="line">            placeholder:&#x27;Markdown编辑，左边编写，右边预览&#x27;,  //默认显示的文字，这里就不解释了</span><br><span class="line">            watch : false,                // 关闭实时预览</span><br><span class="line">            syncScrolling: &quot;single&quot;,  </span><br><span class="line">            codeFold: true,</span><br><span class="line">            //toolbar  : false,             //关闭工具栏</span><br><span class="line">            //previewCodeHighlight : false, // 关闭预览 HTML 的代码块高亮，默认开启</span><br><span class="line">            </span><br><span class="line">            saveHTMLToTextarea: true,       // 保存 HTML 到 Textarea</span><br><span class="line">            searchReplace: true,</span><br><span class="line">            htmlDecode: &quot;style,script,iframe|on*&quot;,   // 开启 HTML 标签解析，为了安全性，默认不开启 </span><br><span class="line">            emoji: true,</span><br><span class="line">    taskList: true,</span><br><span class="line">    tocm: true,                // Using [TOCM]</span><br><span class="line">    tex: true,                   // 开启科学公式TeX语言支持，默认关闭</span><br><span class="line">    flowChart: true,             // 开启流程图支持，默认关闭</span><br><span class="line">    sequenceDiagram: true,       // 开启时序/序列图支持，默认关闭,</span><br><span class="line">           /*</span><br><span class="line">            &#123;</span><br><span class="line">                success : 0 | 1, //0表示上传失败;1表示上传成功</span><br><span class="line">                message : &quot;提示的信息&quot;,</span><br><span class="line">                url     : &quot;图片地址&quot; //上传成功时才返回</span><br><span class="line">            &#125;</span><br><span class="line">            */</span><br><span class="line">            imageUpload: true,</span><br><span class="line">    imageFormats: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;webp&quot;],</span><br><span class="line">    imageUploadURL: &quot;/Center/RichTextUpload&quot;,</span><br><span class="line"></span><br><span class="line">            //dialogLockScreen : false,   // 设置弹出层对话框不锁屏，全局通用，默认为true</span><br><span class="line">            //dialogShowMask : false,     // 设置弹出层对话框显示透明遮罩层，全局通用，默认为true</span><br><span class="line">    //dialogDraggable : false,    // 设置弹出层对话框不可拖动，全局通用，默认为true</span><br><span class="line">    //dialogMaskOpacity : 0.4,    // 设置透明遮罩层的透明度，全局通用，默认值为0.1</span><br><span class="line">    //dialogMaskBgColor : &quot;#000&quot;, // 设置透明遮罩层的背景颜色，全局通用，默认为#fff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         toolbarAutoFixed:true,//工具栏自动固定定位的开启与禁用</span><br><span class="line">         // toolbarIcons : function() &#123;  //自定义工具栏，后面有详细介绍</span><br><span class="line">         //     return laofaneditormd.toolbarModes[&#x27;simple&#x27;]; // full, simple, mini</span><br><span class="line">         // &#125;,</span><br><span class="line"></span><br><span class="line">onload: function () &#123;</span><br><span class="line">//console.log(&#x27;onload&#x27;, this);</span><br><span class="line">//this.fullscreen();</span><br><span class="line">//this.unwatch();</span><br><span class="line">//this.watch().fullscreen();</span><br><span class="line">//this.setMarkdown(&quot;#PHP&quot;);</span><br><span class="line">//this.width(&quot;100%&quot;);</span><br><span class="line">//this.height(480);</span><br><span class="line">//this.resize(&quot;100%&quot;, 640);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>//上面的挑有用的写上去就行</p><p>综上所述一个编辑器就诞生了，下面有几个小知识点，大家看一下，或许用得上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//跳转到行</span><br><span class="line"> $(&quot;#goto-line-btn&quot;).bind(&quot;click&quot;, function()&#123;</span><br><span class="line">     laofaneditormd.gotoLine(5);</span><br><span class="line"> &#125;);</span><br><span class="line"> //显示编辑器</span><br><span class="line"> $(&quot;#show-btn&quot;).bind(&#x27;click&#x27;, function()&#123;</span><br><span class="line">     laofaneditormd.show();</span><br><span class="line"> &#125;);</span><br><span class="line"> //隐藏编辑器</span><br><span class="line"> $(&quot;#hide-btn&quot;).bind(&#x27;click&#x27;, function()&#123;</span><br><span class="line">     laofaneditormd.hide();</span><br><span class="line"> &#125;);</span><br><span class="line"> //获取md</span><br><span class="line"> $(&quot;#get-md-btn&quot;).bind(&#x27;click&#x27;, function()&#123;</span><br><span class="line">     alert(laofaneditormd.getMarkdown());</span><br><span class="line"> &#125;);</span><br><span class="line"> //获取html</span><br><span class="line"> $(&quot;#get-html-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     alert(laofaneditormd.getHTML());</span><br><span class="line"> &#125;);                </span><br><span class="line"> //打开右侧实时预览</span><br><span class="line"> $(&quot;#watch-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.watch();</span><br><span class="line"> &#125;);                 </span><br><span class="line"> //关闭右侧实时预览</span><br><span class="line"> $(&quot;#unwatch-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.unwatch();</span><br><span class="line"> &#125;);              </span><br><span class="line"> //预览结果</span><br><span class="line"> $(&quot;#preview-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.previewing();</span><br><span class="line"> &#125;);</span><br><span class="line"> //全屏</span><br><span class="line"> $(&quot;#fullscreen-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.fullscreen();</span><br><span class="line"> &#125;);</span><br><span class="line"> //显示工具栏</span><br><span class="line"> $(&quot;#show-toolbar-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.showToolbar();</span><br><span class="line"> &#125;);</span><br><span class="line"> //关闭工具栏</span><br><span class="line"> $(&quot;#close-toolbar-btn&quot;).bind(&#x27;click&#x27;, function() &#123;</span><br><span class="line">     laofaneditormd.hideToolbar();</span><br><span class="line"> &#125;);</span><br><span class="line"> //打开目录</span><br><span class="line"> $(&quot;#toc-menu-btn&quot;).click(function()&#123;</span><br><span class="line">     laofaneditormd.config(&#123;</span><br><span class="line">         tocDropdown   : true,</span><br><span class="line">         tocTitle      : &quot;目录 Table of Contents&quot;,</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"> //默认目录</span><br><span class="line"> $(&quot;#toc-default-btn&quot;).click(function() &#123;</span><br><span class="line">     laofaneditormd.config(&quot;tocDropdown&quot;, false);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h1 id="五、页面展示Markdown文档"><a href="#五、页面展示Markdown文档" class="headerlink" title="五、页面展示Markdown文档"></a><strong>五、页面展示Markdown文档</strong></h1><p>后台给我们的文档，我们要展示成转换后的样子不能一大堆符号摆在页面上是吧，也不好看呀，所以下面放上展示代码需要的东西。</p><p>1、首先引入必要JS（下面不是所有的都必要）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> &lt;link rel=&quot;stylesheet&quot; href=&quot;lib/js/editor.md-master/css/editormd.css&quot; /&gt;</span><br><span class="line">   &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://pandao.github.io/editor.md/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/jquery.min.js&quot;&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/marked.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/prettify.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/raphael.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/underscore.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/sequence-diagram.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/lib/flowchart.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;lib/js/editor.md-master/editormd.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   //具体目录在你下载的文件里都能找到，对号入座</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2、页面的div</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;layout&quot;  class=&quot;editor&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;test-editormd&quot; &gt;</span><br><span class="line">        &lt;textarea&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">3、js代码</span><br><span class="line"></span><br><span class="line">testEditor = editormd.markdownToHTML(&quot;test-editormd&quot;, &#123;</span><br><span class="line">      markdown:$scope.apidetails.content,</span><br><span class="line">      htmlDecode      : &quot;style,script,iframe&quot;,  // you can filter tags decode</span><br><span class="line">      emoji           : true,</span><br><span class="line">      taskList        : true,</span><br><span class="line">      tex             : true,  // 默认不解析</span><br><span class="line">      flowChart       : true,  // 默认不解析</span><br><span class="line">      sequenceDiagram : true,  // 默认不解析</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、自定义工具栏"><a href="#六、自定义工具栏" class="headerlink" title="六、自定义工具栏"></a><strong>六、自定义工具栏</strong></h1><p>工具栏分为三组：full、simple、mini 这三个，可以选择，如果想更加自由选你所需，就可以用下面的代码，也可以看看官网的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">toolbarIcons : function() &#123;</span><br><span class="line">   // Or return editormd.toolbarModes[name]; // full, simple, mini</span><br><span class="line">   // Using &quot;||&quot; set icons align right.</span><br><span class="line">   return [&quot;undo&quot;, &quot;redo&quot;, &quot;|&quot;, &quot;bold&quot;, &quot;hr&quot;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>具体每一个标签代表的什么含义可以对照整个工具栏自己对一下，下面是它的源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t.toolbarModes=&#123;</span><br><span class="line">    full:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;bold&quot;,&quot;del&quot;,&quot;italic&quot;,&quot;quote&quot;,&quot;ucwords&quot;,&quot;uppercase&quot;,&quot;lowercase&quot;,&quot;|&quot;,&quot;h1&quot;,&quot;h2&quot;,&quot;h3&quot;,&quot;h4&quot;,&quot;h5&quot;,&quot;h6&quot;,&quot;|&quot;,&quot;list-ul&quot;,&quot;list-ol&quot;,&quot;hr&quot;,&quot;|&quot;,&quot;link&quot;,&quot;reference-link&quot;,&quot;image&quot;,&quot;code&quot;,&quot;preformatted-text&quot;,&quot;code-block&quot;,&quot;table&quot;,&quot;datetime&quot;,&quot;emoji&quot;,&quot;html-entities&quot;,&quot;pagebreak&quot;,&quot;|&quot;,&quot;goto-line&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;fullscreen&quot;,&quot;clear&quot;,&quot;search&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;],</span><br><span class="line">    simple:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;bold&quot;,&quot;del&quot;,&quot;italic&quot;,&quot;quote&quot;,&quot;uppercase&quot;,&quot;lowercase&quot;,&quot;|&quot;,&quot;h1&quot;,&quot;h2&quot;,&quot;h3&quot;,&quot;h4&quot;,&quot;h5&quot;,&quot;h6&quot;,&quot;|&quot;,&quot;list-ul&quot;,&quot;list-ol&quot;,&quot;hr&quot;,&quot;|&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;fullscreen&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;],</span><br><span class="line">    mini:[&quot;undo&quot;,&quot;redo&quot;,&quot;|&quot;,&quot;watch&quot;,&quot;preview&quot;,&quot;|&quot;,&quot;help&quot;,&quot;info&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;typecho同款编辑器带ui界面小白易上手&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://g8d.xyz/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown折叠语法</title>
    <link href="https://g8d.xyz/2021/11/21/MarkDown%E6%8A%98%E5%8F%A0%E8%AF%AD%E6%B3%95/"/>
    <id>https://g8d.xyz/2021/11/21/MarkDown%E6%8A%98%E5%8F%A0%E8%AF%AD%E6%B3%95/</id>
    <published>2021-11-21T10:19:25.000Z</published>
    <updated>2021-11-26T15:46:10.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当我们在文章中写太多内容时，进行适当的内容折叠是非常有必要的。</p></blockquote><span id="more"></span><img src="https://cdn.jsdelivr.net/gh/ruiliijdhdhdh/photo@latest//img/202111212010919.png"/>MarkDown折叠语法是：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;Title&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">content!!!</span><br><span class="line">&lt;/details&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例1：</span><br><span class="line"></span><br><span class="line">注意：summary标签与正文间一定要空一行！</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;CLICK ME&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">**&lt;summary&gt;标签与正文间一定要空一行！！！**</span><br><span class="line">content!!!</span><br><span class="line">&lt;/details&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例2：</span><br><span class="line"></span><br><span class="line">在Github中写太多内容时，进行代码块内容折叠的代码如下：</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;展开查看&lt;/summary&gt;</span><br><span class="line">&lt;pre&gt;&lt;code&gt;</span><br><span class="line">System.out.println(&quot;Hello to see U!&quot;)</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>示例2：<p>在Github中写太多内容时，进行代码块内容折叠的代码如下：</p><details><summary>展开查看</summary><pre><code>System.out.println("Hello to see U!")</code></pre></details><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>可能不同的平台不同的编辑器，MarkDown折叠语法可能在使用上还是略有些区别，甚至是编辑器的限制，不让使用此语法，就会出现“MarkDown折叠语法”不生效，没有效果的问题。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;当我们在文章中写太多内容时，进行适当的内容折叠是非常有必要的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://g8d.xyz/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>下载GitHub上单个文件(夹)</title>
    <link href="https://g8d.xyz/2021/11/20/downgit/"/>
    <id>https://g8d.xyz/2021/11/20/downgit/</id>
    <published>2021-11-20T07:28:48.000Z</published>
    <updated>2021-11-26T15:41:26.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>偷节点的时候总是会有之前失效节点，使用这个工具开源下载单个文件夹</p></blockquote><span id="more"></span><h3 id="方法一：SVN-下载单个文件夹"><a href="#方法一：SVN-下载单个文件夹" class="headerlink" title="方法一：SVN-下载单个文件夹"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9ASVN-%E4%B8%8B%E8%BD%BD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9" title="方法一：SVN-下载单个文件夹"></a>方法一：SVN-下载单个文件夹</h3><blockquote><p>个人最适应的方法，缺点是需要借助第三方工具-svn</p><p>环境：Windows 10</p></blockquote><p>​ 若想要下载<code>&#123;username&#125;</code>的<code>&#123;repo&#125;</code>里的<code>&#123;dir&#125;</code>文件夹，</p><ol><li>主分支master（现在似乎默认是main了，区别不大）：<ul><li>其浏览器路径应为<code>https://github.com/&#123;username&#125;/&#123;repo&#125;/tree/master/&#123;dir&#125;</code></li><li>修改<code>/tree/master/</code>为<code>/trunk/</code></li><li>打开<code>cmd</code>，输入指令：<code>svn checkout https://github.com/&#123;username&#125;/&#123;repo&#125;/trunk/&#123;dir&#125;</code></li><li>该<code>&#123;dir&#125;</code>将被下载至当前目录下  <img src="/medias/loading.gif" alt="示例">  <strong>示例</strong></li></ul></li><li>特定分支<ul><li>  将<code>/trunk/</code>换成<code>/branches/&#123;branch_name&#125;</code>即可</li></ul></li></ol><h3 id="方法二：高版本-Git"><a href="#方法二：高版本-Git" class="headerlink" title="方法二：高版本 Git"></a><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E9%AB%98%E7%89%88%E6%9C%AC-Git" title="方法二：高版本 Git"></a>方法二：高版本 Git</h3><blockquote><p>这个方法较为繁琐，但无需像前者一样借助其它工具</p></blockquote><p>方法：Git 的<code>Sparse Checkout</code>模式，指定文件/文件夹</p><ol><li>创建空的本地仓库，并将远程 <code>Git Server URL</code> 加入到 <code>Git Config</code>里 none <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir project_folder</span><br><span class="line">cd project_folder</span><br><span class="line">git init</span><br><span class="line">git remote add -f origin &lt;repo-url&gt;</span><br></pre></td></tr></table></figure></li><li>在 <code>Config</code> 中设置允许使用<code>Sparse Checkout</code>模式 none <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.sparsecheckout true</span><br></pre></td></tr></table></figure></li><li>在<code>.git/info/</code>目录下新建<code>sparse-checkout</code>文件（注意文件名不要错了），写入需要的文件（<strong>一行为一项</strong>） 如： none <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/source/tools/index.html</span><br><span class="line">/source/about</span><br></pre></td></tr></table></figure></li><li>以正常方式从服务器pull下来即可 none <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法三：利用-DownGit-工具"><a href="#方法三：利用-DownGit-工具" class="headerlink" title="方法三：利用 DownGit 工具"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%89%EF%BC%9A%E5%88%A9%E7%94%A8-DownGit-%E5%B7%A5%E5%85%B7" title="方法三：利用 DownGit 工具"></a>方法三：利用 <a href="http://tool.mkblog.cn/downgit/#/home">DownGit</a> 工具</h3>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;偷节点的时候总是会有之前失效节点，使用这个工具开源下载单个文件夹&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Base64编码原理解析</title>
    <link href="https://g8d.xyz/2021/11/20/base64/"/>
    <id>https://g8d.xyz/2021/11/20/base64/</id>
    <published>2021-11-20T04:21:16.000Z</published>
    <updated>2021-11-26T15:42:28.164Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>创建v2ray订阅链接时经常需要使用到base64编码</p></blockquote><span id="more"></span><h1 id="1-Base64-是什么"><a href="#1-Base64-是什么" class="headerlink" title="1. Base64 是什么"></a><strong>1. Base64 是什么</strong></h1><p> Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2^6=64，所以每 6 个比特为一个单元，对应某个可打印字符。3 个字节有 24 个比特，对应于 4 个 Base64 单元，即 3 个字节可由 4 个可打印字符来表示。</p><p> ——维基百科</p><p>它不是一种加解密技术，是一种简单的编解码技术。</p><p>Base64 常用于表示、传输、存储二进制数据，也可以用于将一些含有特殊字符的文本内容编码，以便传输。</p><p>比如：</p><ol><li><p>在电子邮件的传输中，Base64 可以用来将 binary 的字节序列，比如附件，编码成 ASCII 字节序列；</p></li><li><p>将一些体积不大的图片 Base64 编码后，直接内嵌到网页源码里；</p></li><li><p>将要传递给 HTTP 请求的参数做简单的转换，降低肉眼可读性；</p></li></ol><p> 注：用于 URL 的 Base64 非标准 Base64，是一种变种。</p><ol start="4"><li>网友们在论坛等公开场合习惯将邮箱地址 Base64 后再发出来，防止被爬虫抓取后发送垃圾邮件。</li></ol><h1 id="2-Base64-编码原理"><a href="#2-Base64-编码原理" class="headerlink" title="2. Base64 编码原理"></a><strong>2. Base64 编码原理</strong></h1><p>标准 Base64 里的 64 个可打印字符是 A-Za-z0-9+/，分别依次对应索引值 0-63。索引表如下：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-index.png"/><br>编码时，每 3 个字节一组，共 8bit*3=24bit，划分成 4 组，即每 6bit 代表一个编码后的索引值，划分如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-split.png"/><br>这样可能不太直观，举个例子就容易理解了。比如我们对 cat 进行编码：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-example.jpeg"/><br>可以看到 cat 编码后变成了 Y2F0。</p><p>如果待编码内容的字节数不是 3 的整数倍，那需要进行一些额外的处理。</p><p>如果最后剩下 1 个字节，那么将补 4 个 0 位，编码成 2 个 Base64 字符，然后补两个 =：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-padding2.png"/><br>如果最后剩下 2 个字节，那么将补 2 个 0 位，编码成 3 个 Base64 字符，然后补一个 =：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/java/base64-padding1.png"/></p><h1 id="3-实现一个简易的-Base64-编码器"><a href="#3-实现一个简易的-Base64-编码器" class="headerlink" title="3. 实现一个简易的 Base64 编码器"></a><strong>3. 实现一个简易的 Base64 编码器</strong></h1><p>讲完原理，我们就可以动手实现一个简易的标准 Base64 编码器了，以下是我参考 Java 8 的 java.util.Base64 乱写的一个 Java 版本，仅供参考，主要功能代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class CustomBase64Encoder &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 索引表</span><br><span class="line">     */</span><br><span class="line">    private static final char[] sBase64 = &#123;</span><br><span class="line">            &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;,</span><br><span class="line">            &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;,</span><br><span class="line">            &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;,</span><br><span class="line">            &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,</span><br><span class="line">            &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;,</span><br><span class="line">            &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;,</span><br><span class="line">            &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;,</span><br><span class="line">            &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;+&#x27;, &#x27;/&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将 byte[] 进行 Base64 编码并返回字符串</span><br><span class="line">     * @param src 原文</span><br><span class="line">     * @return 编码后的字符串</span><br><span class="line">     */</span><br><span class="line">    public static String encode(byte[] src) &#123;</span><br><span class="line">        if (src == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        byte[] dst = new byte[(src.length + 2) / 3 * 4];</span><br><span class="line"></span><br><span class="line">        int index = 0;</span><br><span class="line"></span><br><span class="line">        // 每次将 3 个字节编码为 4 个字节</span><br><span class="line">        for (int i = 0; i &lt; (src.length / 3 * 3); i += 3) &#123;</span><br><span class="line">            int bits = (src[i] &amp; 0xff) &lt;&lt; 16 | (src[i + 1] &amp; 0xff) &lt;&lt; 8 | (src[i + 2] &amp; 0xff);</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 18) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 12) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[bits &amp; 0x3f];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 处理剩下的 1 个或 2 个字节</span><br><span class="line">        if (src.length % 3 == 1) &#123;</span><br><span class="line">            int bits = (src[src.length - 1] &amp; 0xff) &lt;&lt; 4;</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[bits &amp; 0x3f];</span><br><span class="line">            dst[index++] = &#x27;=&#x27;;</span><br><span class="line">            dst[index] = &#x27;=&#x27;;</span><br><span class="line">        &#125; else if (src.length % 3 == 2) &#123;</span><br><span class="line">            int bits = (src[src.length - 2] &amp; 0xff) &lt;&lt; 10 | (src[src.length - 1] &amp; 0xff) &lt;&lt; 2;</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 12) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[(bits &gt;&gt;&gt; 6) &amp; 0x3f];</span><br><span class="line">            dst[index++] = (byte) sBase64[bits &amp; 0x3f];</span><br><span class="line">            dst[index] = &#x27;=&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return new String(dst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分源码我也上传到 GitHub 仓库 <a href="https://github.com/mzlogin/spring-practices">https://github.com/mzlogin/spring-practices</a> 的 base64test 工程里了</p><h1 id="4-其它知识点"><a href="#4-其它知识点" class="headerlink" title="4. 其它知识点"></a><strong>4. 其它知识点</strong></h1><h2 id="4-1-为什么有的编码结果带回车"><a href="#4-1-为什么有的编码结果带回车" class="headerlink" title="4.1 为什么有的编码结果带回车"></a><strong>4.1 为什么有的编码结果带回车</strong></h2><p>在电子邮件中，根据 RFC 822 规定，每 76 个字符需要加上一个回车换行，所以有些编码器实现，比如 sun.misc.BASE64Encoder.encode，是带回车的，还有 java.util.Base64.Encoder.RFC2045，是带回车换行的，每行 76 个字符。</p><h2 id="4-2-Base64-的变种"><a href="#4-2-Base64-的变种" class="headerlink" title="4.2 Base64 的变种"></a><strong>4.2 Base64 的变种</strong></h2><p>除了标准 Base64 之外，还有一些其它的 Base64 变种。</p><p>比如在 URL 的应用场景中，因为标准 Base64 索引表中的 / 和 + 会被 URLEncoder 转义成 %XX 形式，但 % 是 SQL 中的通配符，直接用于数据库操作会有问题。此时可以采用 URL Safe 的编码器，索引表中的 /+ 被换成 -_，比如 java.util.Base64.Encoder.RFC4648_URLSAFE 就是这样的实现。</p><h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a><strong>5. 参考链接</strong></h1><p><a href="https://zh.wikipedia.org/zh-hans/Base64">https://zh.wikipedia.org/zh-hans/Base64</a><br><a href="https://www.liaoxuefeng.com/wiki/897692888725344/949441536192576">https://www.liaoxuefeng.com/wiki/897692888725344/949441536192576</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;创建v2ray订阅链接时经常需要使用到base64编码&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="v2ray" scheme="https://g8d.xyz/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>CloudFlare 缓存全站</title>
    <link href="https://g8d.xyz/2021/11/19/CloudFlare-%E7%BC%93%E5%AD%98%E5%85%A8%E7%AB%99/"/>
    <id>https://g8d.xyz/2021/11/19/CloudFlare-%E7%BC%93%E5%AD%98%E5%85%A8%E7%AB%99/</id>
    <published>2021-11-18T16:43:31.000Z</published>
    <updated>2021-11-26T15:42:46.917Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CloudFlare 默认只对静态资源进行缓存。动态资源是默认不缓存的。如果你的内容基本是静态的或者不在意实时更新的话，可以使用 CloudFlare 的页面规则设置缓存所有内容。免费用户可以设置 3 条页面规则，Pro 用户可以使用 30 条规则。</p></blockquote><span id="more"></span><img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Snipaste_2021-10-29_19-07-33.png"/>如果要全域都走这条规则的话，就使用 * 表示全部，比如 *.ednovas.xyz/* 就是代表所有的 ednovas.xyz 前缀后缀的域名都要走这个规则<img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Snipaste_2021-10-29_19-08-52.png"/>还可以加上一条 Edge Cache TTL，此项为 cloudflare 多久去检查你的服务器并更新<img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Snipaste_2021-10-29_19-09-59.png"/>如果有的时候进不去后台，可以设置个 Cache Level 的 bypass 规则，并且设置其为置顶规则<img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Snipaste_2021-10-29_19-13-18.png"/>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;CloudFlare 默认只对静态资源进行缓存。动态资源是默认不缓存的。如果你的内容基本是静态的或者不在意实时更新的话，可以使用 CloudFlare 的页面规则设置缓存所有内容。免费用户可以设置 3 条页面规则，Pro 用户可以使用 30 条规则。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows11 中安装 WSA (安卓子系统)</title>
    <link href="https://g8d.xyz/2021/11/19/wsa/"/>
    <id>https://g8d.xyz/2021/11/19/wsa/</id>
    <published>2021-11-18T16:36:31.000Z</published>
    <updated>2021-11-26T15:47:47.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Windows11更新了 WSA 安卓子系统本篇文章用于记录安装过程</p></blockquote><span id="more"></span><img src="https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New%20folder/Windows-11-android-sideloading.webp"/>首先你得打开 windows 里面的功能，在 windows 菜单里面搜索启用.... 功能然后打开里面的这两个功能<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@fbd84daf694bc3c341f4a67c387fde02e92fc5a6/2021/10/23/fc239b9e839fce2255a2c5a3d58f57ca.png"/>重启之后下载需要的包商店下载链接 https://www.microsoft.com/store/productId/9P3395VX91NR安装包抓包地址 https://store.rg-adguard.net/在抓包地址右边选择 Slow 通道 (因为 Slow 通道对应的是 Beta 通道，其他 Fast,RP,Retail 分别对应 Dev, 预览，正式版)然后在地址栏里面输入商店下载地址<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@8dd2873eac46c72a2e068fc1e111bc36e7ac36ee/2021/10/23/6e17ce2332480b48c65701599e6f129c.png"/>找到最下面的那个最大的包，我这里名字为 "MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle"如果版本更新可能会变，不过都差不多，把它下载下来如果你双击它，你会发现无法安装这个时候我们需要用管理员运行 Powershell 来安装win+X 运行 Powershell<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@d5c10c25afb416a0c37e06b0c4a330497c48d9ad/2021/10/23/de4a05fddc9621828c3f8b7c63023d81.png"/>在里面输入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-appxpackage &quot;这里填你下载的安装包的绝对路径&quot;</span><br></pre></td></tr></table></figure>比如我的就是<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-appxpackage &quot;D:\Downloads\Microsoft Edge\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral___8wekyb3d8bbwe.Msixbundle&quot;</span><br></pre></td></tr></table></figure>回车执行然后就可以 enjoy 了<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@4bee2cfec873eb34502cd370422d9cbc94559b72/2021/10/23/36f79476f2ecd91ba609db80023925f9.png"/>很多小伙伴装了 WSA 都发现没有桌面，这就意味着你只能用 adb 来进行和子系统的交互十分的麻烦，这里我推荐一个工具，[秋之盒](https://www.atmb.top/)**我使用的是 canary 金丝雀版本**进入 WSA 界面打开开发人员模式启用它，进入管理开发人员设置<img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@578098c98de446dabdd6739571a5e9777e9afadf/2021/10/23/740ba46d103856a0a5575f8ba092f631.png"/>打开 usb 调试<p>回到 WSA 界面，刷新和复制 IP<br>进入秋之盒<br><img src="https://cdn.jsdelivr.net/gh/IsaacWangTT/jsdelivr@ac1923a448e632aee5e7b0147ee37a811b86a1b7/2021/10/23/35b60326e485e438db3e1d2c4c480306.png"/></p><p>在这里输入你复制的 IP</p><p>安装一个然后你就能对 WSA 做你想做的事情了，比如可以安装一个应用商店，我这里推荐大家安装一个酷安<br>听说有人在 wsa 里面成功安装了谷歌框架，大家也可以试试</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Windows11更新了 WSA 安卓子系统本篇文章用于记录安装过程&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>青龙2.10+XDD-Plus+nvjdc短信验证登录对接xdd-plus</title>
    <link href="https://g8d.xyz/2021/11/15/qinglong/"/>
    <id>https://g8d.xyz/2021/11/15/qinglong/</id>
    <published>2021-11-15T10:55:42.000Z</published>
    <updated>2021-11-27T06:47:05.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近沉迷薅东哥的羊毛无法自拔把cookie放在别人容器好像又不是和安全所以决定自建搭建</p></blockquote><span id="more"></span><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><strong>一、准备工作</strong></h1><p>1.一台电脑（手机也可以，自行找ssh链接工具）</p><p>2.购买服务器，并开放服务器端口，这里以阿里云服务器为例。其它服务器自行百度，这里就不过多叙述。</p><img src="https://img-blog.csdnimg.cn/3a6a13ff5f794dcc9be281907f0f2c76.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCm57uV5Li25qKm5b2x,size_20,color_FFFFFF,t_70,g_se,x_16"/><img src="https://img-blog.csdnimg.cn/c2ae6ef788344755a1dfc3a37881e089.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCm57uV5Li25qKm5b2x,size_20,color_FFFFFF,t_70,g_se,x_16"/><p>3.连接服务器</p><h1 id="二、开始搭建"><a href="#二、开始搭建" class="headerlink" title="二、开始搭建"></a><strong>二、开始搭建</strong></h1><p><strong>1.安装docke并设置开机启动</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum check-update</span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl status docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h1 id="2-拉取青龙面板"><a href="#2-拉取青龙面板" class="headerlink" title="2.拉取青龙面板"></a><strong>2.拉取青龙面板</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  --name ql \</span><br><span class="line">  --hostname ql \</span><br><span class="line">  --restart always \</span><br><span class="line">  -p 5700:5700 \</span><br><span class="line">  -v $PWD/ql/config:/ql/config \</span><br><span class="line">  -v $PWD/ql/log:/ql/log \</span><br><span class="line">  -v $PWD/ql/db:/ql/db \</span><br><span class="line">  -v $PWD/ql/scripts:/ql/scripts \</span><br><span class="line">  -v $PWD/ql/jbot:/ql/jbot \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure><p> 端口号可自己方法：</p><p>-p 5700:5700 端口号为5700</p><p>-p xxxx:5700 端口号为xxxx</p><p>注：改的端口号一定要在安全组中放行该端口，不然访问不到</p><h1 id="3-登录青龙面板"><a href="#3-登录青龙面板" class="headerlink" title="3.登录青龙面板"></a><strong>3.登录青龙面板</strong></h1><p>在浏览器中输入 服务器ip:端口号        端口号为上一步你自己设置的端口号</p><p>例如：123.123.123.123:5700</p><p>进入青龙面板的登陆页面，开始安装</p><h1 id="4-拉取定时任务脚本仓库"><a href="#4-拉取定时任务脚本仓库" class="headerlink" title="4.拉取定时任务脚本仓库"></a><strong>4.拉取定时任务脚本仓库</strong></h1><p>这里推荐两个仓库：</p><p>faker2仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql&quot;</span><br></pre></td></tr></table></figure><p>smiek2221仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https://ghproxy.com/github.com/smiek2221/scripts.git &quot;jd_|gua_&quot; &quot;&quot; &quot;ZooFaker_Necklace.js|JDJRValidator_Pure.js|sign_graphics_validate.js&quot;</span><br></pre></td></tr></table></figure><p><strong>青龙面板相关依赖及部分脚本依赖不能偷懒，稍微等一等有点慢</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it QL bash -c &quot;npm install -g typescript&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install axios date-fns&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install crypto -g&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install jsdom&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install png-js&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;npm install -g npm&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;pnpm i png-js&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;pip3 install requests&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;apk add python3 zlib-dev gcc jpeg-dev python3-dev musl-dev freetype-dev&quot;</span><br><span class="line">docker exec -it QL bash -c &quot;cd /ql/scripts/ &amp;&amp; apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; npm i &amp;&amp; npm i -S ts-node typescript @types/node date-fns axios png-js canvas --build-from-source&quot;</span><br></pre></td></tr></table></figure><h1 id="5-应用设置配置"><a href="#5-应用设置配置" class="headerlink" title="5.应用设置配置"></a><strong>5.应用设置配置</strong></h1><p>为下一步的xdd-plus对接青龙做出准备</p><h1 id="6-搭建xdd-plus所需环境"><a href="#6-搭建xdd-plus所需环境" class="headerlink" title="6.搭建xdd-plus所需环境"></a><strong>6.搭建xdd-plus所需环境</strong></h1><pre><code> 6.1安装gcc      <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>6.2下载go安装包 ，这里我们安装到usr/local目录 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local &amp;&amp; wget https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz -O go1.16.7.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>6.3解压go安装包 tar -xvzf go1.16.7.linux-amd64.tar.gz6.4手动设置环境变量路径/etc/profile <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export GO111MODULE=on</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/usr/local/go/path</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure> 复制上方代码添加到profile文件末尾6.5执行source <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>6.6检测一下看看有没有安装成功 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure>6.7安装git <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"> </span><br><span class="line"> rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class="line"> </span><br><span class="line">  yum install -y git</span><br></pre></td></tr></table></figure></code></pre><h1 id="7-安装xdd-plus"><a href="#7-安装xdd-plus" class="headerlink" title="7.安装xdd-plus"></a><strong>7.安装xdd-plus</strong></h1><pre><code>    7.1拉取xdd-plus的库    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~ &amp;&amp; git clone https://ghproxy.com/https://github.com/764763903a/xdd-plus.git</span><br></pre></td></tr></table></figure>    7.2编译xdd     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd xdd-plus</span><br><span class="line">go build</span><br></pre></td></tr></table></figure>    7.3给与xdd最高权限     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 xdd</span><br></pre></td></tr></table></figure>    7.4运行xdd（要确保你在xdd-plus目录下）     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xdd</span><br></pre></td></tr></table></figure>     等程序跑个半分钟Ctrl+c退出    7.5WinSCP中手动修改root/xdd-plus/conf/config.yaml文件</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mode: parallel  #模式 balance(均衡模式)、parallel(平行模式)</span><br><span class="line">containers:</span><br><span class="line">  - address: http://123.123.123.123:5700 #这里是你青龙面板的地址</span><br><span class="line">    username: 青龙面板的账号 #登陆青龙面板的账号</span><br><span class="line">    password: 青龙面板的密码 #登录青龙面板的密码</span><br><span class="line">    cid: Client ID #刚刚在青龙面板获取到的Client ID</span><br><span class="line">    secret: Client Secret #刚刚在青龙面板获取到的Client Secret</span><br><span class="line">    weigth: 1 #权重 balance模式下权重越高分得的ck越多，默认1</span><br><span class="line">    mode: parallel #模式 balance(均衡模式)、parallel(平行模式)</span><br><span class="line">    limit: 9999 #限制容器ck数目</span><br><span class="line">AtTime: 8 #填写1-12之间的数  填错自负默认为10  10点容易出现高峰超时。</span><br><span class="line">IsHelp: true  #填写true或者false  false</span><br><span class="line">IsOldV4: #填写true或者false  false是否新版或者旧版V4</span><br><span class="line">Wskey: true # 填空默认禁用wskey转换 需要的填true</span><br><span class="line">IsAddFriend: #填写true或者false  false</span><br><span class="line">Lim: #填写1-N 代表限制次数</span><br><span class="line">Tyt: #填写1-N 代表推一推需要的互助值，默认为8</span><br><span class="line">Later: #延时防止黑IP自己设置 默认60 不怕黑的改为1即可 单位是秒</span><br><span class="line">ApiToken: #nvjdc短信接入token参数，自己设置</span><br><span class="line">theme: /root/xdd-plus/theme/admin.html  #自定义主题，支持本地、网络路径 </span><br><span class="line">static: ./static #静态文件 便于自定义二维码页面时，引入css、js等文件</span><br><span class="line">master: #xdd-plus后台密码，并从井号开始把这一段文字全部删除</span><br><span class="line">database: /root/xdd-plus/.xdd.db </span><br><span class="line">qywx_key: #企业微信推送key</span><br><span class="line">daily_push: #定时任务</span><br><span class="line">resident: #均衡模式下所有容器共同的账号pin，有多个用&#x27;&amp;&#x27;拼接。不建议填写。</span><br><span class="line">user_agent:</span><br><span class="line">telegram_bot_token:</span><br><span class="line">telegram_user_id:</span><br><span class="line">TGURL: #填写TG代理地址参考https://www.kejiwanjia.com/server/5221.html#3worker</span><br><span class="line">qquid: 管理员QQ #接收通知的qq号，管理员QQ号码</span><br><span class="line">qqgid: QQ群号 #监听的群</span><br><span class="line">qbot_public_mode: true #qq机器人群聊模式，默认私聊模式</span><br><span class="line">default_priority: #新用户默认优先级</span><br><span class="line">no_ghproxy: true #更新资源是否不使用代理</span><br><span class="line">daily_asset_push_cron: 0 21 * * * #日常资产推送时间 可以不填</span><br><span class="line">repos:</span><br><span class="line">  - git: https://github.com/shufflewzc/faker2.git</span><br></pre></td></tr></table></figure><p>修改完之后Ctrl+s保存文件退出，回到命令行在次运行上一步7.4</p><p>出现二维码，扫码绑定你的机器人qq，等一会后向你的机器人发消息测试。</p><p>7.6然后Ctrl+c，为防止机器人被杀死我们后台挂机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xdd -d</span><br></pre></td></tr></table></figure><p> 我们的xdd-plus配置到此结束</p><h1 id="8-nvjdc短信验证登录对接xdd-plus"><a href="#8-nvjdc短信验证登录对接xdd-plus" class="headerlink" title="8.nvjdc短信验证登录对接xdd-plus"></a><strong>8.nvjdc短信验证登录对接xdd-plus</strong></h1><pre><code>     8.1先cd回根目录     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>    8.2首先安装unzip    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget unzip -y</span><br></pre></td></tr></table></figure>    8.3然后创建一个目录放配置以及chromium    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir nolanjdc &amp;&amp; cd nolanjdc</span><br></pre></td></tr></table></figure>     8.4拉取nvjdc对接xdd-plus专用的配置文件     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.jsdelivr.net/gh/yanyuwangluo/tuku@main/Config.json</span><br></pre></td></tr></table></figure>    8.5创建chromium文件夹并进入    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p  .local-chromium/Linux-884014 &amp;&amp; cd .local-chromium/Linux-884014</span><br></pre></td></tr></table></figure>    8.6下载chromium并删除chromium压缩包    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.huaweicloud.com/chromium-browser-snapshots/Linux_x64/884014/chrome-linux.zip &amp;&amp; unzip chrome-linux.zip  &amp;&amp;  rm  -f chrome-linux.zip</span><br></pre></td></tr></table></figure>     8.7回到刚刚创建的目录     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/nolanjdc</span><br></pre></td></tr></table></figure>    8.8拉取nvjdc项目镜像    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nolanhzy/nvjdc:1.0</span><br></pre></td></tr></table></figure>    8.9启动项目容器（5703就是你nvjdc的端口号）    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run   --name nolanjdc -p 5703:80 -d  -v  &quot;$(pwd)&quot;/Config.json:/app/Config/Config.json:ro \-v &quot;$(pwd)&quot;/.local-chromium:/app/.local-chromium  \-it --privileged=true  nolanhzy/nvjdc:1.0</span><br></pre></td></tr></table></figure>     8.10查看日志     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f nolanjdc</span><br></pre></td></tr></table></figure></code></pre><p>出现表示NETJDC started成功，然后Ctrl+c退出日志即可<br>         8.11修改nvjdc对接xdd-plus的配置文件</p><p>配置文件路径/root/nolanjdc/Config.json</p><p>编辑好后保存重启容器（修改配置文件后需要重启）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart nolanjdc</span><br></pre></td></tr></table></figure><p> 到这一步已经可以全部正常使用了 </p><p>后面做一些补充 </p><p>（可忽略）公告处可以公告处可通过html+css编写后转义替换添加更多功能，可进交流群。</p><p> 删除容器和镜像（后面的0.8是版本号跟随自己需求更改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f nolanjdc &amp;&amp; docker rmi -f nolanhzy/nvjdc:1.0</span><br></pre></td></tr></table></figure><p>更新：更新前删除容器和镜像，然后继续执行8.7到8.10就好</p><p>卸载nvjdc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f nolanjdc &amp;&amp; docker rmi -f nolanhzy/nvjdc:1.0 &amp;&amp; rm -rf /root/nolanjdc </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近沉迷薅东哥的羊毛无法自拔把cookie放在别人容器好像又不是和安全所以决定自建搭建&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用 Cloudflare Pages 托管静态网站</title>
    <link href="https://g8d.xyz/2021/10/31/Cloudflare-Pages/"/>
    <id>https://g8d.xyz/2021/10/31/Cloudflare-Pages/</id>
    <published>2021-10-31T09:45:34.000Z</published>
    <updated>2021-10-31T14:09:00.814Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.misterma.com/img-admin/uploads/16290271822437.png" />Cloudflare Pages 是一个静态网站托管服务，功能和 Github Pages 差不多，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。Cloudflare 是全球最大的几个 CDN 服务商之一，速度应该会比 Github Pages 好一些，而且 Cloudflare Pages 一个账户可以创建多个网站。<span id="more"></span>最近我准备把 MWordStar 的帮助文档迁移到 Cloudflare Pages ，这样我的服务器就可以少管理一个网站，服务器出问题也不会影响主题帮助文档的访问。这里就简单写一下 Cloudflare Pages 的使用。<p>关联 Github 存储库<br>直接访问 <a href="https://pages.cloudflare.com/">https://pages.cloudflare.com/</a> ，没有账号的可以按照提示注册，有账号的可以直接登录。</p><p>Cloudflare Pages 的官网首页没有中文，但部署和设置页面是有中文的。登录后点击 创建项目 ，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16290187581512.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>点击 连接 Github 账户 ：<br><img src="https://www.misterma.com/img-admin/uploads/16290189752064.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>这里会弹出 Github 的授权页面，选择 Install &amp; Authorize 允许 Cloudflare 访问 Github 账户，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16290192466333.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>然后会显示 Github 存储库，也包括非公开的存储库，选择要部署的存储库，点击 开始设置 ：<br><img src="https://www.misterma.com/img-admin/uploads/16290194687453.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>设置构建命令和存放构建的页面的目录：<br><img src="https://www.misterma.com/img-admin/uploads/16290198291377.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>Cloudflare 克隆存储库后会自动执行 npm install 之类的命令下载所需的依赖，然后执行构建命令，然后把构建完成的文件放到网站目录。</p><p>点击 保存并部署 后 Cloudflare Pages 就会开始构建和部署，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16290202797579.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>同时下方也会输出日志：<br><img src="https://www.misterma.com/img-admin/uploads/16290205378681.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>部署完成后点击 继续处理项目 就可以看到部署的网站了，如下：<br><img src="https://www.misterma.com/img-admin/uploads/16290207787046.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>默认的域名是 项目名称.pages.dev 。</p><p>设置域名<br>点击 自定义域 ：<br><img src="https://www.misterma.com/img-admin/uploads/16290210479376.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>输入要绑定的域名：<br><img src="https://www.misterma.com/img-admin/uploads/16290255602829.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>如果你用的是 Cloudflare 的 DNS 的话，Cloudflare可以一键设置 CNAME。如果不是的话就需要手动设置 CNAME，登录域名管理后台，添加一条 CNAME 指向默认的 pages.dev 域名。</p><p>我使用的是 Cloudflare 的 DNS，可以自动设置 CNAME：<br><img src="https://www.misterma.com/img-admin/uploads/16290256742490.jpeg" alt="请输入图片描述" title="请输入图片描述" /><br>设置完成后需要一段时间才会生效。</p><p>以上就是 Cloudflare Pages 的设置过程。免费的 Cloudflare Pages 账户每月最多只能构建 500 次，对于个人博客或小网站来说已经足够。</p><p>目前 Cloudflare Pages 只能通过 Github 来部署，不能直接上传 HTML。</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://www.misterma.com/img-admin/uploads/16290271822437.png&quot; /&gt;
Cloudflare Pages 是一个静态网站托管服务，功能和 Github Pages 差不多，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。Cloudflare 是全球最大的几个 CDN 服务商之一，速度应该会比 Github Pages 好一些，而且 Cloudflare Pages 一个账户可以创建多个网站。</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>CloudFlare Workers 反代任意网站和挂载单页代码</title>
    <link href="https://g8d.xyz/2021/10/31/CloudFlare-Workers/"/>
    <id>https://g8d.xyz/2021/10/31/CloudFlare-Workers/</id>
    <published>2021-10-30T16:44:10.000Z</published>
    <updated>2021-10-31T14:08:55.159Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gitee.com/liuhao03/tuchuang/raw/master/202110192343045.png"/><strong>介绍</strong>CloudFlare Workers是一个支持jsproxy的无服务器函数服务，提供全球CDN支持，免费用户有每天10万请求额度；CloudFlare官网：<a href="https://dash.cloudflare.com">https://dash.cloudflare.com</a>记录下一些简单的使用方法，以后再陆续更新；<span id="more"></span><strong>Workers 单页挂载代码</strong><pre><code class="lang-php">addEventListener('fetch', event =&gt; &#123;  event.respondWith(handleRequest(event.request))&#125;)<p>// HTML代码<br>let html = <code>&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt;   &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;&amp;lt;div&amp;gt;Hello world!&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</code>;</p><p>/**</p><ul><li>Respond to the request</li><li>@param {Request} request</li><li>/<br>async function handleRequest(request) {<br>return new Response(html, {<br>  headers: {<pre><code>&#39;Content-Type&#39;: &#39;text/html; charset=UTF-8&#39;</code></pre>  },<br>  status: 200<br>})<br>}</code></pre><br><strong>Workers 反代任意网站</strong><pre><code class="lang-php">// Website you intended to retrieve for users.const upstream = 'sunpma.com'</li></ul><p>// Custom pathname for the upstream website.<br>const upstream_path = ‘/‘</p><p>// Website you intended to retrieve for users using mobile devices.<br>const upstream_mobile = ‘sunpma.com’</p><p>// Countries and regions where you wish to suspend your service.<br>const blocked_region = [‘KP’, ‘SY’, ‘PK’, ‘CU’]</p><p>// IP addresses which you wish to block from using your service.<br>const blocked_ip_address = [‘0.0.0.0’, ‘127.0.0.1’]</p><p>// Whether to use HTTPS protocol for upstream address.<br>const https = true</p><p>// Whether to disable cache.<br>const disable_cache = false</p><p>// Replace texts.<br>const replace_dict = &#123;<br>    ‘$upstream’: ‘$custom_domain’,<br>    ‘//sunpma.com’: ‘’<br>&#125;</p><p>addEventListener(‘fetch’, event =&gt; &#123;<br>    event.respondWith(fetchAndApply(event.request));<br>&#125;)</p><p>async function fetchAndApply(request) &#123;<br>    const region = request.headers.get(‘cf-ipcountry’).toUpperCase();<br>    const ip_address = request.headers.get(‘cf-connecting-ip’);<br>    const user_agent = request.headers.get(‘user-agent’);</p><pre><code>let response = null;let url = new URL(request.url);let url_hostname = url.hostname;if (https == true) &#123;    url.protocol = &#39;https:&#39;;&#125; else &#123;    url.protocol = &#39;http:&#39;;&#125;if (await device_status(user_agent)) &#123;    var upstream_domain = upstream;&#125; else &#123;    var upstream_domain = upstream_mobile;&#125;url.host = upstream_domain;if (url.pathname == &#39;/&#39;) &#123;    url.pathname = upstream_path;&#125; else &#123;    url.pathname = upstream_path + url.pathname;&#125;if (blocked_region.includes(region)) &#123;    response = new Response(&#39;Access denied: WorkersProxy is not available in your region yet.&#39;, &#123;        status: 403    &#125;);&#125; else if (blocked_ip_address.includes(ip_address)) &#123;    response = new Response(&#39;Access denied: Your IP address is blocked by WorkersProxy.&#39;, &#123;        status: 403    &#125;);&#125; else &#123;    let method = request.method;    let request_headers = request.headers;    let new_request_headers = new Headers(request_headers);    new_request_headers.set(&#39;Host&#39;, upstream_domain);    new_request_headers.set(&#39;Referer&#39;, url.protocol + &#39;//&#39; + url_hostname);    let original_response = await fetch(url.href, &#123;        method: method,        headers: new_request_headers    &#125;)    connection_upgrade = new_request_headers.get(&quot;Upgrade&quot;);    if (connection_upgrade &amp;amp;&amp;amp; connection_upgrade.toLowerCase() == &quot;websocket&quot;) &#123;        return original_response;    &#125;    let original_response_clone = original_response.clone();    let original_text = null;    let response_headers = original_response.headers;    let new_response_headers = new Headers(response_headers);    let status = original_response.status;        if (disable_cache) &#123;        new_response_headers.set(&#39;Cache-Control&#39;, &#39;no-store&#39;);    &#125;    new_response_headers.set(&#39;access-control-allow-origin&#39;, &#39;*&#39;);    new_response_headers.set(&#39;access-control-allow-credentials&#39;, true);    new_response_headers.delete(&#39;content-security-policy&#39;);    new_response_headers.delete(&#39;content-security-policy-report-only&#39;);    new_response_headers.delete(&#39;clear-site-data&#39;);        if (new_response_headers.get(&quot;x-pjax-url&quot;)) &#123;        new_response_headers.set(&quot;x-pjax-url&quot;, response_headers.get(&quot;x-pjax-url&quot;).replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname));    &#125;        const content_type = new_response_headers.get(&#39;content-type&#39;);    if (content_type != null &amp;amp;&amp;amp; content_type.includes(&#39;text/html&#39;) &amp;amp;&amp;amp; content_type.includes(&#39;UTF-8&#39;)) &#123;        original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname);    &#125; else &#123;        original_text = original_response_clone.body    &#125;        response = new Response(original_text, &#123;        status,        headers: new_response_headers    &#125;)&#125;return response;</code></pre><p>}</p><p>async function replace_response_text(response, upstream_domain, host_name) {<br>    let text = await response.text()</p><pre><code>var i, j;for (i in replace_dict) &#123;    j = replace_dict[i]    if (i == &#39;$upstream&#39;) &#123;        i = upstream_domain    &#125; else if (i == &#39;$custom_domain&#39;) &#123;        i = host_name    &#125;    if (j == &#39;$upstream&#39;) &#123;        j = upstream_domain    &#125; else if (j == &#39;$custom_domain&#39;) &#123;        j = host_name    &#125;    let re = new RegExp(i, &#39;g&#39;)    text = text.replace(re, j);&#125;return text;</code></pre><p>}</p><p>async function device_status(user_agent_info) {<br>    var agents = [“Android”, “iPhone”, “SymbianOS”, “Windows Phone”, “iPad”, “iPod”];<br>    var flag = true;<br>    for (var v = 0; v &lt; agents.length; v++) {<br>        if (user_agent_info.indexOf(agents[v]) &gt; 0) {<br>            flag = false;<br>            break;<br>        }<br>    }<br>    return flag;<br>}</code></pre><br>替换掉其中的sunpma.com为你需要反代的网址即可；</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://gitee.com/liuhao03/tuchuang/raw/master/202110192343045.png&quot;/&gt;
&lt;strong&gt;介绍&lt;/strong&gt;
CloudFlare Workers是一个支持jsproxy的无服务器函数服务，提供全球CDN支持，免费用户有每天10万请求额度；
CloudFlare官网：&lt;a href=&quot;https://dash.cloudflare.com&quot;&gt;https://dash.cloudflare.com&lt;/a&gt;
记录下一些简单的使用方法，以后再陆续更新；</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>V2RAY一键部署脚本</title>
    <link href="https://g8d.xyz/2021/10/31/V2RAY/"/>
    <id>https://g8d.xyz/2021/10/31/V2RAY/</id>
    <published>2021-10-30T16:43:10.000Z</published>
    <updated>2021-10-31T12:40:19.290Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gitee.com/liuhao03/tuchuang/raw/master/202110192358637.png"/>此安装脚本除了可以安装V2以外，亦可以安装SS，MTP，Socks5，简单好用；<span id="more"></span><strong>一键安装命令：</strong>Debian/Ubuntu<pre><code class="lang-php">apt-get updateapt-get install curl -ybash &lt;(curl -s -L https://git.io/v2ray.sh)</code></pre>Centos<pre><code class="lang-php">yum updateyum install curl -ybash &lt;(curl -s -L https://git.io/v2ray.sh)</code></pre>根据提示选择需要的选项安装即可；管理面板命令：<ul>     <li>v2ray</li></ul><strong>安装过程</strong><pre><code class="lang-php"> 1. 安装<ol start="2"><li>卸载</li></ol><p>请选择 [1-2]:1</p><p>请选择 V2Ray 传输协议 [1-32]</p><ol><li>TCP</li><li>TCP_HTTP</li><li>WebSocket</li><li>WebSocket + TLS</li><li>HTTP/2</li><li>mKCP</li><li>mKCP_utp</li><li>mKCP_srtp</li><li>mKCP_wechat-video</li><li>mKCP_dtls</li><li>mKCP_wireguard</li><li>QUIC</li><li>QUIC_utp</li><li>QUIC_srtp</li><li>QUIC_wechat-video</li><li>QUIC_dtls</li><li>QUIC_wireguard</li><li>TCP_dynamicPort</li><li>TCP_HTTP_dynamicPort</li><li>WebSocket_dynamicPort</li><li>mKCP_dynamicPort</li><li>mKCP_utp_dynamicPort</li><li>mKCP_srtp_dynamicPort</li><li>mKCP_wechat-video_dynamicPort</li></ol><p> ….准备安装了咯..看看有毛有配置正确了…</p><p>———- 安装信息 ————-</p><p> V2Ray 传输协议 = TCP</p><p> V2Ray 端口 = 64057</p><p> 是否配置 Shadowsocks = 未配置</p><p>———- END ————-</p><p>按 Enter 回车键 继续….或按 Ctrl + C 取消.</code></pre><br><strong>安装结果</strong></p><pre><code class="lang-php">---------- V2Ray 配置信息 ------------- 地址 (Address) = xx.xx.xx.xx 端口 (Port) = 64057 用户ID (User ID / UUID) = 35b4eee6-d90b-4e9f-bab9-c1266f2ad8c0 额外ID (Alter Id) = 233 传输协议 (Network) = tcp 伪装类型 (header type) = none---------- END -------------提示: 输入 v2ray url 可生成 vmess URL 链接 / 输入 v2ray qr 可生成二维码链接</code></pre><p><strong>管理脚本</strong></p><pre><code class="lang-php">## V2Ray 版本: v4.21.3  /  V2Ray 状态: 正在运行 ##  1. 查看 V2Ray 配置  2. 修改 V2Ray 配置  3. 下载 V2Ray 配置 / 生成配置信息链接 / 生成二维码链接  4. 查看 Shadowsocks 配置 / 生成二维码链接  5. 修改 Shadowsocks 配置  6. 查看 MTProto 配置 / 修改 MTProto 配置  7. 查看 Socks5 配置 / 修改 Socks5 配置  8. 启动 / 停止 / 重启 / 查看日志  9. 更新 V2Ray / 更新 V2Ray 管理脚本 10. 卸载 V2Ray 11. 其他温馨提示...如果你不想执行选项...按 Ctrl + C 即可退出请选择菜单 [1-11]:</code></pre>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://gitee.com/liuhao03/tuchuang/raw/master/202110192358637.png&quot;/&gt;
此安装脚本除了可以安装V2以外，亦可以安装SS，MTP，Socks5，简单好用；</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用 Vim 编辑 Markdown 时直接粘贴图片</title>
    <link href="https://g8d.xyz/2021/05/20/Vim-Markdown/"/>
    <id>https://g8d.xyz/2021/05/20/Vim-Markdown/</id>
    <published>2021-05-20T03:45:48.000Z</published>
    <updated>2021-11-21T16:03:53.259Z</updated>
    
    <content type="html"><![CDATA[<p>我习惯使用 Vim 编辑 Markdown 文件，一直存在一个痛点就是粘贴图片很不方便。</p><span id="more"></span><h1 id="前后对比"><a href="#前后对比" class="headerlink" title="前后对比"></a><strong>前后对比</strong></h1><p>我以前常用的操作流程：</p><ol><li>复制图片/截图；</li><li>在保存图片对话框里一层层点选保存路径，输入文件名保存；</li><li>回到 Vim 里，手动输入引用图片的表达式。<br>第 2 步和第 3 步是比较痛苦的，尤其是文件路径比较深的时候，可能要点选好几次。</li></ol><p>最近偶然发现的一个外国小伙写的插件 <a href="https://github.com/ferrine/md-img-paste.vim">md-img-paste.vim</a>，能比较好地解决这个问题。现在的操作流程：</p><ol><li>复制图片/截图；</li><li>在 Vim 里输入图片相对路径，自动保存图片并插入引用图片的表达式。</li></ol><p>注：也可以直接回车，会按默认规则生成文件名。</p><p>效果演示：<br><img src="https://cdn.jsdelivr.net/gh/mzlogin/blog-assets/md-img-paste-example.gif"/></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a><strong>使用方法</strong></h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h1><p>这个插件没有其它依赖，使用自己习惯的插件管理方式安装就好。</p><p>比如我使用 <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a>，在 vimrc 里添加如下内容，然后 :so $MYVIMRC 再 :PluginInstall 就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &#x27;ferrine/md-img-paste.vim&#x27;</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h1><p>插件没有给粘贴剪贴板里的图片的操作绑定默认快捷键，需要自己绑定一下，比如我是绑定到 &lt;leader&gt;i：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autocmd FileType markdown nmap &lt;buffer&gt;&lt;silent&gt; &lt;leader&gt;i :call mdip#MarkdownClipboardImage()&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>另外还有两个可选配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let g:mdip_imgdir = &#x27;.&#x27;</span><br><span class="line">&quot; let g:mdip_imgname = &#x27;image&#x27;</span><br></pre></td></tr></table></figure><ol><li>g:mdip_imgdir 对应图片保存路径前缀。我设置为了 .，然后总是输入相对当前文件的路径；</li><li>g:mdip_imgname 对应图片保存时的缺省文件名前缀，即粘贴图片时，如果不输入文件名直接回车，将保存为 &lt;前缀&gt;_日期-时间.png 名称的文件。<br>我的完整 Vim 配置文件托管在 <a href="https://github.com/mzlogin/config-files/blob/master/_vimrc">GitHub</a>，供参考。</li></ol><p>It’s done, enjoy it.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我习惯使用 Vim 编辑 Markdown 文件，一直存在一个痛点就是粘贴图片很不方便。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://g8d.xyz/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署为知笔记（国内gitbook）</title>
    <link href="https://g8d.xyz/2021/04/12/wiznote/"/>
    <id>https://g8d.xyz/2021/04/12/wiznote/</id>
    <published>2021-04-12T07:47:49.000Z</published>
    <updated>2021-11-12T08:18:02.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.2002000.xyz/imgs/2021/06/fe66b9023ec35d9b.png" alt="请输入图片描述"></p><p><strong>软件特色</strong></p><ul><li>一键收集微信、网页、微博 保存碎片信息 批量导入文档</li><li>文字、清单、手写 图片、拍照、语音、附件 一次记录永久保存</li><li>轻量级图文编辑工具 内置Markdown功能 写出漂亮的文档</li><li>资料永久保存在云端 修改后的笔记会保存历史版本 无需担心资料丢失</li><li>群组、多级文件夹、标签 让资料井井有条</li><li>关键词全文搜索 快捷方式定位文件夹和笔记 快速找到所需资料<span id="more"></span></li></ul><p>  <strong>前言</strong><br>官网:<a href="https://www.wiz.cn/zh-cn/">WizNote</a></p><p>官方安装教程:<a href="https://www.wiz.cn/zh-cn/docker">WizNote</a></p><p><strong>安装</strong><br>安装Docker</p><p>curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> -o get-docker.sh</p><p>sh get-docker.sh<br>启动为知笔记服务端<br>执行</p><p>cd ~<br>mkdir wizdata<br>然后执行</p><p>docker run –name wiz –restart=always -it -d -v  ~/wizdata:/wiz/storage -v  /etc/localtime:/etc/localtime -p 80:80 -p 9269:9269/udp  wiznote/wizserver<br>将其中的-p 80:80的一个80改为你想要的端口,例如-p 8080:80 或者改为-p 10003:80,这样下面的配置文件就不用改了</p><p>当然,如果你不想配置HTTPS而且本地没有其他HTTP服务器你可以直接梭哈</p><p>配置HTTPS<br>由于现在一直在用Apache,就只po出一个Apache的配置文件了</p><p>&lt;VirtualHost *:80&gt;<br>    ServerAdmin <a href="mailto:&#x61;&#100;&#x6d;&#x69;&#110;&#x40;&#109;&#111;&#x65;&#99;&#x2e;&#x74;&#111;&#112;">&#x61;&#100;&#x6d;&#x69;&#110;&#x40;&#109;&#111;&#x65;&#99;&#x2e;&#x74;&#111;&#112;</a><br>    DocumentRoot “/www/wwwroot/域名”<br>    ServerName 域名<br>    #errorDocument 404 /404.html<br>    ErrorLog “/www/wwwlogs/wiz.5777.tk-error_log”<br>    CustomLog “/www/wwwlogs/wiz.5777.tk-access_log” combined<br>    <Location /><br>    ProxyPass <a href="http://localhost:10003/">http://localhost:10003/</a><br>    ProxyPassReverse <a href="http://localhost:10003/">http://localhost:10003/</a><br>    </Location></p><pre><code>#DENY FILES &lt;Files ~ (\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)$&gt;   Order allow,deny   Deny from all&lt;/Files&gt;</code></pre></VirtualHost><VirtualHost *:443>    ServerAdmin admin@moec.top    DocumentRoot "/www/wwwroot/域名/"    ServerName 域名    #errorDocument 404 /404.html    ErrorLog "/www/wwwlogs/域名-error_log"    CustomLog "/www/wwwlogs/域名-access_log" combined <pre><code>&lt;Location /&gt;ProxyPass http://localhost:10003/ProxyPassReverse http://localhost:10003/&lt;/Location&gt;#SSLSSLEngine OnSSLCertificateFile /www/server/panel/vhost/cert/---/fullchain.pemSSLCertificateKeyFile /www/server/panel/vhost/cert/---/privkey.pemSSLCipherSuite EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5SSLProtocol All -SSLv2 -SSLv3 -TLSv1SSLHonorCipherOrder On#DENY FILES &lt;Files ~ (\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)$&gt;   Order allow,deny   Deny from all&lt;/Files&gt;</code></pre></VirtualHost>按照你的配置配置后,重载你的Apache即可<p>安装完成<br>访问你配置的域名即可</p><p>默认账号:密码 <a href="mailto:&#x61;&#100;&#x6d;&#105;&#x6e;&#64;&#x77;&#x69;&#x7a;&#x2e;&#x63;&#110;">&#x61;&#100;&#x6d;&#105;&#x6e;&#64;&#x77;&#x69;&#x7a;&#x2e;&#x63;&#110;</a>:123456<br><img src="https://img.2002000.xyz/imgs/2021/06/fe66b9023ec35d9b.png" alt="请输入图片描述"></p><p>然后点击头像,访问管理后台<br><img src="https://img.2002000.xyz/imgs/2021/06/cc0b16a6eb3d0ba3.png" alt="请输入图片描述"></p><p>访问用户管理即可更改管理员<br><img src="https://img.2002000.xyz/imgs/2021/06/99d22340ab592e6d.png" alt="请输入图片描述"></p><p>桌面客户端<br><a href="https://www.wiz.cn/zh-cn/download.html">桌面客户端</a></p><p><a href="https://www.wiz.cn/zh-cn/wiznote-lite">WizNote Lite (支持Markdown实时渲染)</a></p><p>客户端截图:<br><img src="https://img.2002000.xyz/imgs/2021/06/c9be9368435f9960.png" alt="请输入图片描述"></p><p>体验:</p><p>有一些BUG,不过能用.webp<br>如外链图片无法加载</p><p>更新<br>docker stop wiz<br>docker rm wiz<br>docker pull wiznote/wizserver:latest<br>备份<br>备份非常的简单,只需要备份~/wizdata这个文件夹即可</p><p>*@master-node:~/wizdata# ll<br>total 36<br>drwxr-xr-x  2 root  root  4096 Jun  6 08:30 config<br>drwxr-xr-x  3 root  root  4096 Jun  6 08:28 data_root<br>drwxrwxrwx 12 mysql mysql 4096 Jun  6 08:18 db<br>drwxrwxrwx  2 root  root  4096 Jun  6 08:23 index<br>drwxrwxrwx  3 root  root  4096 Jun  6 08:18 logs<br>drwxr-xr-x  3 root  root  4096 Jun  6 08:29 override_files<br>drwxr-xr-x  2 root  root  4096 Jun  6 08:46 wiz-abstract<br>drwxr-xr-x  2 root  root  4096 Jun  6 08:23 wiz-gather-dev<br>drwxr-xr-x  3 root  root  4096 Jun  6 08:46 wizserver-temp<br>里面包含了所有的数据</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.2002000.xyz/imgs/2021/06/fe66b9023ec35d9b.png&quot; alt=&quot;请输入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件特色&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一键收集微信、网页、微博 保存碎片信息 批量导入文档&lt;/li&gt;
&lt;li&gt;文字、清单、手写 图片、拍照、语音、附件 一次记录永久保存&lt;/li&gt;
&lt;li&gt;轻量级图文编辑工具 内置Markdown功能 写出漂亮的文档&lt;/li&gt;
&lt;li&gt;资料永久保存在云端 修改后的笔记会保存历史版本 无需担心资料丢失&lt;/li&gt;
&lt;li&gt;群组、多级文件夹、标签 让资料井井有条&lt;/li&gt;
&lt;li&gt;关键词全文搜索 快捷方式定位文件夹和笔记 快速找到所需资料</summary>
    
    
    
    
    <category term="docker" scheme="https://g8d.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源</title>
    <link href="https://g8d.xyz/2021/03/20/jsDelivr/"/>
    <id>https://g8d.xyz/2021/03/20/jsDelivr/</id>
    <published>2021-03-20T03:51:24.000Z</published>
    <updated>2021-11-20T04:20:05.301Z</updated>
    
    <content type="html"><![CDATA[<p>挺久以前就有网友给我的 GitHub Pages 博客模板提 Issue，说希望能增加 CDN 用于加速静态资源的加载，由于懒，一直没有动。</p><span id="more"></span><p>最近偶尔要打开自己博客看下 Wiki 的时候，要等挺久，比较痛苦，碰巧昨天晚上看到这样一篇帖子：GitHub 图床的正确用法，通过 jsDelivr CDN 全球加速，感觉很适合我的需求场景，于是决定趁这几天休假将这个改造一下。</p><h1 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a><strong>先看效果</strong></h1><p>以下改造前后的加载情况都是在 Edge 浏览器禁用缓存后录制的，录制时间段很接近，从本地访问两个 GitHub Pages 服务的原始响应速度应该类似。</p><h1 id="改造前加载"><a href="#改造前加载" class="headerlink" title="改造前加载"></a><strong>改造前加载</strong></h1><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/github/cdn-before.png"/>注：由于改造前没有保留加载图，所以这是截的一个使用相同模板的朋友的首页加载情况。<p>可以看到耗时最长的两个请求时间达到了 12 秒左右，而且很多资源的加载时间在 1 秒以上，页面完成加载时间长达 15 秒多……估计一般的访客是没这个耐心等待的。</p><h1 id="改造后加载"><a href="#改造后加载" class="headerlink" title="改造后加载"></a><strong>改造后加载</strong></h1><img src="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images/posts/github/cdn-after.png"/>这样一对比效果还是很明显的。改造过后耗时最长的是两个没办法走 CDN 的请求，而走 CDN 的那些资源加载时间基本都没超过 60 毫秒，页面完成加载时间缩短到了 3 秒以内。<p>当然，因为页面自身还是在 GitHub Pages 托管，有时候首个请求还是会挺久才返回。</p><p>改造后的效果可以打开 <a href="https://mazhuang.org/">https://mazhuang.org</a> 体验。</p><h1 id="方案考虑"><a href="#方案考虑" class="headerlink" title="方案考虑"></a><strong>方案考虑</strong></h1><p>优化独立博客的加载速度有一些不同的思路，对应不同的方案：</p><ol><li>优化博客代码，精简需要加载的资源；</li><li>将博客部署到国内访问快的服务器上；</li><li>部署到国内的代码托管平台，比如 Gitee 和 Coding 等；</li><li>采用 CDN 加速；<br>其中 2 和 3 我不想考虑，还是期望只在 GitHub 上管理博客，所以 1 和 4 是优化方向，本文对应的就是 4 的部分。</li></ol><p>而采用 CDN 加速的方案，可以考虑</p><ol><li>将公共库改为直接引用公共 CDN 链接；</li><li>自己编写和修改的静态资源自己去托管在一个 CDN 服务上。</li></ol><p> 有一些 CDN 服务商提供一定的免费额度，可以按喜好选用，或者选择付费服务。这里我没有纠结，看完文首提到的那篇文章，去看了下 jsDelivr 的介绍后觉得靠谱：它原生支持使用 GitHub 项目里的资源，什么都不用配置，更重要的是免费，在国内有节点，而且速度还不错（官网上也把 works in China 作为一个卖点的），遂决定直接用它。</p><h1 id="jsDelivr-支持的-GitHub-资源的方式"><a href="#jsDelivr-支持的-GitHub-资源的方式" class="headerlink" title="jsDelivr 支持的 GitHub 资源的方式"></a><strong>jsDelivr 支持的 GitHub 资源的方式</strong></h1><p>jsDelivr 对 GitHub 的支持是作为重要特性来宣传的，官网的介绍链接：<a href="https://www.jsdelivr.com/features#gh">https://www.jsdelivr.com/features#gh</a> 以下是一些认为需要了解的知识的小结：</p><p>这里以我托管博客的 GitHub 仓库为例，地址是 <a href="https://github.com/mzlogin/mzlogin.github.io%EF%BC%8C%E9%82%A3%E5%AE%83%E9%87%8C%E9%9D%A2%E7%9A%84%E8%B5%84%E6%BA%90%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BB%A5">https://github.com/mzlogin/mzlogin.github.io，那它里面的资源可以直接以</a> <a href="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/</a> + 仓库里的文件路径 来访问。</p><p>比如仓库里有一个 js 文件 assets/js/main.js，那么它可以用 CDN 链接 <a href="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/assets/js/main.js">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io/assets/js/main.js</a> 来访问。</p><p>另外还支持一些高级用法，比如：</p><ol><li>指定 release 版本号/提交 sha1/分支名称，例如指定获取该仓库的名称为 1.2.0 或 v1.2.0 的 release 版本资源：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js</span><br></pre></td></tr></table></figure>如果指定版本为 1 或者 1.2，那它会自动匹配到这个范围内的最新版本号。</li></ol><p> 也可以不指定版本或者指定版本为 latest，这样总是使用最新版本的资源。</p><ol start="2"><li>压缩资源，在 js/css 文件后缀前面加上 .min：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.min.js</span><br></pre></td></tr></table></figure></li><li>合并多个文件，用 combine/file1,file2,file3 格式的链接：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/combine/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.min.js,gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/simple-jekyll-search.min.js</span><br></pre></td></tr></table></figure>压缩资源、合并文件的 CDN 链接在第一次有人访问时可能比较慢，后面再有人访问就快了。</li></ol><h2 id="其它知识点："><a href="#其它知识点：" class="headerlink" title="其它知识点："></a>其它知识点：</h2><ol><li>可以通过 <a href="https://cdn.jsdelivr.net/combine/gh/mzlogin/mzlogin.github.io[@">https://cdn.jsdelivr.net/combine/gh/mzlogin/mzlogin.github.io[@</a>&lt;版本号&gt;]/[&lt;文件夹&gt;/] 这样的路径浏览缓存文件列表；</li><li>可以访问 <a href="https://purge.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js">https://purge.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js</a> 来清除指定文件的缓存；（将引用的 CDN 链接里的 cdn 改成 purge 就是了）</li><li>可以访问 <a href="https://data.jsdelivr.com/v1/package/gh/mzlogin/mzlogin.github.io">https://data.jsdelivr.com/v1/package/gh/mzlogin/mzlogin.github.io</a> 来查看 CDN 上的 tags 和 versions 列表，更多数据接口参数参见 <a href="https://github.com/jsdelivr/data.jsdelivr.com%E3%80%82">https://github.com/jsdelivr/data.jsdelivr.com。</a></li></ol><h1 id="改造步骤"><a href="#改造步骤" class="headerlink" title="改造步骤"></a><strong>改造步骤</strong></h1><p>下面是记录具体改造博客模板的步骤：</p><p>在 _config.yml 文件中添加控制开关：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 对 css 和 js 资源的 cdn 加速配置</span><br><span class="line">cdn:</span><br><span class="line">    jsdelivr:</span><br><span class="line">        enabled: true</span><br></pre></td></tr></table></figure><p>修改 _layouts 里的文件，给名为 assets_base_url 的变量赋值，用它来代表加载静态资源的根路径：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% assign assets_base_url = site.url %&#125;</span><br><span class="line">&#123;% if site.cdn.jsdelivr.enabled %&#125;</span><br><span class="line">    &#123;% assign assets_base_url = &quot;https://cdn.jsdelivr.net/gh/&quot; | append: site.repository | append: &#x27;@master&#x27; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><br>修改以前直接用  拼接的静态资源引用链接，替换为 ，比如 _includes/header.html 里：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; site.url &#125;&#125;/assets/css/posts/index.css&quot;&gt;</span><br><span class="line">+ &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; assets_base_url &#125;&#125;/assets/css/posts/index.css&quot;&gt;</span><br></pre></td></tr></table></figure><br>这样万一哪天 CDN 出了点什么状况，我们也可以很方便地通过一个开关就切回自已的资源链接恢复服务。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;挺久以前就有网友给我的 GitHub Pages 博客模板提 Issue，说希望能增加 CDN 用于加速静态资源的加载，由于懒，一直没有动。&lt;/p&gt;</summary>
    
    
    
    
    <category term="jsDelivr" scheme="https://g8d.xyz/tags/jsDelivr/"/>
    
  </entry>
  
  <entry>
    <title>使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源（二）</title>
    <link href="https://g8d.xyz/2021/03/10/jsDelivr-2/"/>
    <id>https://g8d.xyz/2021/03/10/jsDelivr-2/</id>
    <published>2021-03-10T04:13:47.000Z</published>
    <updated>2021-11-20T04:20:14.298Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一篇 使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源，在那之后，又陆续想到并实施了几点利用 jsDelivr 进一步加速静态资源加载的措施，新起一篇作为记录和分享。</p><span id="more"></span><p>继上一轮改造过后，比较拖页面加载速度的主要有三点：</p><ol><li>页面首个请求响应时间；</li><li>图片资源加载时间；</li><li>站内搜索引用的 JSON 资源加载时间。</li></ol><p>第 1 点在页面仍然托管在 GitHub Pages 的前提下，似乎没有什么好办法能产生质的飞跃；本篇主要改善了第 2 点和第 3 点。</p><h1 id="0x01-图片资源加速"><a href="#0x01-图片资源加速" class="headerlink" title="0x01 图片资源加速"></a><strong>0x01 图片资源加速</strong></h1><p>这里所说的图片主要是指文章里引用的图片。</p><p>我一直将图片放在博客源码根目录的 images 文件夹下，引用图片的习惯写法是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![after use cdn](/images/posts/github/cdn-after.png)</span><br></pre></td></tr></table></figure><p>如果想将这个图片地址替换为 jsDelivr 的地址，需要做的就是将 /images 替换为 <a href="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images</a></p><p>一处一处替换行不行？当然也行，但后面写新文章时要引用图片，还得手动写这一长串，不方便；万一 jsDeliver 出状况，也不好一键切换回来。有没有一劳永逸的方法？当然也有，我们从 Jekyll 的 layout 机制来想办法。</p><p>Jekyll 的 layout 可以理解为页面模板，它是可以继承的，比如我的博客的所有页面模板有一个共同的祖先模板 _layouts/default.html，模板里可以使用 Liquid 语法对内容进行处理，我们可以利用这一点，来自动完成批量替换的工作。</p><p>关键代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% assign assets_base_url = site.url %&#125;</span><br><span class="line">&#123;% if site.cdn.jsdelivr.enabled %&#125;</span><br><span class="line">&#123;% assign assets_base_url = &quot;https://cdn.jsdelivr.net/gh/&quot; | append: site.repository | append: &#x27;@master&#x27; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% assign assets_images_url = &#x27;src=&quot;&#x27; | append: assets_base_url | append: &quot;/images&quot; %&#125;</span><br><span class="line">&#123;% include header.html %&#125;</span><br><span class="line">    &#123;&#123; content | replace: &#x27;src=&quot;/images&#x27;, assets_images_url &#125;&#125;</span><br><span class="line">&#123;% include footer.html %&#125;</span><br></pre></td></tr></table></figure><p>大意就是，如果打开了启用 jsDelivr 加速的开关，就将 content 里的 src=”/images” 替换为 src=”<a href="https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images&quot;%EF%BC%8C%E5%90%A6%E5%88%99%E6%9B%BF%E6%8D%A2%E4%B8%BA">https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@master/images&quot;，否则替换为</a> src=”<a href="https://mazhuang.org/images&quot;">https://mazhuang.org/images&quot;</a></p><p>以上便达成了我们的目的</p><h1 id="0x02-站内搜索引用的-JSON-资源加速"><a href="#0x02-站内搜索引用的-JSON-资源加速" class="headerlink" title="0x02 站内搜索引用的 JSON 资源加速"></a><strong>0x02 站内搜索引用的 JSON 资源加速</strong></h1><p>我是使用 <a href="https://github.com/christian-fei/Simple-Jekyll-Search">Simple-Jekyll-Search</a> 这个 JavaScript 库来实现站内搜索的，它的搜索数据是来自一个动态生成的 JSON 文件。</p><p>这个 JSON 文件编译前长这样：</p><p><a href="https://github.com/mzlogin/mzlogin.github.io/blob/master/assets/search_data.json">https://github.com/mzlogin/mzlogin.github.io/blob/master/assets/search_data.json</a></p><p>Jekyll 编译后长这样：</p><p><a href="https://mazhuang.org/assets/search_data.json">https://mazhuang.org/assets/search_data.json</a></p><p>这样的资源是没有办法直接通过替换网址来用 jsDelivr 加速的，因为 jsDelivr 上缓存的是编译前的文件，而我们需要的是编译后的。</p><p>那我们就想办法：</p><p>将博客源码编译；<br>将编译结果保存到另一个分支；<br>通过 jsDelivr 引用新分支上的这个文件。<br>这些步骤可以通过 GitHub 去年推出的新特性 <a href="https://github.com/features/actions">Actions</a> 来完成，在我们每一次向博客源码仓库 push 代码时自动触发。</p><p>关键步骤如下：</p><ol><li>在 GitHub 新建一个 Personal access Token：</li></ol><p> Settings –&gt; Developer settings –&gt; Personal access tokens –&gt; Generate new token –&gt; 填写 note，勾选 public_repo，生成之后复制 token 值备用。</p><ol start="2"><li><p>在博客源码仓库的 Settings –&gt; Secrets –&gt; New secret，Name 填 ACCESS_TOKEN，Value 填第 1 步里复制的 token 值；</p></li><li><p>在博客源码根目录下新建文件 .github/workflows/ci.yml，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">name: Build and Deploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v2.3.1</span><br><span class="line">        with: </span><br><span class="line">          persist-credentials: false</span><br><span class="line"></span><br><span class="line">      - name: Set Ruby 2.7</span><br><span class="line">        uses: actions/setup-ruby@v1</span><br><span class="line">        with:</span><br><span class="line">          ruby-version: 2.7</span><br><span class="line"></span><br><span class="line">      - name: Install and Build</span><br><span class="line">        run: |</span><br><span class="line">          gem install bundler</span><br><span class="line">          bundle install</span><br><span class="line">          bundle exec jekyll build</span><br><span class="line">           </span><br><span class="line">      - name: Deploy</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@3.6.2</span><br><span class="line">        with:</span><br><span class="line">          ACCESS_TOKEN: $</span><br><span class="line">          BRANCH: built</span><br><span class="line">          FOLDER: _site</span><br><span class="line">          CLEAN: true</span><br></pre></td></tr></table></figure><p>大意就是在向 master 分支 push 代码时，自动执行 checkout、初始化 ruby 环境、安装 Jekyll 并编译博客源码的工作，最后将编译生成的 _site 目录里的内容推送到 built 分支。对 GitHub Actions 感兴趣的同学可以自行参考官方说明学习</p></li><li><p>修改引用 JSON 文件的地方，比如我的 _includes/sidebar-search.html 里的写法由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json: &#x27;https://mazhuang.org/assets/search_data.json&#x27;,</span><br></pre></td></tr></table></figure><p>改为了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.cdn.jsdelivr.enabled and site.url contains &#x27;mazhuang.org&#x27; %&#125;</span><br><span class="line">  json: &#x27;https://cdn.jsdelivr.net/gh/mzlogin/mzlogin.github.io@built/assets/search_data.json&#x27;,</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  json: &#x27;&#123;&#123; site.url &#125;&#125;/assets/search_data.json&#x27;,</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>将以上更改推送到源码仓库，等待处理完成即可。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写过一篇 使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源，在那之后，又陆续想到并实施了几点利用 jsDelivr 进一步加速静态资源加载的措施，新起一篇作为记录和分享。&lt;/p&gt;</summary>
    
    
    
    
    <category term="jsDelivr" scheme="https://g8d.xyz/tags/jsDelivr/"/>
    
  </entry>
  
  <entry>
    <title>B2+CF+ShareX,实现无成本图床和便捷上传</title>
    <link href="https://g8d.xyz/2021/02/02/shareX/"/>
    <id>https://g8d.xyz/2021/02/02/shareX/</id>
    <published>2021-02-02T13:51:26.000Z</published>
    <updated>2021-11-02T13:53:42.373Z</updated>
    
    <content type="html"><![CDATA[<h1 class="wp-block-zibllblock-biaoti title-theme" id="wznav_0">准备</h1>1.一个cloudflare账号 https://dash.cloudflare.com/2.一个B2账号 https://www.backblaze.com/b2/cloud-storage.html3.windows软件ShareX<span id="more"></span><h1 class="wp-block-zibllblock-biaoti title-theme" id="wznav_1">步骤</h1>1.注册B2账号,点击进入B2 Cloud Storage,点击Buckets创建一个BUcket,设为public,并上传一个图片,记录下下图要用的域名<figure class="wp-block-image size-large"><img src="https://dlcu.cf/yymqCaPBK1.png" data-src="https://dlcu.cf/yymqCaPBK1.png" alt="" class=" lazyloaded" /></figure>2.点击App keys,添加一个新的key,bucket就选你刚创建的那个,记录下你的密钥,之后要在ShareX中用<figure class="wp-block-image size-large"><img src="https://dlcu.cf/lq4iZxMbyV.png" data-src="https://dlcu.cf/lq4iZxMbyV.png" alt="" class=" lazyloaded" /></figure>3.打开cf,cname一下上图要记的域名,小云朵点亮<figure class="wp-block-image size-large"><img src="https://dlcu.cf/zZ9ctKUmmD.png" data-src="https://dlcu.cf/zZ9ctKUmmD.png" alt="" class=" lazyloaded" /></figure>4.加一条页面缓存规则.<figure class="wp-block-image size-large"><img src="https://dlcu.cf/MzfvOqqD3w.png" data-src="https://dlcu.cf/MzfvOqqD3w.png" alt="" class=" lazyloaded" /></figure>5.创建一个workers,粘贴下列代码,记得b2domain和bucket的值改成自己的<div class="enlighter-default enlighter-v-standard enlighter-t-bootstrap4 enlighter-hover enlighter-linenumbers enlighter-overflow-scroll"><div class="enlighter"><div class=""><div><span class="enlighter-s0">'use strict'</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text">const b2Domain = </span><span class="enlighter-s0">'img.domain.com'</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // configure this as per instructions above</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const b2Bucket = </span><span class="enlighter-s0">'bucket-name'</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // configure this as per instructions above</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const b2UrlPath = `/file/$</span><span class="enlighter-g1">{</span><span class="enlighter-text">b2Bucket</span><span class="enlighter-g1">}</span><span class="enlighter-text">/`;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-m0">addEventListener</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'fetch'</span><span class="enlighter-text">, event =</span><span class="enlighter-g1">&gt;</span><span class="enlighter-text"> </span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">return</span><span class="enlighter-text"> event.</span><span class="enlighter-m3">respondWith</span><span class="enlighter-g1">(</span><span class="enlighter-m0">fileReq</span><span class="enlighter-g1">(</span><span class="enlighter-text">event</span><span class="enlighter-g1">))</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-g1">})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-c0"></span></div></div><div class=""><div><span class="enlighter-c0">// define the file extensions we wish to add basic access control headers to</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const corsFileTypes = </span><span class="enlighter-g1">[</span><span class="enlighter-s0">'png'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'jpg'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'gif'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'jpeg'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'webp'</span><span class="enlighter-g1">]</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-c0"></span></div></div><div class=""><div><span class="enlighter-c0">// backblaze returns some additional headers that are useful for debugging, but unnecessary in production. We can remove these to save some size</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const removeHeaders = </span><span class="enlighter-g1">[</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'x-bz-content-sha1'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'x-bz-file-id'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'x-bz-file-name'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'x-bz-info-src_last_modified_millis'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'X-Bz-Upload-Timestamp'</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-s0">'Expires'</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-g1">]</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text">const expiration = </span><span class="enlighter-n1">31536000</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // override browser cache for images - 1 year</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-c0"></span></div></div><div class=""><div><span class="enlighter-c0">// define a function we can re-use to fix headers</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text">const fixHeaders = </span><span class="enlighter-k1">function</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, status, headers</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> let newHdrs = </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">Headers</span><span class="enlighter-g1">(</span><span class="enlighter-text">headers</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // add basic cors headers for images</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">corsFileTypes.</span><span class="enlighter-m3">includes</span><span class="enlighter-g1">(</span><span class="enlighter-text">url.</span><span class="enlighter-m3">pathname</span><span class="enlighter-text">.</span><span class="enlighter-m3">split</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'.'</span><span class="enlighter-g1">)</span><span class="enlighter-text">.</span><span class="enlighter-m3">pop</span><span class="enlighter-g1">())){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'Access-Control-Allow-Origin'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'*'</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // override browser cache for files when 200</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">status === </span><span class="enlighter-n1">200</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'Cache-Control'</span><span class="enlighter-text">, </span><span class="enlighter-s0">"public, max-age="</span><span class="enlighter-text"> + expiration</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-k1">else</span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // only cache other things for 5 minutes</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'Cache-Control'</span><span class="enlighter-text">, </span><span class="enlighter-s0">'public, max-age=300'</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // set ETag for efficient caching where possible</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> const ETag = newHdrs.</span><span class="enlighter-m3">get</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'x-bz-content-sha1'</span><span class="enlighter-g1">)</span><span class="enlighter-text"> </span><span class="enlighter-g0">||</span><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">get</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'x-bz-info-src_last_modified_millis'</span><span class="enlighter-g1">)</span><span class="enlighter-text"> </span><span class="enlighter-g0">||</span><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">get</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'x-bz-file-id'</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">ETag</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'ETag'</span><span class="enlighter-text">, ETag</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // remove unnecessary headers</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> removeHeaders.</span><span class="enlighter-m3">forEach</span><span class="enlighter-g1">(</span><span class="enlighter-text">header =</span><span class="enlighter-g1">&gt;</span><span class="enlighter-text"> </span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">delete</span><span class="enlighter-g1">(</span><span class="enlighter-text">header</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">return</span><span class="enlighter-text"> newHdrs;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-g1">}</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text">async </span><span class="enlighter-k1">function</span><span class="enlighter-text"> </span><span class="enlighter-m0">fileReq</span><span class="enlighter-g1">(</span><span class="enlighter-text">event</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> const cache = caches.</span><span class="enlighter-m3">default</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // Cloudflare edge caching</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> const url = </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">URL</span><span class="enlighter-g1">(</span><span class="enlighter-text">event.</span><span class="enlighter-m3">request</span><span class="enlighter-text">.</span><span class="enlighter-m3">url</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">url.</span><span class="enlighter-m3">host</span><span class="enlighter-text"> === b2Domain </span><span class="enlighter-g0">&amp;&amp;</span><span class="enlighter-text"> !url.</span><span class="enlighter-m3">pathname</span><span class="enlighter-text">.</span><span class="enlighter-m3">startsWith</span><span class="enlighter-g1">(</span><span class="enlighter-text">b2UrlPath</span><span class="enlighter-g1">)){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> url.</span><span class="enlighter-m3">pathname</span><span class="enlighter-text"> = b2UrlPath + url.</span><span class="enlighter-m3">pathname</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> let response = await cache.</span><span class="enlighter-m3">match</span><span class="enlighter-g1">(</span><span class="enlighter-text">url</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span><span class="enlighter-c0"> // try to find match for this request in the edge cache</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">response</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // use cache found on Cloudflare edge. Set X-Worker-Cache header for helpful debug</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> let newHdrs = </span><span class="enlighter-m0">fixHeaders</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, response.</span><span class="enlighter-m3">status</span><span class="enlighter-text">, response.</span><span class="enlighter-m3">headers</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> newHdrs.</span><span class="enlighter-m3">set</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'X-Worker-Cache'</span><span class="enlighter-text">, </span><span class="enlighter-s0">"true"</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">return</span><span class="enlighter-text"> </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">Response</span><span class="enlighter-g1">(</span><span class="enlighter-text">response.</span><span class="enlighter-m3">body</span><span class="enlighter-text">, </span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> status: response.</span><span class="enlighter-m3">status</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> statusText: response.</span><span class="enlighter-m3">statusText</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> headers: newHdrs</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-c0"> // no cache, fetch image, apply Cloudflare lossless compression</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> response = await </span><span class="enlighter-m0">fetch</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, </span><span class="enlighter-g1">{</span><span class="enlighter-text">cf: </span><span class="enlighter-g1">{</span><span class="enlighter-text">polish: </span><span class="enlighter-s0">"lossless"</span><span class="enlighter-g1">}})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> let newHdrs = </span><span class="enlighter-m0">fixHeaders</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, response.</span><span class="enlighter-m3">status</span><span class="enlighter-text">, response.</span><span class="enlighter-m3">headers</span><span class="enlighter-g1">)</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">if</span><span class="enlighter-g1">(</span><span class="enlighter-text">response.</span><span class="enlighter-m3">status</span><span class="enlighter-text"> === </span><span class="enlighter-n1">200</span><span class="enlighter-g1">){</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> response = </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">Response</span><span class="enlighter-g1">(</span><span class="enlighter-text">response.</span><span class="enlighter-m3">body</span><span class="enlighter-text">, </span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> status: response.</span><span class="enlighter-m3">status</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> statusText: response.</span><span class="enlighter-m3">statusText</span><span class="enlighter-text">,</span></div></div><div class=""><div><span class="enlighter-text"> headers: newHdrs</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">})</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-k1">else</span><span class="enlighter-g1">{</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> response = </span><span class="enlighter-k1">new</span><span class="enlighter-text"> </span><span class="enlighter-m0">Response</span><span class="enlighter-g1">(</span><span class="enlighter-s0">'File not found!'</span><span class="enlighter-text">, </span><span class="enlighter-g1">{</span><span class="enlighter-text"> status: </span><span class="enlighter-n1">404</span><span class="enlighter-text"> </span><span class="enlighter-g1">})</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-g1">}</span><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"></span></div></div><div class=""><div><span class="enlighter-text"> event.</span><span class="enlighter-m3">waitUntil</span><span class="enlighter-g1">(</span><span class="enlighter-text">cache.</span><span class="enlighter-m3">put</span><span class="enlighter-g1">(</span><span class="enlighter-text">url, response.</span><span class="enlighter-m3">clone</span><span class="enlighter-g1">()))</span><span class="enlighter-text">;</span></div></div><div class=""><div><span class="enlighter-text"> </span><span class="enlighter-k1">return</span><span class="enlighter-text"> response;</span></div></div><div class=""><div><span class="enlighter-text"></span><span class="enlighter-g1">}</span></div></div></div></div>6.workers里添加路由,使访问你的域名时,先走workers<figure class="wp-block-image size-large"><img src="https://dlcu.cf/GnuGH0pVbn.png" data-src="https://dlcu.cf/GnuGH0pVbn.png" alt="" class=" lazyloaded" /></figure>访问一下你的图片文件比如说一开始是https://f000.backblazeb2.com/file/backblaze1489498/wallhaven-md2x8m.jpg现在用https://dlcu.cf/wallhaven-md2x8m.jpg就可以访问了<p>7.配置ShareX.</p><p>这个感觉没啥好说的,主页面–目标–上传目标设置–backblaze b2,填上就行了</p><figure class="wp-block-image size-large"><img src="https://dlcu.cf/O6FVrPQlmZ.png" data-src="https://dlcu.cf/O6FVrPQlmZ.png" alt="" class=" lazyloaded" /></figure><h1 class="wp-block-zibllblock-biaoti title-theme" id="wznav_2">结束</h1>这个的好处就是方便了上传,自己在电脑前,截一下图直接上传,或者复制一下直接上传还有就是可以用自己的域名,再说的话就是数据自己也能找回.]]></content>
    
    
    <summary type="html">&lt;h1 class=&quot;wp-block-zibllblock-biaoti title-theme&quot; id=&quot;wznav_0&quot;&gt;准备&lt;/h1&gt;
1.一个cloudflare账号 https://dash.cloudflare.com/
2.一个B2账号 https://www.backblaze.com/b2/cloud-storage.html
3.windows软件ShareX</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://g8d.xyz/tags/cloudflare/"/>
    
  </entry>
  
</feed>
